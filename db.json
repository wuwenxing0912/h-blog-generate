{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/Cookie、Session和LocalStorage.md","hash":"e3f445582a65ab032921c5bde793323d214e44ce","modified":1623220174731},{"_id":"source/_posts/JS函数.md","hash":"a562ae8741bae6c8da93f5cda93f8a58d21817be","modified":1623219994395},{"_id":"source/_posts/JS函数作用域.md","hash":"e8674c0ef6e8f854663eb79aca50d9b78a3e39ac","modified":1623220158724},{"_id":"source/_posts/MVC模式.md","hash":"8fda50e99167269a31aaeae2375248aed423d0d5","modified":1623224084106},{"_id":"source/_posts/REM.md","hash":"ec37a7d2b316f139657b9f703ff9069dd46a1129","modified":1623224160537},{"_id":"source/_posts/flex布局.md","hash":"4a3e496fd1578cbdc1660a16d033d73eaba4fced","modified":1623223982227},{"_id":"source/_posts/webpack的安装与配置.md","hash":"99fa229b319ed84de75b8c53d027eb4fbd603100","modified":1623220124140},{"_id":"source/_posts/事件模型.md","hash":"4c72265cdb517c51243f723ba636595089b0c20b","modified":1623224191298},{"_id":"source/_posts/判断JS数据类型的方法.md","hash":"809a93d4e82e7081cc381daf86227d499fda333c","modified":1623219467299},{"_id":"source/_posts/封装一个全局函数.md","hash":"f07fc5f16e40d00047cadaa659e7c2642652d6a1","modified":1623220026828},{"_id":"source/_posts/搭建Hexo个人博客.md","hash":"9de5b961ad20a92d82bdc59f7962d9b466803ce1","modified":1525328064452},{"_id":"source/_posts/空标签.md","hash":"dd0032d82a9d431e84fd711415c99e3479a15510","modified":1525328234016},{"_id":"source/_posts/第二篇博客.md","hash":"790b64946a2a3356453687519c74d6bbaeb0bb82","modified":1520926857786},{"_id":"source/_posts/闭包.md","hash":"9874df8c2c55d6ba472d9cd30dbb7e5ae78fa3c5","modified":1623220246579},{"_id":"source/_posts/REM/rem-1.jpg","hash":"2bdbfe6dacb224c7f2b7364e49b4b707a7e811c0","modified":1531328847685},{"_id":"source/_posts/REM/rem-2.jpg","hash":"2d9ef43fd917517662322cadf217e3724e60c01e","modified":1531329530613},{"_id":"source/_posts/REM/rem-3.jpg","hash":"335a9964f47dabdfc675feb68469432c04d8c2ce","modified":1531330825613},{"_id":"source/_posts/MVC模式/1.jpg","hash":"576ced5634d3ee17229797e4b06475f01e5280d5","modified":1529567154915},{"_id":"source/_posts/flex布局/align-content-center.jpg","hash":"cbb6e57a500f5d6a46720cafd1dc0684284a612e","modified":1531303472050},{"_id":"source/_posts/flex布局/align-content-flex-end.jpg","hash":"d6013c9d7bb060e71aa42c7026d36266216f6629","modified":1531303386305},{"_id":"source/_posts/flex布局/align-content-flex-start.jpg","hash":"8c231053aeadf6a38319292759ea4bee3ac2cc61","modified":1531303357383},{"_id":"source/_posts/flex布局/align-content-space-between.jpg","hash":"7ef28057d2c8e98b3b4ab5c67203b7c4182c3f03","modified":1531303767761},{"_id":"source/_posts/flex布局/align-content-stretch.jpg","hash":"05d03a5e863008a87dcc0c6c7f8b3a6f6cc930c0","modified":1531304091815},{"_id":"source/_posts/flex布局/align-content-space-around.jpg","hash":"75ace1408e5eb19b87c63edd1e4105b1cf5e2d8d","modified":1531303942516},{"_id":"source/_posts/flex布局/align-items-baseline.jpg","hash":"717d76e2eb6232b706aa942e3d2adb12c81e08ee","modified":1531302737630},{"_id":"source/_posts/flex布局/align-items-center.jpg","hash":"e869af9baaa4aadb4bd0c8cea7d0bbbfa77d0012","modified":1531302679805},{"_id":"source/_posts/flex布局/align-items-flex-end.jpg","hash":"3ebaeffc52a6d77b075a91dd16fd567de3edfb45","modified":1531302604073},{"_id":"source/_posts/flex布局/align-items-flex-start.jpg","hash":"bc519eae5121b3f2248c7dca05ff32fcf668d586","modified":1531302501639},{"_id":"source/_posts/flex布局/align-self.jpg","hash":"f49fdce034bed6f08d33c4b0a3370c9ca85962ac","modified":1531305728379},{"_id":"source/_posts/flex布局/align-items-stretch.jpg","hash":"fa3fc75d45b6234afacc2fd4a82341d01454c9ea","modified":1531302868846},{"_id":"source/_posts/flex布局/center.jpg","hash":"82340b9e7a022aa11c7a1fce90e85c10232e0684","modified":1531301834535},{"_id":"source/_posts/flex布局/column.jpg","hash":"231c9857b992817745b761eb2e6338f61fd94a42","modified":1531300653004},{"_id":"source/_posts/flex布局/column-reverse.jpg","hash":"48298a6aedce995a87a233cbbdfe64aab9bd8229","modified":1531300726798},{"_id":"source/_posts/flex布局/flex-basis.jpg","hash":"85f64adc6525ed5a76ad73e3e5677385098c3632","modified":1531305414047},{"_id":"source/_posts/flex布局/flex-auto.jpg","hash":"14decb25c5e383ca9edc34b89c2e652a1b5453f6","modified":1531305583883},{"_id":"source/_posts/flex布局/flex-end.jpg","hash":"83e0baafd9b78ee80f50612ad3fbd9b6e0fc65fa","modified":1531301792554},{"_id":"source/_posts/flex布局/flex-flow.jpg","hash":"e107577337fe127b9efd50471e0e8849d87624da","modified":1531301382079},{"_id":"source/_posts/flex布局/flex-grow-2.jpg","hash":"8374087ba7417dfd884833882a1a6d4671c1ceb9","modified":1531304830189},{"_id":"source/_posts/flex布局/flex-shrink-2.jpg","hash":"0119a03878b4c17afbf07424e2c20e2f849539f6","modified":1531305112929},{"_id":"source/_posts/flex布局/flex-grow.jpg","hash":"4dab2e1b6a47a0a285222f8d6717d0528f67672e","modified":1531304726550},{"_id":"source/_posts/flex布局/flex-shrink.jpg","hash":"d29b33944b2b5d14439ee5a6c0e02dc8b1cfc3df","modified":1531305045122},{"_id":"source/_posts/flex布局/flex.jpg","hash":"6b773c5ff064afa0d131645ac35142d11526529b","modified":1531299385827},{"_id":"source/_posts/flex布局/nowrap.jpg","hash":"f7c033922dbc43ff081fed24bac7d24f93731e21","modified":1531301030007},{"_id":"source/_posts/flex布局/flex-start.jpg","hash":"98bace5f8ee2888213a5cd8d8bd097bd6b18e986","modified":1531301716600},{"_id":"source/_posts/flex布局/row-reverse.jpg","hash":"70e9da0457de0b38fd0bbdbac1da5f2425d9d2bf","modified":1531300551029},{"_id":"source/_posts/flex布局/row.jpg","hash":"ccb8b0024f6a5e94a12d113b27fd64774b28f8ad","modified":1531300467824},{"_id":"source/_posts/flex布局/order.jpg","hash":"85583ef1287e531d8ba5ce10815d333511da90e9","modified":1531304452399},{"_id":"source/_posts/flex布局/space-around.jpg","hash":"f0ed69e146bbf9d3dc60e18628da315e8d5d03d5","modified":1531302050291},{"_id":"source/_posts/flex布局/space-between.jpg","hash":"717921ca54f7e54b81a3638f938935fa5a38ca94","modified":1531301895125},{"_id":"source/_posts/flex布局/wrap-reverse.jpg","hash":"7b2aabb37daea0bfe582c9aabbd04801d7ea5b7e","modified":1531301185650},{"_id":"source/_posts/flex布局/wrap.jpg","hash":"f50d76249a79bd4daded7355884547e7c57e110e","modified":1531301115837},{"_id":"source/_posts/事件模型/1.jpg","hash":"05f57728c6b604fb8220bb52cb0575c6fcfdd650","modified":1530297118735},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1514806389000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1514806389000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1514806389000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1514806389000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1514806389000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1514806389000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1514806389000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1514806389000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1514806389000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1514806389000},{"_id":"themes/next/README.cn.md","hash":"58ffe752bc4b7f0069fcd6304bbc2d5ff7b80f89","modified":1514806389000},{"_id":"themes/next/README.md","hash":"898213e66d34a46c3cf8446bf693bd50db0d3269","modified":1514806389000},{"_id":"themes/next/_config.yml","hash":"6814e6b358eca513c788346b1f940beae300cc68","modified":1623220654092},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1514806389000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1514806389000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1514806389000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1514806389000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1514806389000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1514806389000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1514806389000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1514806389000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1514806389000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1514806389000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1514806389000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1514806389000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1514806389000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1514806389000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1514806389000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1514806389000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1514806389000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1514806389000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1514806389000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1514806389000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1514806389000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1514806389000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1514806389000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1514806389000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1514806389000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1514806389000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1514806389000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1514806389000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1514806389000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1514806389000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1514806389000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1514806389000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1514806389000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1514806389000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1514806389000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1514806389000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1514806389000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1514806389000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1514806389000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1514806389000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1514806389000},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1514806389000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"866bff03930284700eee106687b2980d6a2d7a56","modified":1623217225470},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1514806389000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1514806389000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1514806389000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1514806389000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1514806389000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1514806389000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"26d95dfc5220d041841fa4ac66adb53d768b23d5","modified":1623216640309},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1514806389000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1514806389000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1514806389000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1514806389000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1514806389000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1514806389000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1514806389000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1514806389000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1514806389000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1514806389000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1514806389000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1514806389000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1514806389000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1514806389000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1514806389000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1514806389000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1514806389000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1514806389000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1514806389000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1514806389000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1514806389000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1514806389000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1514806389000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1514806389000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1514806389000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1514806389000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1514806389000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1514806389000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1514806389000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1514806389000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1514806389000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1514806389000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1514806389000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1514806389000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1514806389000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1514806389000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1514806389000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1514806389000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1514806389000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1514806389000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1514806389000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1514806389000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1514806389000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1514806389000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1514806389000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1514806389000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1514806389000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1514806389000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1514806389000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1514806389000},{"_id":"themes/next/source/js/src/post-details.js","hash":"64e92064494eed8290393d9b44abb86dae489216","modified":1623220922667},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1514806389000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1514806389000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1514806389000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1514806389000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1514806389000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1514806389000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1514806389000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1514806389000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1514806389000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1514806389000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1514806389000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1514806389000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1514806389000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1514806389000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1514806389000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1514806389000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1514806389000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1514806389000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1514806389000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1514806389000},{"_id":"source/categories/index.md","hash":"681526659db77c1b3413ab644f5f6470b0028d40","modified":1623219005748},{"_id":"source/tags/index.md","hash":"9008b08f3e36ea6674d2a9c90175d7ff1fc63350","modified":1623219015276},{"_id":"themes/next/source/images/avatar.png","hash":"cd5fd62ae60553904e11c7dc6ecced9e4a46691c","modified":1623218808442},{"_id":"public/categories/index.html","hash":"efb5a1ac38ee90a10bc377978fe950a8e7d531c7","modified":1627612997682},{"_id":"public/tags/index.html","hash":"6cdbee47803f5339872eb97eb7702f7ff998365e","modified":1627612997682},{"_id":"public/2018/05/03/空标签/index.html","hash":"cf5efdefabe808461f71866f592fe923017b2ee2","modified":1627612997682},{"_id":"public/2018/05/03/搭建Hexo个人博客/index.html","hash":"9d964d62ae765ed6e9a89047e93fa72c47bad896","modified":1627612997682},{"_id":"public/categories/JavaScript/index.html","hash":"711d30151ec9ace79101f999b867dcfd5bf03500","modified":1627612997682},{"_id":"public/categories/CSS/index.html","hash":"6dc1f9ed305c595a6e6b420847dedae1aaccad7f","modified":1627612997682},{"_id":"public/categories/Webpack/index.html","hash":"976d5cdeef9125307aefe927b995a98f93871511","modified":1627612997682},{"_id":"public/archives/page/2/index.html","hash":"d9a96877016c3c8f266dceabf9bf6999a97883f2","modified":1627612997682},{"_id":"public/archives/2018/page/2/index.html","hash":"191cd3231cc6b7be3993357024e7efd91aa38d51","modified":1627612997682},{"_id":"public/archives/2018/05/index.html","hash":"d123063a210f9adc9abdcc628527f02c0e7e58a8","modified":1627612997682},{"_id":"public/archives/2018/06/index.html","hash":"21e45160bb2467652275fc7d9d3e2b1d44c18bda","modified":1627612997682},{"_id":"public/archives/2018/07/index.html","hash":"9538fe07d67206a2d6b2d57c2f94d17386c9e718","modified":1627612997682},{"_id":"public/archives/2018/08/index.html","hash":"634eefc4bc73c543776a7bff82e512144b4cbb91","modified":1627612997682},{"_id":"public/archives/2021/index.html","hash":"82964cef5e7450c3dbb9d7db2922287fb37bc6e5","modified":1627612997682},{"_id":"public/archives/2021/06/index.html","hash":"a4de31bec02a5218bbdfd9fefb034bb9b2e28b55","modified":1627612997682},{"_id":"public/tags/typeof/index.html","hash":"6d2e9c453ae54f254e3d1d2d5be62bb9fab334ab","modified":1627612997682},{"_id":"public/tags/instanceof/index.html","hash":"f199f7ea2950a6173a47d0104342ee5a3730f331","modified":1627612997682},{"_id":"public/tags/toString/index.html","hash":"da9b269b00590c4224c18c03b4178231312c770d","modified":1627612997682},{"_id":"public/tags/Event/index.html","hash":"08f79af4962ca45b4d9846001157f1243f15cc85","modified":1627612997682},{"_id":"public/tags/webpack/index.html","hash":"282d3d0c73c53ef8af379a23e09a85c114c265fd","modified":1627612997682},{"_id":"public/tags/MVC/index.html","hash":"bed239510d7c076ecea22ae7a594f177ddb66ffb","modified":1627612997682},{"_id":"public/tags/Cookie/index.html","hash":"4eae18ae66fad26b131e200ce2c73185eb94c0c2","modified":1627612997682},{"_id":"public/tags/Session/index.html","hash":"d401ae979fbee98e7d92cd9f3e9e462670e1b241","modified":1627612997682},{"_id":"public/tags/LocalStorage/index.html","hash":"274ca590089a4bb2e0d0330830fbeb208d493e97","modified":1627612997682},{"_id":"public/tags/Closure/index.html","hash":"0aaf95fb69ac2696859e4236ad32bab3b1308987","modified":1627612997682},{"_id":"public/tags/function/index.html","hash":"a2bd34b7374642a0715a92de9d86a3f9a738f2d5","modified":1627612997682},{"_id":"public/2021/06/09/flex布局/index.html","hash":"25ca3d74fbc976e51469c6100e6bdf6b57c3c615","modified":1623221429971},{"_id":"public/2018/08/10/判断JS数据类型的方法/index.html","hash":"66e478b4b72c92588b34029c69ddc8e07da439b2","modified":1627612997682},{"_id":"public/2018/07/12/REM/index.html","hash":"61acfe4ed9222075478b14e2b1ed601ed339f773","modified":1627612997682},{"_id":"public/2018/07/02/webpack的安装与配置/index.html","hash":"c4502fd29d74db6485813dcdc9b2ae8b7f39323c","modified":1627612997682},{"_id":"public/2018/06/30/Cookie、Session和LocalStorage/index.html","hash":"87d2c21bc6b93fe778978948a36d4c32ba1ed237","modified":1627612997682},{"_id":"public/2018/06/30/事件模型/index.html","hash":"4942dd49a7aab16415572dfcd638a8ed93ec4064","modified":1627612997682},{"_id":"public/2018/06/21/MVC模式/index.html","hash":"75f94213eb387d3ca5183798e59534908bb22ad0","modified":1627612997682},{"_id":"public/2018/06/20/闭包/index.html","hash":"d304416deb41b5d81231dbd65902e678746d1b96","modified":1627612997682},{"_id":"public/2018/05/19/封装一个全局函数/index.html","hash":"fedcaa522ebeb9196c38b42a4945fe94b5ac6e5f","modified":1627612997682},{"_id":"public/2018/05/03/JS函数/index.html","hash":"adc281cb07c605266e755dcb06b27e3c1d66ff77","modified":1627612997682},{"_id":"public/2018/05/04/JS函数作用域/index.html","hash":"b5d4469f358defa6ff33e7d9ac8f85baff3afb06","modified":1627612997682},{"_id":"public/index.html","hash":"c4d3ade799da09cf3ff965bdff08894d90489936","modified":1627612997682},{"_id":"public/page/2/index.html","hash":"d16a6f98047f127c601bf63be25dd807df00996e","modified":1627612997682},{"_id":"public/archives/index.html","hash":"08aca2694a8dbb79a368de1fe4c3037c4f707af8","modified":1627612997682},{"_id":"public/archives/2018/index.html","hash":"9d6e9778a5ee1ef7d1b29e830819f86aa8a07b24","modified":1627612997682},{"_id":"public/tags/rem/index.html","hash":"c1f918e597a11d5edcb9a5ac0e862f1d2de91f46","modified":1627612997682},{"_id":"public/2021/06/09/flex布局/align-content-center.jpg","hash":"cbb6e57a500f5d6a46720cafd1dc0684284a612e","modified":1623221429971},{"_id":"public/2021/06/09/flex布局/align-content-flex-start.jpg","hash":"8c231053aeadf6a38319292759ea4bee3ac2cc61","modified":1623221429971},{"_id":"public/2021/06/09/flex布局/align-content-flex-end.jpg","hash":"d6013c9d7bb060e71aa42c7026d36266216f6629","modified":1623221429971},{"_id":"public/2021/06/09/flex布局/align-content-space-around.jpg","hash":"75ace1408e5eb19b87c63edd1e4105b1cf5e2d8d","modified":1623221429971},{"_id":"public/2021/06/09/flex布局/align-content-space-between.jpg","hash":"7ef28057d2c8e98b3b4ab5c67203b7c4182c3f03","modified":1623221429971},{"_id":"public/2021/06/09/flex布局/align-content-stretch.jpg","hash":"05d03a5e863008a87dcc0c6c7f8b3a6f6cc930c0","modified":1623221429971},{"_id":"public/2021/06/09/flex布局/align-items-baseline.jpg","hash":"717d76e2eb6232b706aa942e3d2adb12c81e08ee","modified":1623221429971},{"_id":"public/2021/06/09/flex布局/align-items-center.jpg","hash":"e869af9baaa4aadb4bd0c8cea7d0bbbfa77d0012","modified":1623221429971},{"_id":"public/2021/06/09/flex布局/align-items-flex-start.jpg","hash":"bc519eae5121b3f2248c7dca05ff32fcf668d586","modified":1623221429971},{"_id":"public/2021/06/09/flex布局/align-items-stretch.jpg","hash":"fa3fc75d45b6234afacc2fd4a82341d01454c9ea","modified":1623221429971},{"_id":"public/2021/06/09/flex布局/align-items-flex-end.jpg","hash":"3ebaeffc52a6d77b075a91dd16fd567de3edfb45","modified":1623221429971},{"_id":"public/2021/06/09/flex布局/align-self.jpg","hash":"f49fdce034bed6f08d33c4b0a3370c9ca85962ac","modified":1623221429971},{"_id":"public/2021/06/09/flex布局/column-reverse.jpg","hash":"48298a6aedce995a87a233cbbdfe64aab9bd8229","modified":1623221429971},{"_id":"public/2021/06/09/flex布局/center.jpg","hash":"82340b9e7a022aa11c7a1fce90e85c10232e0684","modified":1623221429971},{"_id":"public/2021/06/09/flex布局/column.jpg","hash":"231c9857b992817745b761eb2e6338f61fd94a42","modified":1623221429971},{"_id":"public/2021/06/09/flex布局/flex-auto.jpg","hash":"14decb25c5e383ca9edc34b89c2e652a1b5453f6","modified":1623221429971},{"_id":"public/2021/06/09/flex布局/flex-basis.jpg","hash":"85f64adc6525ed5a76ad73e3e5677385098c3632","modified":1623221429971},{"_id":"public/2021/06/09/flex布局/flex-end.jpg","hash":"83e0baafd9b78ee80f50612ad3fbd9b6e0fc65fa","modified":1623221429971},{"_id":"public/2021/06/09/flex布局/flex-flow.jpg","hash":"e107577337fe127b9efd50471e0e8849d87624da","modified":1623221429971},{"_id":"public/2021/06/09/flex布局/flex-grow-2.jpg","hash":"8374087ba7417dfd884833882a1a6d4671c1ceb9","modified":1623221429971},{"_id":"public/2021/06/09/flex布局/flex-grow.jpg","hash":"4dab2e1b6a47a0a285222f8d6717d0528f67672e","modified":1623221429971},{"_id":"public/2021/06/09/flex布局/flex-shrink-2.jpg","hash":"0119a03878b4c17afbf07424e2c20e2f849539f6","modified":1623221429971},{"_id":"public/2021/06/09/flex布局/flex-shrink.jpg","hash":"d29b33944b2b5d14439ee5a6c0e02dc8b1cfc3df","modified":1623221429971},{"_id":"public/2021/06/09/flex布局/flex-start.jpg","hash":"98bace5f8ee2888213a5cd8d8bd097bd6b18e986","modified":1623221429971},{"_id":"public/2021/06/09/flex布局/nowrap.jpg","hash":"f7c033922dbc43ff081fed24bac7d24f93731e21","modified":1623221429971},{"_id":"public/2021/06/09/flex布局/flex.jpg","hash":"6b773c5ff064afa0d131645ac35142d11526529b","modified":1623221429971},{"_id":"public/2021/06/09/flex布局/order.jpg","hash":"85583ef1287e531d8ba5ce10815d333511da90e9","modified":1623221429971},{"_id":"public/2021/06/09/flex布局/row-reverse.jpg","hash":"70e9da0457de0b38fd0bbdbac1da5f2425d9d2bf","modified":1623221429971},{"_id":"public/2021/06/09/flex布局/row.jpg","hash":"ccb8b0024f6a5e94a12d113b27fd64774b28f8ad","modified":1623221429971},{"_id":"public/2021/06/09/flex布局/space-around.jpg","hash":"f0ed69e146bbf9d3dc60e18628da315e8d5d03d5","modified":1623221429971},{"_id":"public/2021/06/09/flex布局/space-between.jpg","hash":"717921ca54f7e54b81a3638f938935fa5a38ca94","modified":1623221429971},{"_id":"public/2021/06/09/flex布局/wrap-reverse.jpg","hash":"7b2aabb37daea0bfe582c9aabbd04801d7ea5b7e","modified":1623221429971},{"_id":"public/2021/06/09/flex布局/wrap.jpg","hash":"f50d76249a79bd4daded7355884547e7c57e110e","modified":1623221429971},{"_id":"public/js/src/post-details.js","hash":"64e92064494eed8290393d9b44abb86dae489216","modified":1623221429971},{"_id":"source/_posts/手写系列之一：深拷贝.md","hash":"5bcb8dc26610e1c3ae1f5b8f2dfe9f553c5a0e0c","modified":1623338307580},{"_id":"public/tags/flex/index.html","hash":"4d714e8e6804a2d16d0ad788bb38852a4ff702ee","modified":1627612997682},{"_id":"public/tags/deep-clone/index.html","hash":"eda7932ee49fd4ed3a2757ed5257efee9d17c513","modified":1627612997682},{"_id":"public/tags/手写系列/index.html","hash":"f84f2f8d6b4a1b0ebbea3f07b978e4c0e7137607","modified":1627612997682},{"_id":"public/2021/06/09/手写系列之一：深拷贝/index.html","hash":"8aff5d6825c9f1d287b5919af035b6340b19d7ea","modified":1627612997682},{"_id":"public/2018/07/11/flex布局/index.html","hash":"14c8d2867af873ab73df428e306178d5168ede74","modified":1627612997682},{"_id":"source/_posts/手写系列之二：EventHub.md","hash":"c0754b8715062195a44bc3f36a66105823368331","modified":1623483914084},{"_id":"public/tags/EventHub/index.html","hash":"16204a78d3b10da6126518ce9bf1df3125634679","modified":1627612997682},{"_id":"public/2021/06/11/手写系列之二：EventHub/index.html","hash":"b6b4265b5b1516ede2154f64e0a94d0974b1c98c","modified":1627612997682},{"_id":"source/_posts/搭建基于Hexo5博客遇到的问题.md","hash":"4c923f6f83cf943dff2892384def996b1138848e","modified":1623734875405},{"_id":"public/categories/Hexo/index.html","hash":"8d5f0e848239719c6594571ac6ee2a1df05bdcf3","modified":1627612997682},{"_id":"public/2021/06/15/搭建基于Hexo5博客遇到的问题/index.html","hash":"226d6906db6ce0bf0ccbe0373ddb3b474641268e","modified":1627612997682},{"_id":"public/tags/Hexo/index.html","hash":"14212c82b6f174eb977d5e32a6dc64db2ee0cf46","modified":1627612997682},{"_id":"public/tags/hexo-theme-next/index.html","hash":"814c2320242ddd3a79d1b7c4de7f5cd55bb27308","modified":1627612997682},{"_id":"public/tags/hexo-theme-next-图片无法加载/index.html","hash":"567dbaeb0d2475429cb1c114d210c9710a9b446b","modified":1627612997682},{"_id":"public/tags/hexo-init/index.html","hash":"81cce92aca3eab9125748cfb51f223ff886c93e1","modified":1627612997682},{"_id":"source/_posts/实现一个基于React的Button组件.md","hash":"6136a70c651253d01df4248cdb9cdcef7a7ebc63","modified":1627293124998},{"_id":"source/_posts/实现一个基于React的Button组件/type.jpg","hash":"3812fad1c6147f8bba7c41308dbc5fbac9815cf7","modified":1624184324185},{"_id":"source/_posts/实现一个基于React的Button组件/disabled.jpg","hash":"c5bef1003f972f56d3239a2c06fdbe8aefc6700a","modified":1624185975936},{"_id":"source/_posts/实现一个基于React的Button组件/ghost.jpg","hash":"eb616f5ec6ca4861b9a59acc31fcbbf89751253d","modified":1624186216283},{"_id":"source/_posts/实现一个基于React的Button组件/size.jpg","hash":"571cd596fcd75e29ab5598e64a64fbfbfec2faa5","modified":1624187814666},{"_id":"source/_posts/实现一个基于React的Button组件/icon.jpg","hash":"dc843ad6f10ed1f225016d7351aa006fa12c6c14","modified":1624188795312},{"_id":"public/2021/06/20/实现一个基于React的Button组件/index.html","hash":"5182cfe272b06ee362b791652faf8d36aafaeada","modified":1627612997682},{"_id":"public/tags/React/index.html","hash":"e4aaa1e7bd7362f20301fa9da5f394021e932b59","modified":1627612997682},{"_id":"public/categories/JavaScript/page/2/index.html","hash":"65a35050e883cc71e09c8e38fe5bae8ac64b624d","modified":1627612997682},{"_id":"public/categories/JavaScript/TypeScript/index.html","hash":"76bc862f86013be72d83b89ce2d56b18a468eb44","modified":1627291987389},{"_id":"public/tags/Button/index.html","hash":"5613347081e9fd1e3ce9513080a5234c2ad4375e","modified":1627612997682},{"_id":"public/2021/06/20/实现一个基于React的Button组件/ghost.jpg","hash":"eb616f5ec6ca4861b9a59acc31fcbbf89751253d","modified":1624189153061},{"_id":"public/2021/06/20/实现一个基于React的Button组件/disabled.jpg","hash":"c5bef1003f972f56d3239a2c06fdbe8aefc6700a","modified":1624189153061},{"_id":"public/2021/06/20/实现一个基于React的Button组件/type.jpg","hash":"3812fad1c6147f8bba7c41308dbc5fbac9815cf7","modified":1624189153061},{"_id":"public/2021/06/20/实现一个基于React的Button组件/size.jpg","hash":"571cd596fcd75e29ab5598e64a64fbfbfec2faa5","modified":1624189153061},{"_id":"public/2021/06/20/实现一个基于React的Button组件/icon.jpg","hash":"dc843ad6f10ed1f225016d7351aa006fa12c6c14","modified":1624189153061},{"_id":"source/_posts/实现一个基于React的Input组件.md","hash":"e9089368f7a0c31a305eead6955a845818e3b855","modified":1627293118271},{"_id":"source/_posts/实现一个基于React的Input组件/before-after.jpg","hash":"2d3c6ba108322b252b36798faa0a12dcd6671380","modified":1625306202787},{"_id":"source/_posts/实现一个基于React的Input组件/disabled.jpg","hash":"1ece1452b393d18fe38ea6331c8d643ac1d1a136","modified":1625304949833},{"_id":"source/_posts/实现一个基于React的Input组件/error.jpg","hash":"4f6adc246edc3dbf20a74d55ce640b886d992561","modified":1625305667883},{"_id":"source/_posts/实现一个基于React的Input组件/pre-suf.jpg","hash":"3ccbdbf06a5fed8c91ccc70541755d0bed5992c4","modified":1625305445742},{"_id":"public/2021/07/03/实现一个基于React的Input组件/index.html","hash":"2c1e8b8205e13a3ce2f21006a437cda6cde22ddb","modified":1627612997682},{"_id":"public/archives/2021/07/index.html","hash":"37695fd9e6c33ec9a82b6f4e927e8b8be37d186e","modified":1627612997682},{"_id":"public/tags/Input/index.html","hash":"a0497416c3be731cfb1e15a3f69d304ea9e26bbb","modified":1627612997682},{"_id":"public/2021/07/03/实现一个基于React的Input组件/disabled.jpg","hash":"1ece1452b393d18fe38ea6331c8d643ac1d1a136","modified":1625306741140},{"_id":"public/2021/07/03/实现一个基于React的Input组件/pre-suf.jpg","hash":"3ccbdbf06a5fed8c91ccc70541755d0bed5992c4","modified":1625306741140},{"_id":"public/2021/07/03/实现一个基于React的Input组件/before-after.jpg","hash":"2d3c6ba108322b252b36798faa0a12dcd6671380","modified":1625306741140},{"_id":"public/2021/07/03/实现一个基于React的Input组件/error.jpg","hash":"4f6adc246edc3dbf20a74d55ce640b886d992561","modified":1625306741140},{"_id":"source/_posts/实现一个基于React的Modal组件.md","hash":"52336db1ada91de01f5c1912645df3d628cd7c4a","modified":1627293112281},{"_id":"public/tags/Modal/index.html","hash":"ebcb16a845491a216ccaa2d101cb6576bd40b9c2","modified":1627612997682},{"_id":"public/2021/07/12/实现一个基于React的Modal组件/index.html","hash":"b18082503097a9d54457580b0de5d61541ba5501","modified":1627612997682},{"_id":"source/_posts/手写系列之三：Promise.md","hash":"9b613118491f8a91d66c3f2dbe595668318fdbc8","modified":1626338761745},{"_id":"public/tags/Promise/index.html","hash":"fddcd6b131acff8afa4455a7c002cf25622dfade","modified":1627612997682},{"_id":"public/2021/07/15/手写系列之三：Promise/index.html","hash":"cb039734e5cc4c5e32435a1895104fa73def93b2","modified":1627612997682},{"_id":"source/_posts/手写系列之三：Promise（续）.md","hash":"08eeafa823159fe90393f9924627a0d3280a6991","modified":1626406027364},{"_id":"source/_posts/手写系列之四：bind.md","hash":"ea852858663975b157ef5161536a8b7092a9a8a7","modified":1626795527232},{"_id":"public/page/3/index.html","hash":"a6973bdadebdf3e4eb8637d90d01998baf39cda2","modified":1627612997682},{"_id":"public/archives/page/3/index.html","hash":"a4f044e6bc69ccac338545de90329973f52e0c11","modified":1627612997682},{"_id":"public/tags/bind/index.html","hash":"8965d9bb893b594ebaf05118dff95ac03a319ac0","modified":1627612997682},{"_id":"public/2021/07/20/手写系列之四：bind/index.html","hash":"7b22ad95b5d114d7004956a029957db358f4d333","modified":1627612997682},{"_id":"source/_posts/React生命周期.md","hash":"6f52a511a0f69261732fdae3763a84e09bb375a8","modified":1627291928112},{"_id":"source/_posts/React生命周期/new_lifecycle.jpg","hash":"025a52705806ae62901ee114e0050df1b34daa7e","modified":1627284172737},{"_id":"source/_posts/React生命周期/old_lifecycle.jpg","hash":"11e99fcbdd104617388eca0b5d884310ea04ecef","modified":1627284149208},{"_id":"public/categories/React/index.html","hash":"91d8d681f1181535650ff87036ddd198af087fe2","modified":1627612997682},{"_id":"public/2021/07/26/React生命周期/index.html","hash":"78609db59213fdccff68011539709aadcb3fd28e","modified":1627612997682},{"_id":"public/tags/React生命周期/index.html","hash":"ad7d722c97b36cfcd57f70eba5ccac59dbf100b0","modified":1627612997682},{"_id":"public/2021/07/26/React生命周期/new_lifecycle.jpg","hash":"025a52705806ae62901ee114e0050df1b34daa7e","modified":1627291987389},{"_id":"public/2021/07/26/React生命周期/old_lifecycle.jpg","hash":"11e99fcbdd104617388eca0b5d884310ea04ecef","modified":1627291987389},{"_id":"public/categories/React/TypeScript/index.html","hash":"c6506828742d2dccbc00e27d5b5bdecb659fdc07","modified":1627612997682},{"_id":"source/_posts/Hooks.md","hash":"628329637b3d6e7636a235aff56325b7a619635c","modified":1627612772092},{"_id":"public/2021/07/30/Hooks/index.html","hash":"f08dcbd67884354ea103ed7155bebea23c867faf","modified":1627612997682},{"_id":"public/tags/React-Hooks/index.html","hash":"180f3e03772ba2beeb2612e448493bdd1fd05255","modified":1627612997682}],"Category":[{"name":"JavaScript","_id":"ckpp26bty00003cu08bsd3lfn"},{"name":"CSS","_id":"ckpp2djvf00043cu024yneziq"},{"name":"webpack","_id":"ckpp31ye1000e7ku04a7252vh"},{"name":"Webpack","_id":"ckpp32oon000i7ku02hxr2t5y"},{"name":"Hexo","_id":"ckpxlvll10001zsu01o6d1xu6"},{"name":"TypeScript","parent":"ckpp26bty00003cu08bsd3lfn","_id":"ckq51faos00023ku0b7l00jih"},{"name":"React","_id":"ckrk773jb00019gu0e6rdh0oy"},{"name":"TypeScript","parent":"ckrk773jb00019gu0e6rdh0oy","_id":"ckrkgbxvw0000zku0bw5c238f"}],"Data":[],"Page":[{"title":"分类","date":"2021-06-09T05:46:59.000Z","type":"categories","layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2021-06-09 13:46:59\ntype: categories\nlayout: categories\ncomments: false\n---\n","updated":"2021-06-09T06:10:05.748Z","path":"categories/index.html","_id":"ckpp1uytr0000n0u07okzftaf","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2021-06-09T05:49:09.000Z","type":"tags","layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2021-06-09 13:49:09\ntype: tags\nlayout: tags\ncomments: false\n---\n","updated":"2021-06-09T06:10:15.276Z","path":"tags/index.html","_id":"ckpp1xrmi0001n0u0b2ofcac5","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Cookie、Session和LocalStorage","date":"2018-06-30T15:29:11.000Z","_content":"# 一、Cookie\nCookie是服务器发送给客户端（浏览器）一些信息，浏览器在之后的请求都会带上这些信息。\n\nCookie主要用于以下三个方面：\n1、会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）；\n2、个性化设置（如用户自定义设置、主题等）；\n3、浏览器行为跟踪（如跟踪分析用户行为等）。\n\n服务器使用Set-Cookie响应头部向浏览器发送Cookie信息。语法如下：\n<!-- more -->\n    ````\n    Set-Cookie: <cookie名>=<cookie值>\n    ````\n可以使用Set-Cookie设置某些在浏览器发出请求时所要带上的信息：\n    ````\n    setHeader('Set-Cookie', `username=${username}`)\n    ````\n上述代码表示在浏览发出请求时，HTTP请求头就会带上用户的用户名。\n此外，还可以设置Cookie的有效期：\n    ````\n    setHeader('Set-Cookie', 'Max_Age=60')\n    ````\n上述代码表示Cookie在60秒之后将会过期失效。\n\ndocument.cookie能够读写当前页面的Cookie。\n    ````\n    document.cookie//username=xxx\n    document.cookie = 'username=yyy'\n    ````\nHttpOnly属性指定该Cookie无法通过JavaScript代码获取到\n    ````\n    Set-Cookie: <cookie-name>=<cookie-value>; HttpOnly\n    ````\n\n# 二、Session\nSession一般是基于Cookie来实现的。首先服务器通过Cookie把SessionId发送给浏览器，\n这个SessionId是唯一的，也是区分用户的标识。之后浏览器的每次请求都要带上SessionId，这样服务器就能辨别用户。\nSession是在服务器保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中。\n    ````\n    var sessionID = Math.random() * 10000\n    response.setHeader('Set-Cookie', `sessionID=${sessionID}`)\n    ````\n上述代码通过随机数给用户分配一个SessionId。\n\n# 三、LocalStorage\nLocalStorage保存的数据长期存在（除非用户清理缓存），下一次访问该网站的时候，网页可以直接读取以前保存的数据。\nLocalStorage与HTTP协议无关，在浏览器发送请求时，请求头不会带上LocalStorage的数据。\n\nStorage接口提供了setItem()方法用来存入数据，该方法接受两个参数，第一个是键名，第二个是保存的数据。\n    ````\n    window.localStorage.setItem('name', 'BOb');\n    ````\n\nStorage接口还提供了getItem()方法用来存入数据，该方法只接受一个参数，参数就是键名。\n    ````\n    window.localStorage.getItem('name');//'BOb'\n    ````\n上述代码通过键名读取到了之前存入的数据，如果键名不存在则返回null。\n\nremoveItem()方法能够删除键名对应的键值，该方法只接受一个参数，参数就是键名。\n    ````\n    window.localStorage.removeItem('name');\n    window.localStorage.getItem('name');//null\n    ````\n上述代码通过removeItem()方法删除对应的键值后，再使用getItem()方法得到的是null。\n\n在某个网页存入的数据，只有相同域名的页面才能读取到。","source":"_posts/Cookie、Session和LocalStorage.md","raw":"---\ntitle: Cookie、Session和LocalStorage\ndate: 2018-06-30 23:29:11\ntags: [\"Cookie\", \"Session\", \"LocalStorage\"]\ncategories: JavaScript\n---\n# 一、Cookie\nCookie是服务器发送给客户端（浏览器）一些信息，浏览器在之后的请求都会带上这些信息。\n\nCookie主要用于以下三个方面：\n1、会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）；\n2、个性化设置（如用户自定义设置、主题等）；\n3、浏览器行为跟踪（如跟踪分析用户行为等）。\n\n服务器使用Set-Cookie响应头部向浏览器发送Cookie信息。语法如下：\n<!-- more -->\n    ````\n    Set-Cookie: <cookie名>=<cookie值>\n    ````\n可以使用Set-Cookie设置某些在浏览器发出请求时所要带上的信息：\n    ````\n    setHeader('Set-Cookie', `username=${username}`)\n    ````\n上述代码表示在浏览发出请求时，HTTP请求头就会带上用户的用户名。\n此外，还可以设置Cookie的有效期：\n    ````\n    setHeader('Set-Cookie', 'Max_Age=60')\n    ````\n上述代码表示Cookie在60秒之后将会过期失效。\n\ndocument.cookie能够读写当前页面的Cookie。\n    ````\n    document.cookie//username=xxx\n    document.cookie = 'username=yyy'\n    ````\nHttpOnly属性指定该Cookie无法通过JavaScript代码获取到\n    ````\n    Set-Cookie: <cookie-name>=<cookie-value>; HttpOnly\n    ````\n\n# 二、Session\nSession一般是基于Cookie来实现的。首先服务器通过Cookie把SessionId发送给浏览器，\n这个SessionId是唯一的，也是区分用户的标识。之后浏览器的每次请求都要带上SessionId，这样服务器就能辨别用户。\nSession是在服务器保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中。\n    ````\n    var sessionID = Math.random() * 10000\n    response.setHeader('Set-Cookie', `sessionID=${sessionID}`)\n    ````\n上述代码通过随机数给用户分配一个SessionId。\n\n# 三、LocalStorage\nLocalStorage保存的数据长期存在（除非用户清理缓存），下一次访问该网站的时候，网页可以直接读取以前保存的数据。\nLocalStorage与HTTP协议无关，在浏览器发送请求时，请求头不会带上LocalStorage的数据。\n\nStorage接口提供了setItem()方法用来存入数据，该方法接受两个参数，第一个是键名，第二个是保存的数据。\n    ````\n    window.localStorage.setItem('name', 'BOb');\n    ````\n\nStorage接口还提供了getItem()方法用来存入数据，该方法只接受一个参数，参数就是键名。\n    ````\n    window.localStorage.getItem('name');//'BOb'\n    ````\n上述代码通过键名读取到了之前存入的数据，如果键名不存在则返回null。\n\nremoveItem()方法能够删除键名对应的键值，该方法只接受一个参数，参数就是键名。\n    ````\n    window.localStorage.removeItem('name');\n    window.localStorage.getItem('name');//null\n    ````\n上述代码通过removeItem()方法删除对应的键值后，再使用getItem()方法得到的是null。\n\n在某个网页存入的数据，只有相同域名的页面才能读取到。","slug":"Cookie、Session和LocalStorage","published":1,"updated":"2021-06-09T06:29:34.731Z","_id":"ckpozdwlm0000xku076efc2dc","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"一、Cookie\"><a href=\"#一、Cookie\" class=\"headerlink\" title=\"一、Cookie\"></a>一、Cookie</h1><p>Cookie是服务器发送给客户端（浏览器）一些信息，浏览器在之后的请求都会带上这些信息。</p>\n<p>Cookie主要用于以下三个方面：<br>1、会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）；<br>2、个性化设置（如用户自定义设置、主题等）；<br>3、浏览器行为跟踪（如跟踪分析用户行为等）。</p>\n<p>服务器使用Set-Cookie响应头部向浏览器发送Cookie信息。语法如下：</p>\n<span id=\"more\"></span>\n<pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set-Cookie: &lt;cookie名&gt;=&lt;cookie值&gt;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<p>可以使用Set-Cookie设置某些在浏览器发出请求时所要带上的信息：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setHeader(&#x27;Set-Cookie&#x27;, `username=$&#123;username&#125;`)</span><br></pre></td></tr></table></figure><br>上述代码表示在浏览发出请求时，HTTP请求头就会带上用户的用户名。<br>此外，还可以设置Cookie的有效期：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setHeader(&#x27;Set-Cookie&#x27;, &#x27;Max_Age=60&#x27;)</span><br></pre></td></tr></table></figure><br>上述代码表示Cookie在60秒之后将会过期失效。</p>\n<p>document.cookie能够读写当前页面的Cookie。<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.cookie//username=xxx</span><br><span class=\"line\">document.cookie = &#x27;username=yyy&#x27;</span><br></pre></td></tr></table></figure><br>HttpOnly属性指定该Cookie无法通过JavaScript代码获取到<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;; HttpOnly</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"二、Session\"><a href=\"#二、Session\" class=\"headerlink\" title=\"二、Session\"></a>二、Session</h1><p>Session一般是基于Cookie来实现的。首先服务器通过Cookie把SessionId发送给浏览器，<br>这个SessionId是唯一的，也是区分用户的标识。之后浏览器的每次请求都要带上SessionId，这样服务器就能辨别用户。<br>Session是在服务器保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中。<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var sessionID = Math.random() * 10000</span><br><span class=\"line\">response.setHeader(&#x27;Set-Cookie&#x27;, `sessionID=$&#123;sessionID&#125;`)</span><br></pre></td></tr></table></figure><br>上述代码通过随机数给用户分配一个SessionId。</p>\n<h1 id=\"三、LocalStorage\"><a href=\"#三、LocalStorage\" class=\"headerlink\" title=\"三、LocalStorage\"></a>三、LocalStorage</h1><p>LocalStorage保存的数据长期存在（除非用户清理缓存），下一次访问该网站的时候，网页可以直接读取以前保存的数据。<br>LocalStorage与HTTP协议无关，在浏览器发送请求时，请求头不会带上LocalStorage的数据。</p>\n<p>Storage接口提供了setItem()方法用来存入数据，该方法接受两个参数，第一个是键名，第二个是保存的数据。<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.localStorage.setItem(&#x27;name&#x27;, &#x27;BOb&#x27;);</span><br></pre></td></tr></table></figure></p>\n<p>Storage接口还提供了getItem()方法用来存入数据，该方法只接受一个参数，参数就是键名。<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.localStorage.getItem(&#x27;name&#x27;);//&#x27;BOb&#x27;</span><br></pre></td></tr></table></figure><br>上述代码通过键名读取到了之前存入的数据，如果键名不存在则返回null。</p>\n<p>removeItem()方法能够删除键名对应的键值，该方法只接受一个参数，参数就是键名。<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.localStorage.removeItem(&#x27;name&#x27;);</span><br><span class=\"line\">window.localStorage.getItem(&#x27;name&#x27;);//null</span><br></pre></td></tr></table></figure><br>上述代码通过removeItem()方法删除对应的键值后，再使用getItem()方法得到的是null。</p>\n<p>在某个网页存入的数据，只有相同域名的页面才能读取到。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"一、Cookie\"><a href=\"#一、Cookie\" class=\"headerlink\" title=\"一、Cookie\"></a>一、Cookie</h1><p>Cookie是服务器发送给客户端（浏览器）一些信息，浏览器在之后的请求都会带上这些信息。</p>\n<p>Cookie主要用于以下三个方面：<br>1、会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）；<br>2、个性化设置（如用户自定义设置、主题等）；<br>3、浏览器行为跟踪（如跟踪分析用户行为等）。</p>\n<p>服务器使用Set-Cookie响应头部向浏览器发送Cookie信息。语法如下：</p>","more":"<pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set-Cookie: &lt;cookie名&gt;=&lt;cookie值&gt;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<p>可以使用Set-Cookie设置某些在浏览器发出请求时所要带上的信息：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setHeader(&#x27;Set-Cookie&#x27;, `username=$&#123;username&#125;`)</span><br></pre></td></tr></table></figure><br>上述代码表示在浏览发出请求时，HTTP请求头就会带上用户的用户名。<br>此外，还可以设置Cookie的有效期：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setHeader(&#x27;Set-Cookie&#x27;, &#x27;Max_Age=60&#x27;)</span><br></pre></td></tr></table></figure><br>上述代码表示Cookie在60秒之后将会过期失效。</p>\n<p>document.cookie能够读写当前页面的Cookie。<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.cookie//username=xxx</span><br><span class=\"line\">document.cookie = &#x27;username=yyy&#x27;</span><br></pre></td></tr></table></figure><br>HttpOnly属性指定该Cookie无法通过JavaScript代码获取到<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;; HttpOnly</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"二、Session\"><a href=\"#二、Session\" class=\"headerlink\" title=\"二、Session\"></a>二、Session</h1><p>Session一般是基于Cookie来实现的。首先服务器通过Cookie把SessionId发送给浏览器，<br>这个SessionId是唯一的，也是区分用户的标识。之后浏览器的每次请求都要带上SessionId，这样服务器就能辨别用户。<br>Session是在服务器保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中。<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var sessionID = Math.random() * 10000</span><br><span class=\"line\">response.setHeader(&#x27;Set-Cookie&#x27;, `sessionID=$&#123;sessionID&#125;`)</span><br></pre></td></tr></table></figure><br>上述代码通过随机数给用户分配一个SessionId。</p>\n<h1 id=\"三、LocalStorage\"><a href=\"#三、LocalStorage\" class=\"headerlink\" title=\"三、LocalStorage\"></a>三、LocalStorage</h1><p>LocalStorage保存的数据长期存在（除非用户清理缓存），下一次访问该网站的时候，网页可以直接读取以前保存的数据。<br>LocalStorage与HTTP协议无关，在浏览器发送请求时，请求头不会带上LocalStorage的数据。</p>\n<p>Storage接口提供了setItem()方法用来存入数据，该方法接受两个参数，第一个是键名，第二个是保存的数据。<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.localStorage.setItem(&#x27;name&#x27;, &#x27;BOb&#x27;);</span><br></pre></td></tr></table></figure></p>\n<p>Storage接口还提供了getItem()方法用来存入数据，该方法只接受一个参数，参数就是键名。<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.localStorage.getItem(&#x27;name&#x27;);//&#x27;BOb&#x27;</span><br></pre></td></tr></table></figure><br>上述代码通过键名读取到了之前存入的数据，如果键名不存在则返回null。</p>\n<p>removeItem()方法能够删除键名对应的键值，该方法只接受一个参数，参数就是键名。<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.localStorage.removeItem(&#x27;name&#x27;);</span><br><span class=\"line\">window.localStorage.getItem(&#x27;name&#x27;);//null</span><br></pre></td></tr></table></figure><br>上述代码通过removeItem()方法删除对应的键值后，再使用getItem()方法得到的是null。</p>\n<p>在某个网页存入的数据，只有相同域名的页面才能读取到。</p>"},{"title":"JS函数作用域","date":"2018-05-04T04:39:09.000Z","_content":"# 1、什么是作用域\n作用域是变量存在的范围。根据ECMAScript5的规定，JS有两种作用域：全局作用域与函数作用域。全局作用域是指变量存在于整个程序中，任何地方都可以读取；函数作用域变量只存在于函数内部。\n    ````\n    var a = 2\n    function f(){\n    console.log(a)\n    }\n    f()\n    ````\n上述代码变量a定义在函数外部为全局变量，且函数f内部可以读取到全局变量a，输出值为2\n<!-- more -->\n    ````\n    function f(){\n    var a = 2 \n    }\n    console.log(a)\n    ````\n上述的输出结果为\"ReferenceError: a is not defined\"，这说明定义在函数内部的变量a是一个变量，函数外部无法访问。\n# 2、函数内部同名变量覆盖\n    ````\n    var a = 1\n    function f(){\n    var a = 2 \n    console.log(a)\n    }\n\n    f()\n\n    console.log(a)\n    ````\n上述代码的输出结果依次为：2、1。这表明定义在函数内部的变量会在函数作用域内覆盖同名变量。\n# 3、函数本身的作用域\n函数有自己的作用域，函数本身的作用域是声明时所在的作用域，和函数运行时所在的作用域无关。\n    ````\n    var a = 1\n    function f2(){\n    var a = 2\n    f1()\n    }\n\n    function f1(){\n    console.log(a)\n    }\n\n    f2()\n    ````\n上述代码的输出为1，函数f1是在函数f2的外部定义的，因此函数f1的作用域为外部而不是函数f2内部，所以变量a的值取全局变量\"var a = 1\"而不是局部变量\"var a = 2\"。\n同理，在函数内部声明的函数，它的作用域绑定函数内部\n    ````\n    var a = 2\n    function f2(){\n    var a = 1\n      function f1(){\n      console.log(a)\n      }\n    return f1\n    }\n    var f = f2()\n    f()\n    ````\n上述代码输出为1，函数f1在函数f2中声明，因此函数f1的作用域绑定函数f2，所以变量a的取值是函数f2内部的\"var a = 1\"，而不是函数f2外部的\"var a = 2\"。\n所以，函数执行时所在的作用域，是定义时的作用域，而不是调用时所在的作用域\n\n","source":"_posts/JS函数作用域.md","raw":"---\ntitle: JS函数作用域\ndate: 2018-05-04 12:39:09\ntags: function\ncategories: JavaScript\n---\n# 1、什么是作用域\n作用域是变量存在的范围。根据ECMAScript5的规定，JS有两种作用域：全局作用域与函数作用域。全局作用域是指变量存在于整个程序中，任何地方都可以读取；函数作用域变量只存在于函数内部。\n    ````\n    var a = 2\n    function f(){\n    console.log(a)\n    }\n    f()\n    ````\n上述代码变量a定义在函数外部为全局变量，且函数f内部可以读取到全局变量a，输出值为2\n<!-- more -->\n    ````\n    function f(){\n    var a = 2 \n    }\n    console.log(a)\n    ````\n上述的输出结果为\"ReferenceError: a is not defined\"，这说明定义在函数内部的变量a是一个变量，函数外部无法访问。\n# 2、函数内部同名变量覆盖\n    ````\n    var a = 1\n    function f(){\n    var a = 2 \n    console.log(a)\n    }\n\n    f()\n\n    console.log(a)\n    ````\n上述代码的输出结果依次为：2、1。这表明定义在函数内部的变量会在函数作用域内覆盖同名变量。\n# 3、函数本身的作用域\n函数有自己的作用域，函数本身的作用域是声明时所在的作用域，和函数运行时所在的作用域无关。\n    ````\n    var a = 1\n    function f2(){\n    var a = 2\n    f1()\n    }\n\n    function f1(){\n    console.log(a)\n    }\n\n    f2()\n    ````\n上述代码的输出为1，函数f1是在函数f2的外部定义的，因此函数f1的作用域为外部而不是函数f2内部，所以变量a的值取全局变量\"var a = 1\"而不是局部变量\"var a = 2\"。\n同理，在函数内部声明的函数，它的作用域绑定函数内部\n    ````\n    var a = 2\n    function f2(){\n    var a = 1\n      function f1(){\n      console.log(a)\n      }\n    return f1\n    }\n    var f = f2()\n    f()\n    ````\n上述代码输出为1，函数f1在函数f2中声明，因此函数f1的作用域绑定函数f2，所以变量a的取值是函数f2内部的\"var a = 1\"，而不是函数f2外部的\"var a = 2\"。\n所以，函数执行时所在的作用域，是定义时的作用域，而不是调用时所在的作用域\n\n","slug":"JS函数作用域","published":1,"updated":"2021-06-09T06:29:18.724Z","_id":"ckpozdwlq0001xku07toc8omo","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"1、什么是作用域\"><a href=\"#1、什么是作用域\" class=\"headerlink\" title=\"1、什么是作用域\"></a>1、什么是作用域</h1><p>作用域是变量存在的范围。根据ECMAScript5的规定，JS有两种作用域：全局作用域与函数作用域。全局作用域是指变量存在于整个程序中，任何地方都可以读取；函数作用域变量只存在于函数内部。<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 2</span><br><span class=\"line\">function f()&#123;</span><br><span class=\"line\">console.log(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f()</span><br></pre></td></tr></table></figure><br>上述代码变量a定义在函数外部为全局变量，且函数f内部可以读取到全局变量a，输出值为2</p>\n<span id=\"more\"></span>\n<pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f()&#123;</span><br><span class=\"line\">var a = 2 </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(a)</span><br></pre></td></tr></table></figure>\n</code></pre>\n<p>上述的输出结果为”ReferenceError: a is not defined”，这说明定义在函数内部的变量a是一个变量，函数外部无法访问。</p>\n<h1 id=\"2、函数内部同名变量覆盖\"><a href=\"#2、函数内部同名变量覆盖\" class=\"headerlink\" title=\"2、函数内部同名变量覆盖\"></a>2、函数内部同名变量覆盖</h1><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 1</span><br><span class=\"line\">function f()&#123;</span><br><span class=\"line\">var a = 2 </span><br><span class=\"line\">console.log(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f()</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(a)</span><br></pre></td></tr></table></figure>\n</code></pre>\n<p>上述代码的输出结果依次为：2、1。这表明定义在函数内部的变量会在函数作用域内覆盖同名变量。</p>\n<h1 id=\"3、函数本身的作用域\"><a href=\"#3、函数本身的作用域\" class=\"headerlink\" title=\"3、函数本身的作用域\"></a>3、函数本身的作用域</h1><p>函数有自己的作用域，函数本身的作用域是声明时所在的作用域，和函数运行时所在的作用域无关。<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 1</span><br><span class=\"line\">function f2()&#123;</span><br><span class=\"line\">var a = 2</span><br><span class=\"line\">f1()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function f1()&#123;</span><br><span class=\"line\">console.log(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f2()</span><br></pre></td></tr></table></figure><br>上述代码的输出为1，函数f1是在函数f2的外部定义的，因此函数f1的作用域为外部而不是函数f2内部，所以变量a的值取全局变量”var a = 1”而不是局部变量”var a = 2”。<br>同理，在函数内部声明的函数，它的作用域绑定函数内部<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 2</span><br><span class=\"line\">function f2()&#123;</span><br><span class=\"line\">var a = 1</span><br><span class=\"line\">  function f1()&#123;</span><br><span class=\"line\">  console.log(a)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">return f1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var f = f2()</span><br><span class=\"line\">f()</span><br></pre></td></tr></table></figure><br>上述代码输出为1，函数f1在函数f2中声明，因此函数f1的作用域绑定函数f2，所以变量a的取值是函数f2内部的”var a = 1”，而不是函数f2外部的”var a = 2”。<br>所以，函数执行时所在的作用域，是定义时的作用域，而不是调用时所在的作用域</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"1、什么是作用域\"><a href=\"#1、什么是作用域\" class=\"headerlink\" title=\"1、什么是作用域\"></a>1、什么是作用域</h1><p>作用域是变量存在的范围。根据ECMAScript5的规定，JS有两种作用域：全局作用域与函数作用域。全局作用域是指变量存在于整个程序中，任何地方都可以读取；函数作用域变量只存在于函数内部。<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 2</span><br><span class=\"line\">function f()&#123;</span><br><span class=\"line\">console.log(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f()</span><br></pre></td></tr></table></figure><br>上述代码变量a定义在函数外部为全局变量，且函数f内部可以读取到全局变量a，输出值为2</p>","more":"<pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f()&#123;</span><br><span class=\"line\">var a = 2 </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(a)</span><br></pre></td></tr></table></figure>\n</code></pre>\n<p>上述的输出结果为”ReferenceError: a is not defined”，这说明定义在函数内部的变量a是一个变量，函数外部无法访问。</p>\n<h1 id=\"2、函数内部同名变量覆盖\"><a href=\"#2、函数内部同名变量覆盖\" class=\"headerlink\" title=\"2、函数内部同名变量覆盖\"></a>2、函数内部同名变量覆盖</h1><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 1</span><br><span class=\"line\">function f()&#123;</span><br><span class=\"line\">var a = 2 </span><br><span class=\"line\">console.log(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f()</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(a)</span><br></pre></td></tr></table></figure>\n</code></pre>\n<p>上述代码的输出结果依次为：2、1。这表明定义在函数内部的变量会在函数作用域内覆盖同名变量。</p>\n<h1 id=\"3、函数本身的作用域\"><a href=\"#3、函数本身的作用域\" class=\"headerlink\" title=\"3、函数本身的作用域\"></a>3、函数本身的作用域</h1><p>函数有自己的作用域，函数本身的作用域是声明时所在的作用域，和函数运行时所在的作用域无关。<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 1</span><br><span class=\"line\">function f2()&#123;</span><br><span class=\"line\">var a = 2</span><br><span class=\"line\">f1()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function f1()&#123;</span><br><span class=\"line\">console.log(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f2()</span><br></pre></td></tr></table></figure><br>上述代码的输出为1，函数f1是在函数f2的外部定义的，因此函数f1的作用域为外部而不是函数f2内部，所以变量a的值取全局变量”var a = 1”而不是局部变量”var a = 2”。<br>同理，在函数内部声明的函数，它的作用域绑定函数内部<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 2</span><br><span class=\"line\">function f2()&#123;</span><br><span class=\"line\">var a = 1</span><br><span class=\"line\">  function f1()&#123;</span><br><span class=\"line\">  console.log(a)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">return f1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var f = f2()</span><br><span class=\"line\">f()</span><br></pre></td></tr></table></figure><br>上述代码输出为1，函数f1在函数f2中声明，因此函数f1的作用域绑定函数f2，所以变量a的取值是函数f2内部的”var a = 1”，而不是函数f2外部的”var a = 2”。<br>所以，函数执行时所在的作用域，是定义时的作用域，而不是调用时所在的作用域</p>"},{"title":"MVC模式","date":"2018-06-21T07:36:33.000Z","_content":"\n\n# 一、什么是MVC\nModel操作数据、View表示视图、Controller是控制器。\nModel和服务器交互，Model将得到的数据交给Controller，Controller把数据填入View并监听View。\n用户操作View，如点击按钮，Controller就会接受到点击事件，Controller这时会去调用Model，Model会与服务器交互，得到数据后返回给Controller，Controller得到数据就去更新View。\n\n# 二、使用MVC制作一个留言板\n<!-- more -->\nhtml部分代码：\n    ````\n    <div id=\"formAndMessageList\">\n        <form id=\"myForm\" class=\"basic-grey\">\n            <h1>留言板</h1>\n            <label>\n            <span>姓 名 :</span>\n            <input id=\"name\" type=\"text\" name=\"name\"/>\n            </label>\n\n            <label>\n            <span>邮 箱 :</span>\n            <input id=\"email\" type=\"text\" name=\"email\"/>\n            </label>\n\n            <label>\n            <span>留 言 :</span>\n            <textarea id=\"message\" name=\"message\"></textarea>\n            </label>\n\n            <label>\n            <span>&nbsp;</span>\n            <input type=\"submit\" class=\"button\" value=\"提交\"/>\n            </label>\n        </form>\n        <ol id=\"messageList\">\n        </ol>\n    </div>\n    ````\n界面效果展示：\n{% asset_img 1.jpg 留言板 %}\n\n在填写完相关信息后。点击提交按钮，留言即刻更新在留言展示区域。\n\nJavaScript部分代码：\n首先是View，包括信息填写区域和下方的留言展示区域：\n    ````\n    var view = document.querySelector('#formAndMessageList')\n    ````\n\n其次是Model，这里是Model与LeanCloud进行交互：\n    ````\n    var model = {\n        init: function() {\n            var APP_ID = 'wbGEKwjkKqYviJXXXXXXXXXXXXXX';\n            var APP_KEY = 'QNwxXOzQmf0UIXXXXXXXXXXXXXX';\n            AV.init({\n                appId: APP_ID,\n                appKey: APP_KEY\n            })\n        },\n        read: function() {\n            var query = new AV.Query('Test')\n            return query.find()\n        },\n        save: function(nameContent, emailContent, messageContent) {\n            var Test = AV.Object.extend('Test');\n            var test = new Test();\n            return test.save({\n                name: nameContent,\n                email: emailContent,\n                message: messageContent\n            })\n        }\n    }\n    ````\n在LeanCloud上新建了一个应用，同时初始化了应用的ID和应用的KEY，并且提供了与LeanCloud应用读写的方法。\n最后是Controller部分代码：\n    ````\n    var controller = {\n        view: null,\n        model: null,\n        messageList: null,\n        myForm: null,\n        init: function(view, model) {\n            this.view = view\n            this.model = model\n\n            this.messageList = view.querySelector('#messageList')\n            this.myForm = view.querySelector('#myForm')\n            this.model.init()\n            this.loadMessage()\n            this.bindEvents()\n        },\n        loadMessage: function() {\n            this.model.read().then((informations) => {\n                var array = informations.map((item) => item.attributes)\n                array.forEach((item) => {\n                    var li = document.createElement('li')\n                    li.innerText = `${item.name}(${item.email}):${item.message} `\n                    messageList.appendChild(li)\n                })\n            })\n        },\n        bindEvents: function() {\n            this.myForm.addEventListener('submit', (e) => {\n                e.preventDefault();\n                this.saveMessage()\n            })\n        },\n        saveMessage: function() {\n            var myForm = this.myForm\n            var nameContent = myForm.querySelector('input[name=name]').value\n            var emailContent = myForm.querySelector('input[name=email]').value\n            var messageContent = myForm.querySelector('textarea').value\n\n            this.model.save(nameContent, emailContent, messageContent)\n                .then(function(object) {\n                    var li = document.createElement('li')\n                    li.innerText = `${object.attributes.name}:${object.attributes.message} ${object.attributes.email}`\n                    messageList.appendChild(li)\n                    myForm.querySelector('textarea').value = ''\n                })\n        }\n\n\n    }\n    ````\n\nController部分的代码提供了一系列的逻辑处理，包括监听View中的点击事件、操作DOM（更新View）、\n调用Model使用与服务器交互。\n","source":"_posts/MVC模式.md","raw":"---\ntitle: MVC模式\ndate: 2018-06-21 15:36:33\ntags: MVC\ncategories: JavaScript\n---\n\n\n# 一、什么是MVC\nModel操作数据、View表示视图、Controller是控制器。\nModel和服务器交互，Model将得到的数据交给Controller，Controller把数据填入View并监听View。\n用户操作View，如点击按钮，Controller就会接受到点击事件，Controller这时会去调用Model，Model会与服务器交互，得到数据后返回给Controller，Controller得到数据就去更新View。\n\n# 二、使用MVC制作一个留言板\n<!-- more -->\nhtml部分代码：\n    ````\n    <div id=\"formAndMessageList\">\n        <form id=\"myForm\" class=\"basic-grey\">\n            <h1>留言板</h1>\n            <label>\n            <span>姓 名 :</span>\n            <input id=\"name\" type=\"text\" name=\"name\"/>\n            </label>\n\n            <label>\n            <span>邮 箱 :</span>\n            <input id=\"email\" type=\"text\" name=\"email\"/>\n            </label>\n\n            <label>\n            <span>留 言 :</span>\n            <textarea id=\"message\" name=\"message\"></textarea>\n            </label>\n\n            <label>\n            <span>&nbsp;</span>\n            <input type=\"submit\" class=\"button\" value=\"提交\"/>\n            </label>\n        </form>\n        <ol id=\"messageList\">\n        </ol>\n    </div>\n    ````\n界面效果展示：\n{% asset_img 1.jpg 留言板 %}\n\n在填写完相关信息后。点击提交按钮，留言即刻更新在留言展示区域。\n\nJavaScript部分代码：\n首先是View，包括信息填写区域和下方的留言展示区域：\n    ````\n    var view = document.querySelector('#formAndMessageList')\n    ````\n\n其次是Model，这里是Model与LeanCloud进行交互：\n    ````\n    var model = {\n        init: function() {\n            var APP_ID = 'wbGEKwjkKqYviJXXXXXXXXXXXXXX';\n            var APP_KEY = 'QNwxXOzQmf0UIXXXXXXXXXXXXXX';\n            AV.init({\n                appId: APP_ID,\n                appKey: APP_KEY\n            })\n        },\n        read: function() {\n            var query = new AV.Query('Test')\n            return query.find()\n        },\n        save: function(nameContent, emailContent, messageContent) {\n            var Test = AV.Object.extend('Test');\n            var test = new Test();\n            return test.save({\n                name: nameContent,\n                email: emailContent,\n                message: messageContent\n            })\n        }\n    }\n    ````\n在LeanCloud上新建了一个应用，同时初始化了应用的ID和应用的KEY，并且提供了与LeanCloud应用读写的方法。\n最后是Controller部分代码：\n    ````\n    var controller = {\n        view: null,\n        model: null,\n        messageList: null,\n        myForm: null,\n        init: function(view, model) {\n            this.view = view\n            this.model = model\n\n            this.messageList = view.querySelector('#messageList')\n            this.myForm = view.querySelector('#myForm')\n            this.model.init()\n            this.loadMessage()\n            this.bindEvents()\n        },\n        loadMessage: function() {\n            this.model.read().then((informations) => {\n                var array = informations.map((item) => item.attributes)\n                array.forEach((item) => {\n                    var li = document.createElement('li')\n                    li.innerText = `${item.name}(${item.email}):${item.message} `\n                    messageList.appendChild(li)\n                })\n            })\n        },\n        bindEvents: function() {\n            this.myForm.addEventListener('submit', (e) => {\n                e.preventDefault();\n                this.saveMessage()\n            })\n        },\n        saveMessage: function() {\n            var myForm = this.myForm\n            var nameContent = myForm.querySelector('input[name=name]').value\n            var emailContent = myForm.querySelector('input[name=email]').value\n            var messageContent = myForm.querySelector('textarea').value\n\n            this.model.save(nameContent, emailContent, messageContent)\n                .then(function(object) {\n                    var li = document.createElement('li')\n                    li.innerText = `${object.attributes.name}:${object.attributes.message} ${object.attributes.email}`\n                    messageList.appendChild(li)\n                    myForm.querySelector('textarea').value = ''\n                })\n        }\n\n\n    }\n    ````\n\nController部分的代码提供了一系列的逻辑处理，包括监听View中的点击事件、操作DOM（更新View）、\n调用Model使用与服务器交互。\n","slug":"MVC模式","published":1,"updated":"2021-06-09T07:34:44.106Z","_id":"ckpozdwlr0002xku01igmgukh","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"一、什么是MVC\"><a href=\"#一、什么是MVC\" class=\"headerlink\" title=\"一、什么是MVC\"></a>一、什么是MVC</h1><p>Model操作数据、View表示视图、Controller是控制器。<br>Model和服务器交互，Model将得到的数据交给Controller，Controller把数据填入View并监听View。<br>用户操作View，如点击按钮，Controller就会接受到点击事件，Controller这时会去调用Model，Model会与服务器交互，得到数据后返回给Controller，Controller得到数据就去更新View。</p>\n<h1 id=\"二、使用MVC制作一个留言板\"><a href=\"#二、使用MVC制作一个留言板\" class=\"headerlink\" title=\"二、使用MVC制作一个留言板\"></a>二、使用MVC制作一个留言板</h1><span id=\"more\"></span>\n<p>html部分代码：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;formAndMessageList&quot;&gt;</span><br><span class=\"line\">    &lt;form id=&quot;myForm&quot; class=&quot;basic-grey&quot;&gt;</span><br><span class=\"line\">        &lt;h1&gt;留言板&lt;/h1&gt;</span><br><span class=\"line\">        &lt;label&gt;</span><br><span class=\"line\">        &lt;span&gt;姓 名 :&lt;/span&gt;</span><br><span class=\"line\">        &lt;input id=&quot;name&quot; type=&quot;text&quot; name=&quot;name&quot;/&gt;</span><br><span class=\"line\">        &lt;/label&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;label&gt;</span><br><span class=\"line\">        &lt;span&gt;邮 箱 :&lt;/span&gt;</span><br><span class=\"line\">        &lt;input id=&quot;email&quot; type=&quot;text&quot; name=&quot;email&quot;/&gt;</span><br><span class=\"line\">        &lt;/label&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;label&gt;</span><br><span class=\"line\">        &lt;span&gt;留 言 :&lt;/span&gt;</span><br><span class=\"line\">        &lt;textarea id=&quot;message&quot; name=&quot;message&quot;&gt;&lt;/textarea&gt;</span><br><span class=\"line\">        &lt;/label&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;label&gt;</span><br><span class=\"line\">        &lt;span&gt;&amp;nbsp;&lt;/span&gt;</span><br><span class=\"line\">        &lt;input type=&quot;submit&quot; class=&quot;button&quot; value=&quot;提交&quot;/&gt;</span><br><span class=\"line\">        &lt;/label&gt;</span><br><span class=\"line\">    &lt;/form&gt;</span><br><span class=\"line\">    &lt;ol id=&quot;messageList&quot;&gt;</span><br><span class=\"line\">    &lt;/ol&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure><br>界面效果展示：</p>\n<img src=\"/2018/06/21/MVC%E6%A8%A1%E5%BC%8F/1.jpg\" class title=\"留言板\">\n\n<p>在填写完相关信息后。点击提交按钮，留言即刻更新在留言展示区域。</p>\n<p>JavaScript部分代码：<br>首先是View，包括信息填写区域和下方的留言展示区域：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var view = document.querySelector(&#x27;#formAndMessageList&#x27;)</span><br></pre></td></tr></table></figure></p>\n<p>其次是Model，这里是Model与LeanCloud进行交互：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var model = &#123;</span><br><span class=\"line\">    init: function() &#123;</span><br><span class=\"line\">        var APP_ID = &#x27;wbGEKwjkKqYviJXXXXXXXXXXXXXX&#x27;;</span><br><span class=\"line\">        var APP_KEY = &#x27;QNwxXOzQmf0UIXXXXXXXXXXXXXX&#x27;;</span><br><span class=\"line\">        AV.init(&#123;</span><br><span class=\"line\">            appId: APP_ID,</span><br><span class=\"line\">            appKey: APP_KEY</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    read: function() &#123;</span><br><span class=\"line\">        var query = new AV.Query(&#x27;Test&#x27;)</span><br><span class=\"line\">        return query.find()</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    save: function(nameContent, emailContent, messageContent) &#123;</span><br><span class=\"line\">        var Test = AV.Object.extend(&#x27;Test&#x27;);</span><br><span class=\"line\">        var test = new Test();</span><br><span class=\"line\">        return test.save(&#123;</span><br><span class=\"line\">            name: nameContent,</span><br><span class=\"line\">            email: emailContent,</span><br><span class=\"line\">            message: messageContent</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>在LeanCloud上新建了一个应用，同时初始化了应用的ID和应用的KEY，并且提供了与LeanCloud应用读写的方法。<br>最后是Controller部分代码：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var controller = &#123;</span><br><span class=\"line\">    view: null,</span><br><span class=\"line\">    model: null,</span><br><span class=\"line\">    messageList: null,</span><br><span class=\"line\">    myForm: null,</span><br><span class=\"line\">    init: function(view, model) &#123;</span><br><span class=\"line\">        this.view = view</span><br><span class=\"line\">        this.model = model</span><br><span class=\"line\"></span><br><span class=\"line\">        this.messageList = view.querySelector(&#x27;#messageList&#x27;)</span><br><span class=\"line\">        this.myForm = view.querySelector(&#x27;#myForm&#x27;)</span><br><span class=\"line\">        this.model.init()</span><br><span class=\"line\">        this.loadMessage()</span><br><span class=\"line\">        this.bindEvents()</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    loadMessage: function() &#123;</span><br><span class=\"line\">        this.model.read().then((informations) =&gt; &#123;</span><br><span class=\"line\">            var array = informations.map((item) =&gt; item.attributes)</span><br><span class=\"line\">            array.forEach((item) =&gt; &#123;</span><br><span class=\"line\">                var li = document.createElement(&#x27;li&#x27;)</span><br><span class=\"line\">                li.innerText = `$&#123;item.name&#125;($&#123;item.email&#125;):$&#123;item.message&#125; `</span><br><span class=\"line\">                messageList.appendChild(li)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    bindEvents: function() &#123;</span><br><span class=\"line\">        this.myForm.addEventListener(&#x27;submit&#x27;, (e) =&gt; &#123;</span><br><span class=\"line\">            e.preventDefault();</span><br><span class=\"line\">            this.saveMessage()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    saveMessage: function() &#123;</span><br><span class=\"line\">        var myForm = this.myForm</span><br><span class=\"line\">        var nameContent = myForm.querySelector(&#x27;input[name=name]&#x27;).value</span><br><span class=\"line\">        var emailContent = myForm.querySelector(&#x27;input[name=email]&#x27;).value</span><br><span class=\"line\">        var messageContent = myForm.querySelector(&#x27;textarea&#x27;).value</span><br><span class=\"line\"></span><br><span class=\"line\">        this.model.save(nameContent, emailContent, messageContent)</span><br><span class=\"line\">            .then(function(object) &#123;</span><br><span class=\"line\">                var li = document.createElement(&#x27;li&#x27;)</span><br><span class=\"line\">                li.innerText = `$&#123;object.attributes.name&#125;:$&#123;object.attributes.message&#125; $&#123;object.attributes.email&#125;`</span><br><span class=\"line\">                messageList.appendChild(li)</span><br><span class=\"line\">                myForm.querySelector(&#x27;textarea&#x27;).value = &#x27;&#x27;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Controller部分的代码提供了一系列的逻辑处理，包括监听View中的点击事件、操作DOM（更新View）、<br>调用Model使用与服务器交互。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"一、什么是MVC\"><a href=\"#一、什么是MVC\" class=\"headerlink\" title=\"一、什么是MVC\"></a>一、什么是MVC</h1><p>Model操作数据、View表示视图、Controller是控制器。<br>Model和服务器交互，Model将得到的数据交给Controller，Controller把数据填入View并监听View。<br>用户操作View，如点击按钮，Controller就会接受到点击事件，Controller这时会去调用Model，Model会与服务器交互，得到数据后返回给Controller，Controller得到数据就去更新View。</p>\n<h1 id=\"二、使用MVC制作一个留言板\"><a href=\"#二、使用MVC制作一个留言板\" class=\"headerlink\" title=\"二、使用MVC制作一个留言板\"></a>二、使用MVC制作一个留言板</h1>","more":"<p>html部分代码：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;formAndMessageList&quot;&gt;</span><br><span class=\"line\">    &lt;form id=&quot;myForm&quot; class=&quot;basic-grey&quot;&gt;</span><br><span class=\"line\">        &lt;h1&gt;留言板&lt;/h1&gt;</span><br><span class=\"line\">        &lt;label&gt;</span><br><span class=\"line\">        &lt;span&gt;姓 名 :&lt;/span&gt;</span><br><span class=\"line\">        &lt;input id=&quot;name&quot; type=&quot;text&quot; name=&quot;name&quot;/&gt;</span><br><span class=\"line\">        &lt;/label&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;label&gt;</span><br><span class=\"line\">        &lt;span&gt;邮 箱 :&lt;/span&gt;</span><br><span class=\"line\">        &lt;input id=&quot;email&quot; type=&quot;text&quot; name=&quot;email&quot;/&gt;</span><br><span class=\"line\">        &lt;/label&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;label&gt;</span><br><span class=\"line\">        &lt;span&gt;留 言 :&lt;/span&gt;</span><br><span class=\"line\">        &lt;textarea id=&quot;message&quot; name=&quot;message&quot;&gt;&lt;/textarea&gt;</span><br><span class=\"line\">        &lt;/label&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;label&gt;</span><br><span class=\"line\">        &lt;span&gt;&amp;nbsp;&lt;/span&gt;</span><br><span class=\"line\">        &lt;input type=&quot;submit&quot; class=&quot;button&quot; value=&quot;提交&quot;/&gt;</span><br><span class=\"line\">        &lt;/label&gt;</span><br><span class=\"line\">    &lt;/form&gt;</span><br><span class=\"line\">    &lt;ol id=&quot;messageList&quot;&gt;</span><br><span class=\"line\">    &lt;/ol&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure><br>界面效果展示：</p>\n<img src=\"/2018/06/21/MVC%E6%A8%A1%E5%BC%8F/1.jpg\" class title=\"留言板\">\n\n<p>在填写完相关信息后。点击提交按钮，留言即刻更新在留言展示区域。</p>\n<p>JavaScript部分代码：<br>首先是View，包括信息填写区域和下方的留言展示区域：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var view = document.querySelector(&#x27;#formAndMessageList&#x27;)</span><br></pre></td></tr></table></figure></p>\n<p>其次是Model，这里是Model与LeanCloud进行交互：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var model = &#123;</span><br><span class=\"line\">    init: function() &#123;</span><br><span class=\"line\">        var APP_ID = &#x27;wbGEKwjkKqYviJXXXXXXXXXXXXXX&#x27;;</span><br><span class=\"line\">        var APP_KEY = &#x27;QNwxXOzQmf0UIXXXXXXXXXXXXXX&#x27;;</span><br><span class=\"line\">        AV.init(&#123;</span><br><span class=\"line\">            appId: APP_ID,</span><br><span class=\"line\">            appKey: APP_KEY</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    read: function() &#123;</span><br><span class=\"line\">        var query = new AV.Query(&#x27;Test&#x27;)</span><br><span class=\"line\">        return query.find()</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    save: function(nameContent, emailContent, messageContent) &#123;</span><br><span class=\"line\">        var Test = AV.Object.extend(&#x27;Test&#x27;);</span><br><span class=\"line\">        var test = new Test();</span><br><span class=\"line\">        return test.save(&#123;</span><br><span class=\"line\">            name: nameContent,</span><br><span class=\"line\">            email: emailContent,</span><br><span class=\"line\">            message: messageContent</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>在LeanCloud上新建了一个应用，同时初始化了应用的ID和应用的KEY，并且提供了与LeanCloud应用读写的方法。<br>最后是Controller部分代码：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var controller = &#123;</span><br><span class=\"line\">    view: null,</span><br><span class=\"line\">    model: null,</span><br><span class=\"line\">    messageList: null,</span><br><span class=\"line\">    myForm: null,</span><br><span class=\"line\">    init: function(view, model) &#123;</span><br><span class=\"line\">        this.view = view</span><br><span class=\"line\">        this.model = model</span><br><span class=\"line\"></span><br><span class=\"line\">        this.messageList = view.querySelector(&#x27;#messageList&#x27;)</span><br><span class=\"line\">        this.myForm = view.querySelector(&#x27;#myForm&#x27;)</span><br><span class=\"line\">        this.model.init()</span><br><span class=\"line\">        this.loadMessage()</span><br><span class=\"line\">        this.bindEvents()</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    loadMessage: function() &#123;</span><br><span class=\"line\">        this.model.read().then((informations) =&gt; &#123;</span><br><span class=\"line\">            var array = informations.map((item) =&gt; item.attributes)</span><br><span class=\"line\">            array.forEach((item) =&gt; &#123;</span><br><span class=\"line\">                var li = document.createElement(&#x27;li&#x27;)</span><br><span class=\"line\">                li.innerText = `$&#123;item.name&#125;($&#123;item.email&#125;):$&#123;item.message&#125; `</span><br><span class=\"line\">                messageList.appendChild(li)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    bindEvents: function() &#123;</span><br><span class=\"line\">        this.myForm.addEventListener(&#x27;submit&#x27;, (e) =&gt; &#123;</span><br><span class=\"line\">            e.preventDefault();</span><br><span class=\"line\">            this.saveMessage()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    saveMessage: function() &#123;</span><br><span class=\"line\">        var myForm = this.myForm</span><br><span class=\"line\">        var nameContent = myForm.querySelector(&#x27;input[name=name]&#x27;).value</span><br><span class=\"line\">        var emailContent = myForm.querySelector(&#x27;input[name=email]&#x27;).value</span><br><span class=\"line\">        var messageContent = myForm.querySelector(&#x27;textarea&#x27;).value</span><br><span class=\"line\"></span><br><span class=\"line\">        this.model.save(nameContent, emailContent, messageContent)</span><br><span class=\"line\">            .then(function(object) &#123;</span><br><span class=\"line\">                var li = document.createElement(&#x27;li&#x27;)</span><br><span class=\"line\">                li.innerText = `$&#123;object.attributes.name&#125;:$&#123;object.attributes.message&#125; $&#123;object.attributes.email&#125;`</span><br><span class=\"line\">                messageList.appendChild(li)</span><br><span class=\"line\">                myForm.querySelector(&#x27;textarea&#x27;).value = &#x27;&#x27;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Controller部分的代码提供了一系列的逻辑处理，包括监听View中的点击事件、操作DOM（更新View）、<br>调用Model使用与服务器交互。</p>"},{"title":"REM","date":"2018-07-11T16:47:46.000Z","_content":"\n# 一、REM是什么\nREM是（font size of the root element），意思是网页的根元素的字体大小。\n\n# 二、使用REM适配屏幕\n## (1)可以把REM作为基准，设定元素的宽高。\n### 1、设定根元素的font-size的大小：\n<!-- more -->\n    ````\n    html{\n        font-size:40px;\n    }\n    ````\n### 2、在页面上加入几个元素：\n    ````\n    <div class=\"wrapper\">\n        <div class=\"one\">1</div>\n        <div class=\"two\">2</div>\n        <div class=\"three\">3</div>\n        <div class=\"four\">4</div>\n    </div>\n    ````\n### 3、布局：\n    ````\n    .wrapper{\n        display:flex;\n        flex-wrap:wrap;\n    }\n    ````\n### 4、元素大小：\n    ````\n    .wrapper>div{\n        width:4rem;\n        height:4rem;\n        margin:0.5rem;\n    }\n    ````\n\n{% asset_img rem-1.jpg %}\n\n## （2）由于移动端屏幕大小不一，所以可以使用动态REM来适配屏幕。\n### 1、通过JS获取屏幕的大小，从而决定REM的基准值：\n    ````\n    document.getElementsByTagName('html')[0].style.fontSize = window.innerWidth / 10 + 'px';\n    ````\n### 2、布局与元素大小：\nhtml部分代码：\n    ````\n    <div class=\"wrapper\">\n        <div class=\"one\">1</div>\n        <div class=\"two\">2</div>\n        <div class=\"three\">3</div>\n        <div class=\"four\">4</div>\n    </div>\n    ````\nCSS部分代码：\n    ````\n    .wrapper{\n        display:flex;\n        flex-wrap:wrap;\n    }\n    ````\n    ````\n    .wrapper>div{\n        width:4rem;\n        height:4rem;\n        margin:0.5rem;\n    }\n    ````\n\n{% asset_img rem-2.jpg %}\n上图为手机端的展示图。\n\n# 三、对于使用sass的工程\n## 1、首先安装node-sass\n## 2、监听scss文件的改动：\n    ````\n    node-sass style.scss style.css -w\n    ````\n这样每当修改style.scss文件且保存后，都会同步到style.css中。\n## 3、每次在规定元素的宽度和高度时，都需要计算像素转换成对应REM，如此有点不方便，所以可以在scss文件中加入一个转换的函数：\n    ````\n    $rem: 320px;\n    @function px2rem($px) {\n        @return $px / $rem*10+rem;\n    }\n    ````\n这样在书写css代码时就不需要计算宽高对应多少REM，直接写像素就可以：\n    ````\n    .wrapper>div{\n        width: px2rem(128px);\n        height: px2rem(128px);\n        margin: px2rem(16px);\n    }\n    ````\n上述代码和之前的效果是一致的。\n{% asset_img rem-3.jpg %}","source":"_posts/REM.md","raw":"---\ntitle: REM\ndate: 2018-07-12 00:47:46\ntags: rem\ncategories: CSS\n---\n\n# 一、REM是什么\nREM是（font size of the root element），意思是网页的根元素的字体大小。\n\n# 二、使用REM适配屏幕\n## (1)可以把REM作为基准，设定元素的宽高。\n### 1、设定根元素的font-size的大小：\n<!-- more -->\n    ````\n    html{\n        font-size:40px;\n    }\n    ````\n### 2、在页面上加入几个元素：\n    ````\n    <div class=\"wrapper\">\n        <div class=\"one\">1</div>\n        <div class=\"two\">2</div>\n        <div class=\"three\">3</div>\n        <div class=\"four\">4</div>\n    </div>\n    ````\n### 3、布局：\n    ````\n    .wrapper{\n        display:flex;\n        flex-wrap:wrap;\n    }\n    ````\n### 4、元素大小：\n    ````\n    .wrapper>div{\n        width:4rem;\n        height:4rem;\n        margin:0.5rem;\n    }\n    ````\n\n{% asset_img rem-1.jpg %}\n\n## （2）由于移动端屏幕大小不一，所以可以使用动态REM来适配屏幕。\n### 1、通过JS获取屏幕的大小，从而决定REM的基准值：\n    ````\n    document.getElementsByTagName('html')[0].style.fontSize = window.innerWidth / 10 + 'px';\n    ````\n### 2、布局与元素大小：\nhtml部分代码：\n    ````\n    <div class=\"wrapper\">\n        <div class=\"one\">1</div>\n        <div class=\"two\">2</div>\n        <div class=\"three\">3</div>\n        <div class=\"four\">4</div>\n    </div>\n    ````\nCSS部分代码：\n    ````\n    .wrapper{\n        display:flex;\n        flex-wrap:wrap;\n    }\n    ````\n    ````\n    .wrapper>div{\n        width:4rem;\n        height:4rem;\n        margin:0.5rem;\n    }\n    ````\n\n{% asset_img rem-2.jpg %}\n上图为手机端的展示图。\n\n# 三、对于使用sass的工程\n## 1、首先安装node-sass\n## 2、监听scss文件的改动：\n    ````\n    node-sass style.scss style.css -w\n    ````\n这样每当修改style.scss文件且保存后，都会同步到style.css中。\n## 3、每次在规定元素的宽度和高度时，都需要计算像素转换成对应REM，如此有点不方便，所以可以在scss文件中加入一个转换的函数：\n    ````\n    $rem: 320px;\n    @function px2rem($px) {\n        @return $px / $rem*10+rem;\n    }\n    ````\n这样在书写css代码时就不需要计算宽高对应多少REM，直接写像素就可以：\n    ````\n    .wrapper>div{\n        width: px2rem(128px);\n        height: px2rem(128px);\n        margin: px2rem(16px);\n    }\n    ````\n上述代码和之前的效果是一致的。\n{% asset_img rem-3.jpg %}","slug":"REM","published":1,"updated":"2021-06-09T07:36:00.537Z","_id":"ckpozdwls0003xku05me50r82","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"一、REM是什么\"><a href=\"#一、REM是什么\" class=\"headerlink\" title=\"一、REM是什么\"></a>一、REM是什么</h1><p>REM是（font size of the root element），意思是网页的根元素的字体大小。</p>\n<h1 id=\"二、使用REM适配屏幕\"><a href=\"#二、使用REM适配屏幕\" class=\"headerlink\" title=\"二、使用REM适配屏幕\"></a>二、使用REM适配屏幕</h1><h2 id=\"1-可以把REM作为基准，设定元素的宽高。\"><a href=\"#1-可以把REM作为基准，设定元素的宽高。\" class=\"headerlink\" title=\"(1)可以把REM作为基准，设定元素的宽高。\"></a>(1)可以把REM作为基准，设定元素的宽高。</h2><h3 id=\"1、设定根元素的font-size的大小：\"><a href=\"#1、设定根元素的font-size的大小：\" class=\"headerlink\" title=\"1、设定根元素的font-size的大小：\"></a>1、设定根元素的font-size的大小：</h3><span id=\"more\"></span>\n<pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html&#123;</span><br><span class=\"line\">    font-size:40px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h3 id=\"2、在页面上加入几个元素：\"><a href=\"#2、在页面上加入几个元素：\" class=\"headerlink\" title=\"2、在页面上加入几个元素：\"></a>2、在页面上加入几个元素：</h3><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wrapper&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;one&quot;&gt;1&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;two&quot;&gt;2&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;three&quot;&gt;3&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;four&quot;&gt;4&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h3 id=\"3、布局：\"><a href=\"#3、布局：\" class=\"headerlink\" title=\"3、布局：\"></a>3、布局：</h3><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.wrapper&#123;</span><br><span class=\"line\">    display:flex;</span><br><span class=\"line\">    flex-wrap:wrap;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h3 id=\"4、元素大小：\"><a href=\"#4、元素大小：\" class=\"headerlink\" title=\"4、元素大小：\"></a>4、元素大小：</h3><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.wrapper&gt;div&#123;</span><br><span class=\"line\">    width:4rem;</span><br><span class=\"line\">    height:4rem;</span><br><span class=\"line\">    margin:0.5rem;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<img src=\"/2018/07/12/REM/rem-1.jpg\" class>\n\n<h2 id=\"（2）由于移动端屏幕大小不一，所以可以使用动态REM来适配屏幕。\"><a href=\"#（2）由于移动端屏幕大小不一，所以可以使用动态REM来适配屏幕。\" class=\"headerlink\" title=\"（2）由于移动端屏幕大小不一，所以可以使用动态REM来适配屏幕。\"></a>（2）由于移动端屏幕大小不一，所以可以使用动态REM来适配屏幕。</h2><h3 id=\"1、通过JS获取屏幕的大小，从而决定REM的基准值：\"><a href=\"#1、通过JS获取屏幕的大小，从而决定REM的基准值：\" class=\"headerlink\" title=\"1、通过JS获取屏幕的大小，从而决定REM的基准值：\"></a>1、通过JS获取屏幕的大小，从而决定REM的基准值：</h3><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.getElementsByTagName(&#x27;html&#x27;)[0].style.fontSize = window.innerWidth / 10 + &#x27;px&#x27;;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h3 id=\"2、布局与元素大小：\"><a href=\"#2、布局与元素大小：\" class=\"headerlink\" title=\"2、布局与元素大小：\"></a>2、布局与元素大小：</h3><p>html部分代码：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wrapper&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;one&quot;&gt;1&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;two&quot;&gt;2&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;three&quot;&gt;3&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;four&quot;&gt;4&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure><br>CSS部分代码：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.wrapper&#123;</span><br><span class=\"line\">    display:flex;</span><br><span class=\"line\">    flex-wrap:wrap;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.wrapper&gt;div&#123;</span><br><span class=\"line\">    width:4rem;</span><br><span class=\"line\">    height:4rem;</span><br><span class=\"line\">    margin:0.5rem;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<img src=\"/2018/07/12/REM/rem-2.jpg\" class>\n<p>上图为手机端的展示图。</p>\n<h1 id=\"三、对于使用sass的工程\"><a href=\"#三、对于使用sass的工程\" class=\"headerlink\" title=\"三、对于使用sass的工程\"></a>三、对于使用sass的工程</h1><h2 id=\"1、首先安装node-sass\"><a href=\"#1、首先安装node-sass\" class=\"headerlink\" title=\"1、首先安装node-sass\"></a>1、首先安装node-sass</h2><h2 id=\"2、监听scss文件的改动：\"><a href=\"#2、监听scss文件的改动：\" class=\"headerlink\" title=\"2、监听scss文件的改动：\"></a>2、监听scss文件的改动：</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node-sass style.scss style.css -w</span><br></pre></td></tr></table></figure>\n</code></pre>\n<p>这样每当修改style.scss文件且保存后，都会同步到style.css中。</p>\n<h2 id=\"3、每次在规定元素的宽度和高度时，都需要计算像素转换成对应REM，如此有点不方便，所以可以在scss文件中加入一个转换的函数：\"><a href=\"#3、每次在规定元素的宽度和高度时，都需要计算像素转换成对应REM，如此有点不方便，所以可以在scss文件中加入一个转换的函数：\" class=\"headerlink\" title=\"3、每次在规定元素的宽度和高度时，都需要计算像素转换成对应REM，如此有点不方便，所以可以在scss文件中加入一个转换的函数：\"></a>3、每次在规定元素的宽度和高度时，都需要计算像素转换成对应REM，如此有点不方便，所以可以在scss文件中加入一个转换的函数：</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$rem: 320px;</span><br><span class=\"line\">@function px2rem($px) &#123;</span><br><span class=\"line\">    @return $px / $rem*10+rem;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<p>这样在书写css代码时就不需要计算宽高对应多少REM，直接写像素就可以：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.wrapper&gt;div&#123;</span><br><span class=\"line\">    width: px2rem(128px);</span><br><span class=\"line\">    height: px2rem(128px);</span><br><span class=\"line\">    margin: px2rem(16px);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>上述代码和之前的效果是一致的。</p>\n<img src=\"/2018/07/12/REM/rem-3.jpg\" class>","site":{"data":{}},"excerpt":"<h1 id=\"一、REM是什么\"><a href=\"#一、REM是什么\" class=\"headerlink\" title=\"一、REM是什么\"></a>一、REM是什么</h1><p>REM是（font size of the root element），意思是网页的根元素的字体大小。</p>\n<h1 id=\"二、使用REM适配屏幕\"><a href=\"#二、使用REM适配屏幕\" class=\"headerlink\" title=\"二、使用REM适配屏幕\"></a>二、使用REM适配屏幕</h1><h2 id=\"1-可以把REM作为基准，设定元素的宽高。\"><a href=\"#1-可以把REM作为基准，设定元素的宽高。\" class=\"headerlink\" title=\"(1)可以把REM作为基准，设定元素的宽高。\"></a>(1)可以把REM作为基准，设定元素的宽高。</h2><h3 id=\"1、设定根元素的font-size的大小：\"><a href=\"#1、设定根元素的font-size的大小：\" class=\"headerlink\" title=\"1、设定根元素的font-size的大小：\"></a>1、设定根元素的font-size的大小：</h3>","more":"<pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html&#123;</span><br><span class=\"line\">    font-size:40px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h3 id=\"2、在页面上加入几个元素：\"><a href=\"#2、在页面上加入几个元素：\" class=\"headerlink\" title=\"2、在页面上加入几个元素：\"></a>2、在页面上加入几个元素：</h3><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wrapper&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;one&quot;&gt;1&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;two&quot;&gt;2&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;three&quot;&gt;3&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;four&quot;&gt;4&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h3 id=\"3、布局：\"><a href=\"#3、布局：\" class=\"headerlink\" title=\"3、布局：\"></a>3、布局：</h3><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.wrapper&#123;</span><br><span class=\"line\">    display:flex;</span><br><span class=\"line\">    flex-wrap:wrap;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h3 id=\"4、元素大小：\"><a href=\"#4、元素大小：\" class=\"headerlink\" title=\"4、元素大小：\"></a>4、元素大小：</h3><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.wrapper&gt;div&#123;</span><br><span class=\"line\">    width:4rem;</span><br><span class=\"line\">    height:4rem;</span><br><span class=\"line\">    margin:0.5rem;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<img src=\"/2018/07/12/REM/rem-1.jpg\" class>\n\n<h2 id=\"（2）由于移动端屏幕大小不一，所以可以使用动态REM来适配屏幕。\"><a href=\"#（2）由于移动端屏幕大小不一，所以可以使用动态REM来适配屏幕。\" class=\"headerlink\" title=\"（2）由于移动端屏幕大小不一，所以可以使用动态REM来适配屏幕。\"></a>（2）由于移动端屏幕大小不一，所以可以使用动态REM来适配屏幕。</h2><h3 id=\"1、通过JS获取屏幕的大小，从而决定REM的基准值：\"><a href=\"#1、通过JS获取屏幕的大小，从而决定REM的基准值：\" class=\"headerlink\" title=\"1、通过JS获取屏幕的大小，从而决定REM的基准值：\"></a>1、通过JS获取屏幕的大小，从而决定REM的基准值：</h3><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.getElementsByTagName(&#x27;html&#x27;)[0].style.fontSize = window.innerWidth / 10 + &#x27;px&#x27;;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h3 id=\"2、布局与元素大小：\"><a href=\"#2、布局与元素大小：\" class=\"headerlink\" title=\"2、布局与元素大小：\"></a>2、布局与元素大小：</h3><p>html部分代码：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wrapper&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;one&quot;&gt;1&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;two&quot;&gt;2&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;three&quot;&gt;3&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;four&quot;&gt;4&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure><br>CSS部分代码：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.wrapper&#123;</span><br><span class=\"line\">    display:flex;</span><br><span class=\"line\">    flex-wrap:wrap;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.wrapper&gt;div&#123;</span><br><span class=\"line\">    width:4rem;</span><br><span class=\"line\">    height:4rem;</span><br><span class=\"line\">    margin:0.5rem;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<img src=\"/2018/07/12/REM/rem-2.jpg\" class>\n<p>上图为手机端的展示图。</p>\n<h1 id=\"三、对于使用sass的工程\"><a href=\"#三、对于使用sass的工程\" class=\"headerlink\" title=\"三、对于使用sass的工程\"></a>三、对于使用sass的工程</h1><h2 id=\"1、首先安装node-sass\"><a href=\"#1、首先安装node-sass\" class=\"headerlink\" title=\"1、首先安装node-sass\"></a>1、首先安装node-sass</h2><h2 id=\"2、监听scss文件的改动：\"><a href=\"#2、监听scss文件的改动：\" class=\"headerlink\" title=\"2、监听scss文件的改动：\"></a>2、监听scss文件的改动：</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node-sass style.scss style.css -w</span><br></pre></td></tr></table></figure>\n</code></pre>\n<p>这样每当修改style.scss文件且保存后，都会同步到style.css中。</p>\n<h2 id=\"3、每次在规定元素的宽度和高度时，都需要计算像素转换成对应REM，如此有点不方便，所以可以在scss文件中加入一个转换的函数：\"><a href=\"#3、每次在规定元素的宽度和高度时，都需要计算像素转换成对应REM，如此有点不方便，所以可以在scss文件中加入一个转换的函数：\" class=\"headerlink\" title=\"3、每次在规定元素的宽度和高度时，都需要计算像素转换成对应REM，如此有点不方便，所以可以在scss文件中加入一个转换的函数：\"></a>3、每次在规定元素的宽度和高度时，都需要计算像素转换成对应REM，如此有点不方便，所以可以在scss文件中加入一个转换的函数：</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$rem: 320px;</span><br><span class=\"line\">@function px2rem($px) &#123;</span><br><span class=\"line\">    @return $px / $rem*10+rem;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<p>这样在书写css代码时就不需要计算宽高对应多少REM，直接写像素就可以：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.wrapper&gt;div&#123;</span><br><span class=\"line\">    width: px2rem(128px);</span><br><span class=\"line\">    height: px2rem(128px);</span><br><span class=\"line\">    margin: px2rem(16px);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>上述代码和之前的效果是一致的。</p>\n<img src=\"/2018/07/12/REM/rem-3.jpg\" class>"},{"title":"JS函数","date":"2018-05-03T06:19:16.000Z","_content":"# 1、函数概念\n    函数是一组执行任务或计算值得语句。\n\n# 2、函数声明\nJS中有两种常用的声明函数的方法\n## (1)function命令\n    ````\n    funtion square(a){\n        return a*a;\n    }\n    ````\n## (2)函数表达式\n<!-- more -->\n    ````\n    var square = funtion(a){\n        return a*a;\n    };\n    ````\n此函数声明的方式不需要带有函数名，如果加上函数名，函数名只在函数体内部有效，在函数体外部无效。且此种声明方式需要在花括号后加上分号。\n# 3、函数名提升\n浏览器把函数名看作成为变量名，因此在采用function命令声明函数时，函数会和变量声明一样提升到代码头部。\n    ````\n    f();\n    function f(){}\n    ````\n上述代码不会报错，上述等同于下方\n    ````\n    function f(){}\n    f()\n    ````\n但是使用函数表达式声明函数时却会报错\n    ````\n    f();\n    var f = function(){}\n    ````\n上面代码等同于\n    ````\n    var f;\n    f();\n    f = function(){}\n    ````\n上述代码调用f时，f只是被声明却没有赋值（undefined）。\n# 4、函数的属性与方法\n## (1)、name属性\nname属性用以返回函数的名字，如：\n    ````\n    function add(){}\n    add.name//得到函数名\"add\"\n    ````\n对于使用函数表达式声明函数返回的是变量名,如:\n    ````\n    var add = function(){};\n    add.name//得到变量名\"add\"\n    ````\n## (2)、length属性\nlength属性用于返回函数的参数个数，如：\n    ````\n    function add(x,y){}\n    add.length//值为2\n    ````\n## (3)、toString()方法\ntoString方法返回的内容是整个函数的源代码,如：\n    ````\n    function add(x,y){\n        return x+y\n    }\n    add.toString()\n    ````\n    得到\n    ````\n    function f(a,b){\n     return a+b\n    }\n    ````\n","source":"_posts/JS函数.md","raw":"---\ntitle: JS函数\ndate: 2018-05-03 14:19:16\ntags: function\ncategories: JavaScript\n---\n# 1、函数概念\n    函数是一组执行任务或计算值得语句。\n\n# 2、函数声明\nJS中有两种常用的声明函数的方法\n## (1)function命令\n    ````\n    funtion square(a){\n        return a*a;\n    }\n    ````\n## (2)函数表达式\n<!-- more -->\n    ````\n    var square = funtion(a){\n        return a*a;\n    };\n    ````\n此函数声明的方式不需要带有函数名，如果加上函数名，函数名只在函数体内部有效，在函数体外部无效。且此种声明方式需要在花括号后加上分号。\n# 3、函数名提升\n浏览器把函数名看作成为变量名，因此在采用function命令声明函数时，函数会和变量声明一样提升到代码头部。\n    ````\n    f();\n    function f(){}\n    ````\n上述代码不会报错，上述等同于下方\n    ````\n    function f(){}\n    f()\n    ````\n但是使用函数表达式声明函数时却会报错\n    ````\n    f();\n    var f = function(){}\n    ````\n上面代码等同于\n    ````\n    var f;\n    f();\n    f = function(){}\n    ````\n上述代码调用f时，f只是被声明却没有赋值（undefined）。\n# 4、函数的属性与方法\n## (1)、name属性\nname属性用以返回函数的名字，如：\n    ````\n    function add(){}\n    add.name//得到函数名\"add\"\n    ````\n对于使用函数表达式声明函数返回的是变量名,如:\n    ````\n    var add = function(){};\n    add.name//得到变量名\"add\"\n    ````\n## (2)、length属性\nlength属性用于返回函数的参数个数，如：\n    ````\n    function add(x,y){}\n    add.length//值为2\n    ````\n## (3)、toString()方法\ntoString方法返回的内容是整个函数的源代码,如：\n    ````\n    function add(x,y){\n        return x+y\n    }\n    add.toString()\n    ````\n    得到\n    ````\n    function f(a,b){\n     return a+b\n    }\n    ````\n","slug":"JS函数","published":1,"updated":"2021-06-09T06:26:34.395Z","_id":"ckpozdwlt0004xku01oxi2mo9","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"1、函数概念\"><a href=\"#1、函数概念\" class=\"headerlink\" title=\"1、函数概念\"></a>1、函数概念</h1><pre><code>函数是一组执行任务或计算值得语句。\n</code></pre>\n<h1 id=\"2、函数声明\"><a href=\"#2、函数声明\" class=\"headerlink\" title=\"2、函数声明\"></a>2、函数声明</h1><p>JS中有两种常用的声明函数的方法</p>\n<h2 id=\"1-function命令\"><a href=\"#1-function命令\" class=\"headerlink\" title=\"(1)function命令\"></a>(1)function命令</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">funtion square(a)&#123;</span><br><span class=\"line\">    return a*a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"2-函数表达式\"><a href=\"#2-函数表达式\" class=\"headerlink\" title=\"(2)函数表达式\"></a>(2)函数表达式</h2><span id=\"more\"></span>\n<pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var square = funtion(a)&#123;</span><br><span class=\"line\">    return a*a;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<p>此函数声明的方式不需要带有函数名，如果加上函数名，函数名只在函数体内部有效，在函数体外部无效。且此种声明方式需要在花括号后加上分号。</p>\n<h1 id=\"3、函数名提升\"><a href=\"#3、函数名提升\" class=\"headerlink\" title=\"3、函数名提升\"></a>3、函数名提升</h1><p>浏览器把函数名看作成为变量名，因此在采用function命令声明函数时，函数会和变量声明一样提升到代码头部。<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f();</span><br><span class=\"line\">function f()&#123;&#125;</span><br></pre></td></tr></table></figure><br>上述代码不会报错，上述等同于下方<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f()&#123;&#125;</span><br><span class=\"line\">f()</span><br></pre></td></tr></table></figure><br>但是使用函数表达式声明函数时却会报错<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f();</span><br><span class=\"line\">var f = function()&#123;&#125;</span><br></pre></td></tr></table></figure><br>上面代码等同于<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var f;</span><br><span class=\"line\">f();</span><br><span class=\"line\">f = function()&#123;&#125;</span><br></pre></td></tr></table></figure><br>上述代码调用f时，f只是被声明却没有赋值（undefined）。</p>\n<h1 id=\"4、函数的属性与方法\"><a href=\"#4、函数的属性与方法\" class=\"headerlink\" title=\"4、函数的属性与方法\"></a>4、函数的属性与方法</h1><h2 id=\"1-、name属性\"><a href=\"#1-、name属性\" class=\"headerlink\" title=\"(1)、name属性\"></a>(1)、name属性</h2><p>name属性用以返回函数的名字，如：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add()&#123;&#125;</span><br><span class=\"line\">add.name//得到函数名&quot;add&quot;</span><br></pre></td></tr></table></figure><br>对于使用函数表达式声明函数返回的是变量名,如:<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var add = function()&#123;&#125;;</span><br><span class=\"line\">add.name//得到变量名&quot;add&quot;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-、length属性\"><a href=\"#2-、length属性\" class=\"headerlink\" title=\"(2)、length属性\"></a>(2)、length属性</h2><p>length属性用于返回函数的参数个数，如：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add(x,y)&#123;&#125;</span><br><span class=\"line\">add.length//值为2</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-、toString-方法\"><a href=\"#3-、toString-方法\" class=\"headerlink\" title=\"(3)、toString()方法\"></a>(3)、toString()方法</h2><p>toString方法返回的内容是整个函数的源代码,如：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add(x,y)&#123;</span><br><span class=\"line\">    return x+y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">add.toString()</span><br></pre></td></tr></table></figure><br>    得到<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f(a,b)&#123;</span><br><span class=\"line\"> return a+b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"1、函数概念\"><a href=\"#1、函数概念\" class=\"headerlink\" title=\"1、函数概念\"></a>1、函数概念</h1><pre><code>函数是一组执行任务或计算值得语句。\n</code></pre>\n<h1 id=\"2、函数声明\"><a href=\"#2、函数声明\" class=\"headerlink\" title=\"2、函数声明\"></a>2、函数声明</h1><p>JS中有两种常用的声明函数的方法</p>\n<h2 id=\"1-function命令\"><a href=\"#1-function命令\" class=\"headerlink\" title=\"(1)function命令\"></a>(1)function命令</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">funtion square(a)&#123;</span><br><span class=\"line\">    return a*a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"2-函数表达式\"><a href=\"#2-函数表达式\" class=\"headerlink\" title=\"(2)函数表达式\"></a>(2)函数表达式</h2>","more":"<pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var square = funtion(a)&#123;</span><br><span class=\"line\">    return a*a;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<p>此函数声明的方式不需要带有函数名，如果加上函数名，函数名只在函数体内部有效，在函数体外部无效。且此种声明方式需要在花括号后加上分号。</p>\n<h1 id=\"3、函数名提升\"><a href=\"#3、函数名提升\" class=\"headerlink\" title=\"3、函数名提升\"></a>3、函数名提升</h1><p>浏览器把函数名看作成为变量名，因此在采用function命令声明函数时，函数会和变量声明一样提升到代码头部。<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f();</span><br><span class=\"line\">function f()&#123;&#125;</span><br></pre></td></tr></table></figure><br>上述代码不会报错，上述等同于下方<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f()&#123;&#125;</span><br><span class=\"line\">f()</span><br></pre></td></tr></table></figure><br>但是使用函数表达式声明函数时却会报错<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f();</span><br><span class=\"line\">var f = function()&#123;&#125;</span><br></pre></td></tr></table></figure><br>上面代码等同于<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var f;</span><br><span class=\"line\">f();</span><br><span class=\"line\">f = function()&#123;&#125;</span><br></pre></td></tr></table></figure><br>上述代码调用f时，f只是被声明却没有赋值（undefined）。</p>\n<h1 id=\"4、函数的属性与方法\"><a href=\"#4、函数的属性与方法\" class=\"headerlink\" title=\"4、函数的属性与方法\"></a>4、函数的属性与方法</h1><h2 id=\"1-、name属性\"><a href=\"#1-、name属性\" class=\"headerlink\" title=\"(1)、name属性\"></a>(1)、name属性</h2><p>name属性用以返回函数的名字，如：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add()&#123;&#125;</span><br><span class=\"line\">add.name//得到函数名&quot;add&quot;</span><br></pre></td></tr></table></figure><br>对于使用函数表达式声明函数返回的是变量名,如:<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var add = function()&#123;&#125;;</span><br><span class=\"line\">add.name//得到变量名&quot;add&quot;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-、length属性\"><a href=\"#2-、length属性\" class=\"headerlink\" title=\"(2)、length属性\"></a>(2)、length属性</h2><p>length属性用于返回函数的参数个数，如：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add(x,y)&#123;&#125;</span><br><span class=\"line\">add.length//值为2</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-、toString-方法\"><a href=\"#3-、toString-方法\" class=\"headerlink\" title=\"(3)、toString()方法\"></a>(3)、toString()方法</h2><p>toString方法返回的内容是整个函数的源代码,如：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add(x,y)&#123;</span><br><span class=\"line\">    return x+y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">add.toString()</span><br></pre></td></tr></table></figure><br>    得到<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f(a,b)&#123;</span><br><span class=\"line\"> return a+b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"事件模型","date":"2018-06-29T17:37:05.000Z","_content":"\n\n# 1、事件模型，就是通过监听函数对事件做出反应。\n当事件发生时，浏览器监听到了这个事件，就会执行对应的监听函数。\n\n# 2、事件模型传播的三个阶段\n第一阶段：从window对象传导到目标节点（上层传到底层），称为“捕获阶段”（capture phase）。\n第二阶段：在目标节点上触发，称为“目标阶段”（target phase）。\n第三阶段：从目标节点传导回window对象（从底层传回上层），称为“冒泡阶段”（bubbling phase）。\n\n# 3、一个事件传播的例子\n<!-- more -->\nhtml代码如下：\n    ````\n    <div id=\"first\">first\n        <div id=\"second\">second\n            <div id=\"third\">third</div>\n        </div>\n    </div>\n    ````\n\n{% asset_img 1.jpg 事件模型 %}\n\nJavaScript代码如下：\n    ````\n    var first = document.querySelector('#first')\n\n    var second = document.querySelector('#second')\n\n    var third = document.querySelector('#third')\n\n    first.addEventListener('click',function(){\n        console.log('first')\n    })\n\n    second.addEventListener('click',function(){\n        console.log('second')\n    })\n\n    third.addEventListener('click',function(){\n        console.log('third')\n    })\n    ````\n当点击third框时，控制台输出的顺序为：third、second、first。\n这表明是在冒泡阶段执行的监听函数，这是因为 addEventListener \n可以选填第三个参数（布尔类型的值），当没传时默认为false，监听函数在冒泡阶段执行；\n当传入的值为true时，监听函数在捕获阶段执行。\n所以，给这3个监听函数传入true时，控制台输出的顺序为：first、second、third。\n\n# 4、阻止事件传播\nstopPropagation方法可以阻止事件的传播。\n把third的监听函数改为如下时：\n    ````\n    third.addEventListener('click',function(e){\n        e.stopPropagation()\n        console.log('third')\n    })\n    ````\n控制台输出为：third；说明阻止了事件在冒泡阶段上的传播。","source":"_posts/事件模型.md","raw":"---\ntitle: 事件模型\ndate: 2018-06-30 01:37:05\ntags: Event\ncategories: JavaScript\n---\n\n\n# 1、事件模型，就是通过监听函数对事件做出反应。\n当事件发生时，浏览器监听到了这个事件，就会执行对应的监听函数。\n\n# 2、事件模型传播的三个阶段\n第一阶段：从window对象传导到目标节点（上层传到底层），称为“捕获阶段”（capture phase）。\n第二阶段：在目标节点上触发，称为“目标阶段”（target phase）。\n第三阶段：从目标节点传导回window对象（从底层传回上层），称为“冒泡阶段”（bubbling phase）。\n\n# 3、一个事件传播的例子\n<!-- more -->\nhtml代码如下：\n    ````\n    <div id=\"first\">first\n        <div id=\"second\">second\n            <div id=\"third\">third</div>\n        </div>\n    </div>\n    ````\n\n{% asset_img 1.jpg 事件模型 %}\n\nJavaScript代码如下：\n    ````\n    var first = document.querySelector('#first')\n\n    var second = document.querySelector('#second')\n\n    var third = document.querySelector('#third')\n\n    first.addEventListener('click',function(){\n        console.log('first')\n    })\n\n    second.addEventListener('click',function(){\n        console.log('second')\n    })\n\n    third.addEventListener('click',function(){\n        console.log('third')\n    })\n    ````\n当点击third框时，控制台输出的顺序为：third、second、first。\n这表明是在冒泡阶段执行的监听函数，这是因为 addEventListener \n可以选填第三个参数（布尔类型的值），当没传时默认为false，监听函数在冒泡阶段执行；\n当传入的值为true时，监听函数在捕获阶段执行。\n所以，给这3个监听函数传入true时，控制台输出的顺序为：first、second、third。\n\n# 4、阻止事件传播\nstopPropagation方法可以阻止事件的传播。\n把third的监听函数改为如下时：\n    ````\n    third.addEventListener('click',function(e){\n        e.stopPropagation()\n        console.log('third')\n    })\n    ````\n控制台输出为：third；说明阻止了事件在冒泡阶段上的传播。","slug":"事件模型","published":1,"updated":"2021-06-09T07:36:31.298Z","_id":"ckpozdwlu0006xku05xkd89r5","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"1、事件模型，就是通过监听函数对事件做出反应。\"><a href=\"#1、事件模型，就是通过监听函数对事件做出反应。\" class=\"headerlink\" title=\"1、事件模型，就是通过监听函数对事件做出反应。\"></a>1、事件模型，就是通过监听函数对事件做出反应。</h1><p>当事件发生时，浏览器监听到了这个事件，就会执行对应的监听函数。</p>\n<h1 id=\"2、事件模型传播的三个阶段\"><a href=\"#2、事件模型传播的三个阶段\" class=\"headerlink\" title=\"2、事件模型传播的三个阶段\"></a>2、事件模型传播的三个阶段</h1><p>第一阶段：从window对象传导到目标节点（上层传到底层），称为“捕获阶段”（capture phase）。<br>第二阶段：在目标节点上触发，称为“目标阶段”（target phase）。<br>第三阶段：从目标节点传导回window对象（从底层传回上层），称为“冒泡阶段”（bubbling phase）。</p>\n<h1 id=\"3、一个事件传播的例子\"><a href=\"#3、一个事件传播的例子\" class=\"headerlink\" title=\"3、一个事件传播的例子\"></a>3、一个事件传播的例子</h1><span id=\"more\"></span>\n<p>html代码如下：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;first&quot;&gt;first</span><br><span class=\"line\">    &lt;div id=&quot;second&quot;&gt;second</span><br><span class=\"line\">        &lt;div id=&quot;third&quot;&gt;third&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<img src=\"/2018/06/30/%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B/1.jpg\" class title=\"事件模型\">\n\n<p>JavaScript代码如下：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var first = document.querySelector(&#x27;#first&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">var second = document.querySelector(&#x27;#second&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">var third = document.querySelector(&#x27;#third&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">first.addEventListener(&#x27;click&#x27;,function()&#123;</span><br><span class=\"line\">    console.log(&#x27;first&#x27;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">second.addEventListener(&#x27;click&#x27;,function()&#123;</span><br><span class=\"line\">    console.log(&#x27;second&#x27;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">third.addEventListener(&#x27;click&#x27;,function()&#123;</span><br><span class=\"line\">    console.log(&#x27;third&#x27;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure><br>当点击third框时，控制台输出的顺序为：third、second、first。<br>这表明是在冒泡阶段执行的监听函数，这是因为 addEventListener<br>可以选填第三个参数（布尔类型的值），当没传时默认为false，监听函数在冒泡阶段执行；<br>当传入的值为true时，监听函数在捕获阶段执行。<br>所以，给这3个监听函数传入true时，控制台输出的顺序为：first、second、third。</p>\n<h1 id=\"4、阻止事件传播\"><a href=\"#4、阻止事件传播\" class=\"headerlink\" title=\"4、阻止事件传播\"></a>4、阻止事件传播</h1><p>stopPropagation方法可以阻止事件的传播。<br>把third的监听函数改为如下时：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">third.addEventListener(&#x27;click&#x27;,function(e)&#123;</span><br><span class=\"line\">    e.stopPropagation()</span><br><span class=\"line\">    console.log(&#x27;third&#x27;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure><br>控制台输出为：third；说明阻止了事件在冒泡阶段上的传播。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"1、事件模型，就是通过监听函数对事件做出反应。\"><a href=\"#1、事件模型，就是通过监听函数对事件做出反应。\" class=\"headerlink\" title=\"1、事件模型，就是通过监听函数对事件做出反应。\"></a>1、事件模型，就是通过监听函数对事件做出反应。</h1><p>当事件发生时，浏览器监听到了这个事件，就会执行对应的监听函数。</p>\n<h1 id=\"2、事件模型传播的三个阶段\"><a href=\"#2、事件模型传播的三个阶段\" class=\"headerlink\" title=\"2、事件模型传播的三个阶段\"></a>2、事件模型传播的三个阶段</h1><p>第一阶段：从window对象传导到目标节点（上层传到底层），称为“捕获阶段”（capture phase）。<br>第二阶段：在目标节点上触发，称为“目标阶段”（target phase）。<br>第三阶段：从目标节点传导回window对象（从底层传回上层），称为“冒泡阶段”（bubbling phase）。</p>\n<h1 id=\"3、一个事件传播的例子\"><a href=\"#3、一个事件传播的例子\" class=\"headerlink\" title=\"3、一个事件传播的例子\"></a>3、一个事件传播的例子</h1>","more":"<p>html代码如下：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;first&quot;&gt;first</span><br><span class=\"line\">    &lt;div id=&quot;second&quot;&gt;second</span><br><span class=\"line\">        &lt;div id=&quot;third&quot;&gt;third&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<img src=\"/2018/06/30/%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B/1.jpg\" class title=\"事件模型\">\n\n<p>JavaScript代码如下：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var first = document.querySelector(&#x27;#first&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">var second = document.querySelector(&#x27;#second&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">var third = document.querySelector(&#x27;#third&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">first.addEventListener(&#x27;click&#x27;,function()&#123;</span><br><span class=\"line\">    console.log(&#x27;first&#x27;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">second.addEventListener(&#x27;click&#x27;,function()&#123;</span><br><span class=\"line\">    console.log(&#x27;second&#x27;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">third.addEventListener(&#x27;click&#x27;,function()&#123;</span><br><span class=\"line\">    console.log(&#x27;third&#x27;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure><br>当点击third框时，控制台输出的顺序为：third、second、first。<br>这表明是在冒泡阶段执行的监听函数，这是因为 addEventListener<br>可以选填第三个参数（布尔类型的值），当没传时默认为false，监听函数在冒泡阶段执行；<br>当传入的值为true时，监听函数在捕获阶段执行。<br>所以，给这3个监听函数传入true时，控制台输出的顺序为：first、second、third。</p>\n<h1 id=\"4、阻止事件传播\"><a href=\"#4、阻止事件传播\" class=\"headerlink\" title=\"4、阻止事件传播\"></a>4、阻止事件传播</h1><p>stopPropagation方法可以阻止事件的传播。<br>把third的监听函数改为如下时：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">third.addEventListener(&#x27;click&#x27;,function(e)&#123;</span><br><span class=\"line\">    e.stopPropagation()</span><br><span class=\"line\">    console.log(&#x27;third&#x27;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure><br>控制台输出为：third；说明阻止了事件在冒泡阶段上的传播。</p>"},{"title":"webpack的安装与配置","date":"2018-07-01T17:05:28.000Z","_content":"\n# 一、安装\n## 1、首先进行初始化，得到合法的package.json；\n    ````\n    npm init -y\n    ````\n## 2、进入webpack官方网站，查看安装要点，这里选择的webpack版本是3.12.0；\n    ````\n    npm instasll -save-dev webpack@3\n    ````\n## 3、在当前目录下创建webpack.config.js文件，文件内容如下：\n<!-- more -->\n    ````\n    const path = require('path');\n\n    module.exports = {\n        entry: './src/index.js',\n        output: {\n        filename: 'main.js',\n        path: path.resolve(__dirname, 'dist')\n        }\n    };\n    ````\n## 4、保存文件后，在当前的src目录下创建一个index.js文件，然后执行如下命令：\n    ````\n    npx webpack\n    ````\n或者还可以执行 ./node-modules/.bin/webpack  命令执行后（未报错）查看当前的dist目录下是否有main.js,\n如果有，则表示成功。\n\n# 二、安装babel\n## 1、使用babel把ES6或者更高版本的代码转换为兼容IE浏览器的JS代码\n这里使用的版本是：webpack 3.12.0 、babel-loader 7.1.4 、 babel 6.26.3 ，所以安装命令是：\n    ````\n    npm install babel-loader babel-core babel-preset-env webpack\n    ````\n## 2、在webpack.config.js文件中加入如下代码：\n    ````\n    module: {\n        rules: [{\n                test: /\\.js$/,\n                exclude: /(node_modules|bower_components)/,\n                use: {\n                    loader: 'babel-loader',\n                    options: {\n                        presets: ['env']\n                     }\n                }\n        }]\n    }\n    ````\n## 3、在index.js文件中写入如下代码：\n    ````\n    let a = 1\n    alert(a)\n    ````\n## 4、执行 ./node-modules/.bin/webpack  命令，查看dist目录下的main.js文件发现代码已经转换：\n    ````\n    var a = 1\n    alert(a)\n    ````\n\n# 三、存在多个模块时的处理\n## 1、在src目录下新建js目录并且一次创建module_1.js、module_2.js 以及app.js文件；\nmodule_1.js代码如下：\n    ````\n    function f1() {\n        let a = 1\n        console.log(a)\n    }\n\n    export default f1 //当被引用时，默认就把f2传给他\n    ````\nmodule_2.js代码如下：\n    ````\n    function f2() {\n        let b = 2\n        console.log(b)\n    }\n\n    export default f2 \n    ````\n## 2、在app.js文件中引入module_1.js与module_2.js：\n    ````\n    import module1 from './module_1'\n    import module2 from './module_2'\n\n    module1()\n    module2() \n    ````\n## 3、修改webpack.config.js文件部分代码如下：\n    ````\n    entry: './src/js/app.js',\n    output: {\n        filename: 'main.js',\n        path: path.resolve(__dirname, 'dist/js')\n    }\n    ````\n## 4、执行 ./node-modules/.bin/webpack  命令，查看dist目录下的main.js文件，\nmodule_1.js与module_2.js中的代码已经被引用。\n\n# 四、引入scss并转换为浏览器可以识别的css\n## 1、在src目录下新建css目录并创建main.scss文件，且代码如下：\n    ````\n    body {\n        background: gray;\n        >div {\n            padding: 20px;\n        }\n    }\n    ````\n## 2、在src目录下创建index.html文件并且复制到dist目录下，在index.html中引入main.js文件；\n## 3、执行安装命令：\n    ````\n    npm install sass-loader node-sass webpack --save-dev\n    npm install style-loader css-loader --save-dev\n    ````\n## 4、修改webpack.config.js部分代码如下：\n    ````\n    {\n        test: /\\.scss$/,\n        use: [{\n                loader: \"style-loader\" // creates style nodes from JS strings\n                }, {\n                    loader: \"css-loader\" // translates CSS into CommonJS\n                }, {\n                    loader: \"sass-loader\" // compiles Sass to CSS\n                }]\n    }\n    ````\n## 5、在app.js中引入main.scss文件：\n    ````\n    import '../css/main.scss'\n    ````\n## 6、执行 ./node-modules/.bin/webpack  命令，打开服务 http-server -c-1，\n在浏览器中输入127.0.0.1:8080，打开控制台。在Elements下发现多出了一个style标签，内容为：\n    ````\n    body{\n        background:grey;}\n    body > div{\n        padding:20px;}\n    ````\nscss文件成功传唤为浏览器可识别的css。\n\n# 五、使用postcss-loader自动使css兼容\n## 1、执行安装命令：\n    ````\n    npm i -D postcss-loader\n    ````\n## 2、在安装过程中可能会出错，这里遇到的问题是缺少了 postcss-cssnext，所以再安装这部分：\n    ````\n    npm i postcss-cssnext\n    ````\n## 3、在根目录下创建postcss.config.js文件，内容为：\n    ````\n    module.exports = {\n        plugins: {\n            'postcss-cssnext': {}\n        }\n    }\n    ````\n## 4、修改main.scss文件内容为：\n    ````\n    body{\n        display:flex;\n    }\n    ````\n## 5、修改webpack.config.js部分代码如下：\n    ````\n    {\n        test: /\\.scss$/,\n        use: [{\n                loader: \"style-loader\" // creates style nodes from JS strings\n                }, {\n                    loader: \"css-loader\", // translates CSS into CommonJS\n                    options: { importLoaders: 1 }\n                }, {\n                    loader: 'postcss-loader'\n                }, {\n                    loader: \"sass-loader\" // compiles Sass to CSS\n                }]\n    }\n    ````\n## 6、执行 ./node-modules/.bin/webpack  命令，打开服务 http-server -c-1，\n在浏览器中输入127.0.0.1:8080，打开控制台。style标签的内容为：\n    ````\n    body{\n        display:-webkit-box;\n        display:-ms-flexbox;\n        display:flex;}\n    ````\n说明在打包过程中postcss-loader已经自动地将scss转换为兼容的css。","source":"_posts/webpack的安装与配置.md","raw":"---\ntitle: webpack的安装与配置\ndate: 2018-07-02 01:05:28\ntags: webpack\ncategories: Webpack\n---\n\n# 一、安装\n## 1、首先进行初始化，得到合法的package.json；\n    ````\n    npm init -y\n    ````\n## 2、进入webpack官方网站，查看安装要点，这里选择的webpack版本是3.12.0；\n    ````\n    npm instasll -save-dev webpack@3\n    ````\n## 3、在当前目录下创建webpack.config.js文件，文件内容如下：\n<!-- more -->\n    ````\n    const path = require('path');\n\n    module.exports = {\n        entry: './src/index.js',\n        output: {\n        filename: 'main.js',\n        path: path.resolve(__dirname, 'dist')\n        }\n    };\n    ````\n## 4、保存文件后，在当前的src目录下创建一个index.js文件，然后执行如下命令：\n    ````\n    npx webpack\n    ````\n或者还可以执行 ./node-modules/.bin/webpack  命令执行后（未报错）查看当前的dist目录下是否有main.js,\n如果有，则表示成功。\n\n# 二、安装babel\n## 1、使用babel把ES6或者更高版本的代码转换为兼容IE浏览器的JS代码\n这里使用的版本是：webpack 3.12.0 、babel-loader 7.1.4 、 babel 6.26.3 ，所以安装命令是：\n    ````\n    npm install babel-loader babel-core babel-preset-env webpack\n    ````\n## 2、在webpack.config.js文件中加入如下代码：\n    ````\n    module: {\n        rules: [{\n                test: /\\.js$/,\n                exclude: /(node_modules|bower_components)/,\n                use: {\n                    loader: 'babel-loader',\n                    options: {\n                        presets: ['env']\n                     }\n                }\n        }]\n    }\n    ````\n## 3、在index.js文件中写入如下代码：\n    ````\n    let a = 1\n    alert(a)\n    ````\n## 4、执行 ./node-modules/.bin/webpack  命令，查看dist目录下的main.js文件发现代码已经转换：\n    ````\n    var a = 1\n    alert(a)\n    ````\n\n# 三、存在多个模块时的处理\n## 1、在src目录下新建js目录并且一次创建module_1.js、module_2.js 以及app.js文件；\nmodule_1.js代码如下：\n    ````\n    function f1() {\n        let a = 1\n        console.log(a)\n    }\n\n    export default f1 //当被引用时，默认就把f2传给他\n    ````\nmodule_2.js代码如下：\n    ````\n    function f2() {\n        let b = 2\n        console.log(b)\n    }\n\n    export default f2 \n    ````\n## 2、在app.js文件中引入module_1.js与module_2.js：\n    ````\n    import module1 from './module_1'\n    import module2 from './module_2'\n\n    module1()\n    module2() \n    ````\n## 3、修改webpack.config.js文件部分代码如下：\n    ````\n    entry: './src/js/app.js',\n    output: {\n        filename: 'main.js',\n        path: path.resolve(__dirname, 'dist/js')\n    }\n    ````\n## 4、执行 ./node-modules/.bin/webpack  命令，查看dist目录下的main.js文件，\nmodule_1.js与module_2.js中的代码已经被引用。\n\n# 四、引入scss并转换为浏览器可以识别的css\n## 1、在src目录下新建css目录并创建main.scss文件，且代码如下：\n    ````\n    body {\n        background: gray;\n        >div {\n            padding: 20px;\n        }\n    }\n    ````\n## 2、在src目录下创建index.html文件并且复制到dist目录下，在index.html中引入main.js文件；\n## 3、执行安装命令：\n    ````\n    npm install sass-loader node-sass webpack --save-dev\n    npm install style-loader css-loader --save-dev\n    ````\n## 4、修改webpack.config.js部分代码如下：\n    ````\n    {\n        test: /\\.scss$/,\n        use: [{\n                loader: \"style-loader\" // creates style nodes from JS strings\n                }, {\n                    loader: \"css-loader\" // translates CSS into CommonJS\n                }, {\n                    loader: \"sass-loader\" // compiles Sass to CSS\n                }]\n    }\n    ````\n## 5、在app.js中引入main.scss文件：\n    ````\n    import '../css/main.scss'\n    ````\n## 6、执行 ./node-modules/.bin/webpack  命令，打开服务 http-server -c-1，\n在浏览器中输入127.0.0.1:8080，打开控制台。在Elements下发现多出了一个style标签，内容为：\n    ````\n    body{\n        background:grey;}\n    body > div{\n        padding:20px;}\n    ````\nscss文件成功传唤为浏览器可识别的css。\n\n# 五、使用postcss-loader自动使css兼容\n## 1、执行安装命令：\n    ````\n    npm i -D postcss-loader\n    ````\n## 2、在安装过程中可能会出错，这里遇到的问题是缺少了 postcss-cssnext，所以再安装这部分：\n    ````\n    npm i postcss-cssnext\n    ````\n## 3、在根目录下创建postcss.config.js文件，内容为：\n    ````\n    module.exports = {\n        plugins: {\n            'postcss-cssnext': {}\n        }\n    }\n    ````\n## 4、修改main.scss文件内容为：\n    ````\n    body{\n        display:flex;\n    }\n    ````\n## 5、修改webpack.config.js部分代码如下：\n    ````\n    {\n        test: /\\.scss$/,\n        use: [{\n                loader: \"style-loader\" // creates style nodes from JS strings\n                }, {\n                    loader: \"css-loader\", // translates CSS into CommonJS\n                    options: { importLoaders: 1 }\n                }, {\n                    loader: 'postcss-loader'\n                }, {\n                    loader: \"sass-loader\" // compiles Sass to CSS\n                }]\n    }\n    ````\n## 6、执行 ./node-modules/.bin/webpack  命令，打开服务 http-server -c-1，\n在浏览器中输入127.0.0.1:8080，打开控制台。style标签的内容为：\n    ````\n    body{\n        display:-webkit-box;\n        display:-ms-flexbox;\n        display:flex;}\n    ````\n说明在打包过程中postcss-loader已经自动地将scss转换为兼容的css。","slug":"webpack的安装与配置","published":1,"updated":"2021-06-09T06:28:44.140Z","_id":"ckpozdwlv0007xku030xlfflf","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"一、安装\"><a href=\"#一、安装\" class=\"headerlink\" title=\"一、安装\"></a>一、安装</h1><h2 id=\"1、首先进行初始化，得到合法的package-json；\"><a href=\"#1、首先进行初始化，得到合法的package-json；\" class=\"headerlink\" title=\"1、首先进行初始化，得到合法的package.json；\"></a>1、首先进行初始化，得到合法的package.json；</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"2、进入webpack官方网站，查看安装要点，这里选择的webpack版本是3-12-0；\"><a href=\"#2、进入webpack官方网站，查看安装要点，这里选择的webpack版本是3-12-0；\" class=\"headerlink\" title=\"2、进入webpack官方网站，查看安装要点，这里选择的webpack版本是3.12.0；\"></a>2、进入webpack官方网站，查看安装要点，这里选择的webpack版本是3.12.0；</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm instasll -save-dev webpack@3</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"3、在当前目录下创建webpack-config-js文件，文件内容如下：\"><a href=\"#3、在当前目录下创建webpack-config-js文件，文件内容如下：\" class=\"headerlink\" title=\"3、在当前目录下创建webpack.config.js文件，文件内容如下：\"></a>3、在当前目录下创建webpack.config.js文件，文件内容如下：</h2><span id=\"more\"></span>\n<pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const path = require(&#x27;path&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry: &#x27;./src/index.js&#x27;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">    filename: &#x27;main.js&#x27;,</span><br><span class=\"line\">    path: path.resolve(__dirname, &#x27;dist&#x27;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"4、保存文件后，在当前的src目录下创建一个index-js文件，然后执行如下命令：\"><a href=\"#4、保存文件后，在当前的src目录下创建一个index-js文件，然后执行如下命令：\" class=\"headerlink\" title=\"4、保存文件后，在当前的src目录下创建一个index.js文件，然后执行如下命令：\"></a>4、保存文件后，在当前的src目录下创建一个index.js文件，然后执行如下命令：</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx webpack</span><br></pre></td></tr></table></figure>\n</code></pre>\n<p>或者还可以执行 ./node-modules/.bin/webpack  命令执行后（未报错）查看当前的dist目录下是否有main.js,<br>如果有，则表示成功。</p>\n<h1 id=\"二、安装babel\"><a href=\"#二、安装babel\" class=\"headerlink\" title=\"二、安装babel\"></a>二、安装babel</h1><h2 id=\"1、使用babel把ES6或者更高版本的代码转换为兼容IE浏览器的JS代码\"><a href=\"#1、使用babel把ES6或者更高版本的代码转换为兼容IE浏览器的JS代码\" class=\"headerlink\" title=\"1、使用babel把ES6或者更高版本的代码转换为兼容IE浏览器的JS代码\"></a>1、使用babel把ES6或者更高版本的代码转换为兼容IE浏览器的JS代码</h2><p>这里使用的版本是：webpack 3.12.0 、babel-loader 7.1.4 、 babel 6.26.3 ，所以安装命令是：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install babel-loader babel-core babel-preset-env webpack</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2、在webpack-config-js文件中加入如下代码：\"><a href=\"#2、在webpack-config-js文件中加入如下代码：\" class=\"headerlink\" title=\"2、在webpack.config.js文件中加入如下代码：\"></a>2、在webpack.config.js文件中加入如下代码：</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module: &#123;</span><br><span class=\"line\">    rules: [&#123;</span><br><span class=\"line\">            test: /\\.js$/,</span><br><span class=\"line\">            exclude: /(node_modules|bower_components)/,</span><br><span class=\"line\">            use: &#123;</span><br><span class=\"line\">                loader: &#x27;babel-loader&#x27;,</span><br><span class=\"line\">                options: &#123;</span><br><span class=\"line\">                    presets: [&#x27;env&#x27;]</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"3、在index-js文件中写入如下代码：\"><a href=\"#3、在index-js文件中写入如下代码：\" class=\"headerlink\" title=\"3、在index.js文件中写入如下代码：\"></a>3、在index.js文件中写入如下代码：</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = 1</span><br><span class=\"line\">alert(a)</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"4、执行-node-modules-bin-webpack-命令，查看dist目录下的main-js文件发现代码已经转换：\"><a href=\"#4、执行-node-modules-bin-webpack-命令，查看dist目录下的main-js文件发现代码已经转换：\" class=\"headerlink\" title=\"4、执行 ./node-modules/.bin/webpack  命令，查看dist目录下的main.js文件发现代码已经转换：\"></a>4、执行 ./node-modules/.bin/webpack  命令，查看dist目录下的main.js文件发现代码已经转换：</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 1</span><br><span class=\"line\">alert(a)</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h1 id=\"三、存在多个模块时的处理\"><a href=\"#三、存在多个模块时的处理\" class=\"headerlink\" title=\"三、存在多个模块时的处理\"></a>三、存在多个模块时的处理</h1><h2 id=\"1、在src目录下新建js目录并且一次创建module-1-js、module-2-js-以及app-js文件；\"><a href=\"#1、在src目录下新建js目录并且一次创建module-1-js、module-2-js-以及app-js文件；\" class=\"headerlink\" title=\"1、在src目录下新建js目录并且一次创建module_1.js、module_2.js 以及app.js文件；\"></a>1、在src目录下新建js目录并且一次创建module_1.js、module_2.js 以及app.js文件；</h2><p>module_1.js代码如下：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f1() &#123;</span><br><span class=\"line\">    let a = 1</span><br><span class=\"line\">    console.log(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default f1 //当被引用时，默认就把f2传给他</span><br></pre></td></tr></table></figure><br>module_2.js代码如下：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f2() &#123;</span><br><span class=\"line\">    let b = 2</span><br><span class=\"line\">    console.log(b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default f2 </span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2、在app-js文件中引入module-1-js与module-2-js：\"><a href=\"#2、在app-js文件中引入module-1-js与module-2-js：\" class=\"headerlink\" title=\"2、在app.js文件中引入module_1.js与module_2.js：\"></a>2、在app.js文件中引入module_1.js与module_2.js：</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import module1 from &#x27;./module_1&#x27;</span><br><span class=\"line\">import module2 from &#x27;./module_2&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">module1()</span><br><span class=\"line\">module2() </span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"3、修改webpack-config-js文件部分代码如下：\"><a href=\"#3、修改webpack-config-js文件部分代码如下：\" class=\"headerlink\" title=\"3、修改webpack.config.js文件部分代码如下：\"></a>3、修改webpack.config.js文件部分代码如下：</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: &#x27;./src/js/app.js&#x27;,</span><br><span class=\"line\">output: &#123;</span><br><span class=\"line\">    filename: &#x27;main.js&#x27;,</span><br><span class=\"line\">    path: path.resolve(__dirname, &#x27;dist/js&#x27;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"4、执行-node-modules-bin-webpack-命令，查看dist目录下的main-js文件，\"><a href=\"#4、执行-node-modules-bin-webpack-命令，查看dist目录下的main-js文件，\" class=\"headerlink\" title=\"4、执行 ./node-modules/.bin/webpack  命令，查看dist目录下的main.js文件，\"></a>4、执行 ./node-modules/.bin/webpack  命令，查看dist目录下的main.js文件，</h2><p>module_1.js与module_2.js中的代码已经被引用。</p>\n<h1 id=\"四、引入scss并转换为浏览器可以识别的css\"><a href=\"#四、引入scss并转换为浏览器可以识别的css\" class=\"headerlink\" title=\"四、引入scss并转换为浏览器可以识别的css\"></a>四、引入scss并转换为浏览器可以识别的css</h1><h2 id=\"1、在src目录下新建css目录并创建main-scss文件，且代码如下：\"><a href=\"#1、在src目录下新建css目录并创建main-scss文件，且代码如下：\" class=\"headerlink\" title=\"1、在src目录下新建css目录并创建main.scss文件，且代码如下：\"></a>1、在src目录下新建css目录并创建main.scss文件，且代码如下：</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body &#123;</span><br><span class=\"line\">    background: gray;</span><br><span class=\"line\">    &gt;div &#123;</span><br><span class=\"line\">        padding: 20px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"2、在src目录下创建index-html文件并且复制到dist目录下，在index-html中引入main-js文件；\"><a href=\"#2、在src目录下创建index-html文件并且复制到dist目录下，在index-html中引入main-js文件；\" class=\"headerlink\" title=\"2、在src目录下创建index.html文件并且复制到dist目录下，在index.html中引入main.js文件；\"></a>2、在src目录下创建index.html文件并且复制到dist目录下，在index.html中引入main.js文件；</h2><h2 id=\"3、执行安装命令：\"><a href=\"#3、执行安装命令：\" class=\"headerlink\" title=\"3、执行安装命令：\"></a>3、执行安装命令：</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install sass-loader node-sass webpack --save-dev</span><br><span class=\"line\">npm install style-loader css-loader --save-dev</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"4、修改webpack-config-js部分代码如下：\"><a href=\"#4、修改webpack-config-js部分代码如下：\" class=\"headerlink\" title=\"4、修改webpack.config.js部分代码如下：\"></a>4、修改webpack.config.js部分代码如下：</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test: /\\.scss$/,</span><br><span class=\"line\">    use: [&#123;</span><br><span class=\"line\">            loader: &quot;style-loader&quot; // creates style nodes from JS strings</span><br><span class=\"line\">            &#125;, &#123;</span><br><span class=\"line\">                loader: &quot;css-loader&quot; // translates CSS into CommonJS</span><br><span class=\"line\">            &#125;, &#123;</span><br><span class=\"line\">                loader: &quot;sass-loader&quot; // compiles Sass to CSS</span><br><span class=\"line\">            &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"5、在app-js中引入main-scss文件：\"><a href=\"#5、在app-js中引入main-scss文件：\" class=\"headerlink\" title=\"5、在app.js中引入main.scss文件：\"></a>5、在app.js中引入main.scss文件：</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#x27;../css/main.scss&#x27;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"6、执行-node-modules-bin-webpack-命令，打开服务-http-server-c-1，\"><a href=\"#6、执行-node-modules-bin-webpack-命令，打开服务-http-server-c-1，\" class=\"headerlink\" title=\"6、执行 ./node-modules/.bin/webpack  命令，打开服务 http-server -c-1，\"></a>6、执行 ./node-modules/.bin/webpack  命令，打开服务 http-server -c-1，</h2><p>在浏览器中输入127.0.0.1:8080，打开控制台。在Elements下发现多出了一个style标签，内容为：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body&#123;</span><br><span class=\"line\">    background:grey;&#125;</span><br><span class=\"line\">body &gt; div&#123;</span><br><span class=\"line\">    padding:20px;&#125;</span><br></pre></td></tr></table></figure><br>scss文件成功传唤为浏览器可识别的css。</p>\n<h1 id=\"五、使用postcss-loader自动使css兼容\"><a href=\"#五、使用postcss-loader自动使css兼容\" class=\"headerlink\" title=\"五、使用postcss-loader自动使css兼容\"></a>五、使用postcss-loader自动使css兼容</h1><h2 id=\"1、执行安装命令：\"><a href=\"#1、执行安装命令：\" class=\"headerlink\" title=\"1、执行安装命令：\"></a>1、执行安装命令：</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D postcss-loader</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"2、在安装过程中可能会出错，这里遇到的问题是缺少了-postcss-cssnext，所以再安装这部分：\"><a href=\"#2、在安装过程中可能会出错，这里遇到的问题是缺少了-postcss-cssnext，所以再安装这部分：\" class=\"headerlink\" title=\"2、在安装过程中可能会出错，这里遇到的问题是缺少了 postcss-cssnext，所以再安装这部分：\"></a>2、在安装过程中可能会出错，这里遇到的问题是缺少了 postcss-cssnext，所以再安装这部分：</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i postcss-cssnext</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"3、在根目录下创建postcss-config-js文件，内容为：\"><a href=\"#3、在根目录下创建postcss-config-js文件，内容为：\" class=\"headerlink\" title=\"3、在根目录下创建postcss.config.js文件，内容为：\"></a>3、在根目录下创建postcss.config.js文件，内容为：</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    plugins: &#123;</span><br><span class=\"line\">        &#x27;postcss-cssnext&#x27;: &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"4、修改main-scss文件内容为：\"><a href=\"#4、修改main-scss文件内容为：\" class=\"headerlink\" title=\"4、修改main.scss文件内容为：\"></a>4、修改main.scss文件内容为：</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body&#123;</span><br><span class=\"line\">    display:flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"5、修改webpack-config-js部分代码如下：\"><a href=\"#5、修改webpack-config-js部分代码如下：\" class=\"headerlink\" title=\"5、修改webpack.config.js部分代码如下：\"></a>5、修改webpack.config.js部分代码如下：</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test: /\\.scss$/,</span><br><span class=\"line\">    use: [&#123;</span><br><span class=\"line\">            loader: &quot;style-loader&quot; // creates style nodes from JS strings</span><br><span class=\"line\">            &#125;, &#123;</span><br><span class=\"line\">                loader: &quot;css-loader&quot;, // translates CSS into CommonJS</span><br><span class=\"line\">                options: &#123; importLoaders: 1 &#125;</span><br><span class=\"line\">            &#125;, &#123;</span><br><span class=\"line\">                loader: &#x27;postcss-loader&#x27;</span><br><span class=\"line\">            &#125;, &#123;</span><br><span class=\"line\">                loader: &quot;sass-loader&quot; // compiles Sass to CSS</span><br><span class=\"line\">            &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"6、执行-node-modules-bin-webpack-命令，打开服务-http-server-c-1，-1\"><a href=\"#6、执行-node-modules-bin-webpack-命令，打开服务-http-server-c-1，-1\" class=\"headerlink\" title=\"6、执行 ./node-modules/.bin/webpack  命令，打开服务 http-server -c-1，\"></a>6、执行 ./node-modules/.bin/webpack  命令，打开服务 http-server -c-1，</h2><p>在浏览器中输入127.0.0.1:8080，打开控制台。style标签的内容为：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body&#123;</span><br><span class=\"line\">    display:-webkit-box;</span><br><span class=\"line\">    display:-ms-flexbox;</span><br><span class=\"line\">    display:flex;&#125;</span><br></pre></td></tr></table></figure><br>说明在打包过程中postcss-loader已经自动地将scss转换为兼容的css。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"一、安装\"><a href=\"#一、安装\" class=\"headerlink\" title=\"一、安装\"></a>一、安装</h1><h2 id=\"1、首先进行初始化，得到合法的package-json；\"><a href=\"#1、首先进行初始化，得到合法的package-json；\" class=\"headerlink\" title=\"1、首先进行初始化，得到合法的package.json；\"></a>1、首先进行初始化，得到合法的package.json；</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"2、进入webpack官方网站，查看安装要点，这里选择的webpack版本是3-12-0；\"><a href=\"#2、进入webpack官方网站，查看安装要点，这里选择的webpack版本是3-12-0；\" class=\"headerlink\" title=\"2、进入webpack官方网站，查看安装要点，这里选择的webpack版本是3.12.0；\"></a>2、进入webpack官方网站，查看安装要点，这里选择的webpack版本是3.12.0；</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm instasll -save-dev webpack@3</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"3、在当前目录下创建webpack-config-js文件，文件内容如下：\"><a href=\"#3、在当前目录下创建webpack-config-js文件，文件内容如下：\" class=\"headerlink\" title=\"3、在当前目录下创建webpack.config.js文件，文件内容如下：\"></a>3、在当前目录下创建webpack.config.js文件，文件内容如下：</h2>","more":"<pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const path = require(&#x27;path&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry: &#x27;./src/index.js&#x27;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">    filename: &#x27;main.js&#x27;,</span><br><span class=\"line\">    path: path.resolve(__dirname, &#x27;dist&#x27;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"4、保存文件后，在当前的src目录下创建一个index-js文件，然后执行如下命令：\"><a href=\"#4、保存文件后，在当前的src目录下创建一个index-js文件，然后执行如下命令：\" class=\"headerlink\" title=\"4、保存文件后，在当前的src目录下创建一个index.js文件，然后执行如下命令：\"></a>4、保存文件后，在当前的src目录下创建一个index.js文件，然后执行如下命令：</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx webpack</span><br></pre></td></tr></table></figure>\n</code></pre>\n<p>或者还可以执行 ./node-modules/.bin/webpack  命令执行后（未报错）查看当前的dist目录下是否有main.js,<br>如果有，则表示成功。</p>\n<h1 id=\"二、安装babel\"><a href=\"#二、安装babel\" class=\"headerlink\" title=\"二、安装babel\"></a>二、安装babel</h1><h2 id=\"1、使用babel把ES6或者更高版本的代码转换为兼容IE浏览器的JS代码\"><a href=\"#1、使用babel把ES6或者更高版本的代码转换为兼容IE浏览器的JS代码\" class=\"headerlink\" title=\"1、使用babel把ES6或者更高版本的代码转换为兼容IE浏览器的JS代码\"></a>1、使用babel把ES6或者更高版本的代码转换为兼容IE浏览器的JS代码</h2><p>这里使用的版本是：webpack 3.12.0 、babel-loader 7.1.4 、 babel 6.26.3 ，所以安装命令是：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install babel-loader babel-core babel-preset-env webpack</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2、在webpack-config-js文件中加入如下代码：\"><a href=\"#2、在webpack-config-js文件中加入如下代码：\" class=\"headerlink\" title=\"2、在webpack.config.js文件中加入如下代码：\"></a>2、在webpack.config.js文件中加入如下代码：</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module: &#123;</span><br><span class=\"line\">    rules: [&#123;</span><br><span class=\"line\">            test: /\\.js$/,</span><br><span class=\"line\">            exclude: /(node_modules|bower_components)/,</span><br><span class=\"line\">            use: &#123;</span><br><span class=\"line\">                loader: &#x27;babel-loader&#x27;,</span><br><span class=\"line\">                options: &#123;</span><br><span class=\"line\">                    presets: [&#x27;env&#x27;]</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"3、在index-js文件中写入如下代码：\"><a href=\"#3、在index-js文件中写入如下代码：\" class=\"headerlink\" title=\"3、在index.js文件中写入如下代码：\"></a>3、在index.js文件中写入如下代码：</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = 1</span><br><span class=\"line\">alert(a)</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"4、执行-node-modules-bin-webpack-命令，查看dist目录下的main-js文件发现代码已经转换：\"><a href=\"#4、执行-node-modules-bin-webpack-命令，查看dist目录下的main-js文件发现代码已经转换：\" class=\"headerlink\" title=\"4、执行 ./node-modules/.bin/webpack  命令，查看dist目录下的main.js文件发现代码已经转换：\"></a>4、执行 ./node-modules/.bin/webpack  命令，查看dist目录下的main.js文件发现代码已经转换：</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 1</span><br><span class=\"line\">alert(a)</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h1 id=\"三、存在多个模块时的处理\"><a href=\"#三、存在多个模块时的处理\" class=\"headerlink\" title=\"三、存在多个模块时的处理\"></a>三、存在多个模块时的处理</h1><h2 id=\"1、在src目录下新建js目录并且一次创建module-1-js、module-2-js-以及app-js文件；\"><a href=\"#1、在src目录下新建js目录并且一次创建module-1-js、module-2-js-以及app-js文件；\" class=\"headerlink\" title=\"1、在src目录下新建js目录并且一次创建module_1.js、module_2.js 以及app.js文件；\"></a>1、在src目录下新建js目录并且一次创建module_1.js、module_2.js 以及app.js文件；</h2><p>module_1.js代码如下：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f1() &#123;</span><br><span class=\"line\">    let a = 1</span><br><span class=\"line\">    console.log(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default f1 //当被引用时，默认就把f2传给他</span><br></pre></td></tr></table></figure><br>module_2.js代码如下：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f2() &#123;</span><br><span class=\"line\">    let b = 2</span><br><span class=\"line\">    console.log(b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default f2 </span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2、在app-js文件中引入module-1-js与module-2-js：\"><a href=\"#2、在app-js文件中引入module-1-js与module-2-js：\" class=\"headerlink\" title=\"2、在app.js文件中引入module_1.js与module_2.js：\"></a>2、在app.js文件中引入module_1.js与module_2.js：</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import module1 from &#x27;./module_1&#x27;</span><br><span class=\"line\">import module2 from &#x27;./module_2&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">module1()</span><br><span class=\"line\">module2() </span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"3、修改webpack-config-js文件部分代码如下：\"><a href=\"#3、修改webpack-config-js文件部分代码如下：\" class=\"headerlink\" title=\"3、修改webpack.config.js文件部分代码如下：\"></a>3、修改webpack.config.js文件部分代码如下：</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: &#x27;./src/js/app.js&#x27;,</span><br><span class=\"line\">output: &#123;</span><br><span class=\"line\">    filename: &#x27;main.js&#x27;,</span><br><span class=\"line\">    path: path.resolve(__dirname, &#x27;dist/js&#x27;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"4、执行-node-modules-bin-webpack-命令，查看dist目录下的main-js文件，\"><a href=\"#4、执行-node-modules-bin-webpack-命令，查看dist目录下的main-js文件，\" class=\"headerlink\" title=\"4、执行 ./node-modules/.bin/webpack  命令，查看dist目录下的main.js文件，\"></a>4、执行 ./node-modules/.bin/webpack  命令，查看dist目录下的main.js文件，</h2><p>module_1.js与module_2.js中的代码已经被引用。</p>\n<h1 id=\"四、引入scss并转换为浏览器可以识别的css\"><a href=\"#四、引入scss并转换为浏览器可以识别的css\" class=\"headerlink\" title=\"四、引入scss并转换为浏览器可以识别的css\"></a>四、引入scss并转换为浏览器可以识别的css</h1><h2 id=\"1、在src目录下新建css目录并创建main-scss文件，且代码如下：\"><a href=\"#1、在src目录下新建css目录并创建main-scss文件，且代码如下：\" class=\"headerlink\" title=\"1、在src目录下新建css目录并创建main.scss文件，且代码如下：\"></a>1、在src目录下新建css目录并创建main.scss文件，且代码如下：</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body &#123;</span><br><span class=\"line\">    background: gray;</span><br><span class=\"line\">    &gt;div &#123;</span><br><span class=\"line\">        padding: 20px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"2、在src目录下创建index-html文件并且复制到dist目录下，在index-html中引入main-js文件；\"><a href=\"#2、在src目录下创建index-html文件并且复制到dist目录下，在index-html中引入main-js文件；\" class=\"headerlink\" title=\"2、在src目录下创建index.html文件并且复制到dist目录下，在index.html中引入main.js文件；\"></a>2、在src目录下创建index.html文件并且复制到dist目录下，在index.html中引入main.js文件；</h2><h2 id=\"3、执行安装命令：\"><a href=\"#3、执行安装命令：\" class=\"headerlink\" title=\"3、执行安装命令：\"></a>3、执行安装命令：</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install sass-loader node-sass webpack --save-dev</span><br><span class=\"line\">npm install style-loader css-loader --save-dev</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"4、修改webpack-config-js部分代码如下：\"><a href=\"#4、修改webpack-config-js部分代码如下：\" class=\"headerlink\" title=\"4、修改webpack.config.js部分代码如下：\"></a>4、修改webpack.config.js部分代码如下：</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test: /\\.scss$/,</span><br><span class=\"line\">    use: [&#123;</span><br><span class=\"line\">            loader: &quot;style-loader&quot; // creates style nodes from JS strings</span><br><span class=\"line\">            &#125;, &#123;</span><br><span class=\"line\">                loader: &quot;css-loader&quot; // translates CSS into CommonJS</span><br><span class=\"line\">            &#125;, &#123;</span><br><span class=\"line\">                loader: &quot;sass-loader&quot; // compiles Sass to CSS</span><br><span class=\"line\">            &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"5、在app-js中引入main-scss文件：\"><a href=\"#5、在app-js中引入main-scss文件：\" class=\"headerlink\" title=\"5、在app.js中引入main.scss文件：\"></a>5、在app.js中引入main.scss文件：</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#x27;../css/main.scss&#x27;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"6、执行-node-modules-bin-webpack-命令，打开服务-http-server-c-1，\"><a href=\"#6、执行-node-modules-bin-webpack-命令，打开服务-http-server-c-1，\" class=\"headerlink\" title=\"6、执行 ./node-modules/.bin/webpack  命令，打开服务 http-server -c-1，\"></a>6、执行 ./node-modules/.bin/webpack  命令，打开服务 http-server -c-1，</h2><p>在浏览器中输入127.0.0.1:8080，打开控制台。在Elements下发现多出了一个style标签，内容为：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body&#123;</span><br><span class=\"line\">    background:grey;&#125;</span><br><span class=\"line\">body &gt; div&#123;</span><br><span class=\"line\">    padding:20px;&#125;</span><br></pre></td></tr></table></figure><br>scss文件成功传唤为浏览器可识别的css。</p>\n<h1 id=\"五、使用postcss-loader自动使css兼容\"><a href=\"#五、使用postcss-loader自动使css兼容\" class=\"headerlink\" title=\"五、使用postcss-loader自动使css兼容\"></a>五、使用postcss-loader自动使css兼容</h1><h2 id=\"1、执行安装命令：\"><a href=\"#1、执行安装命令：\" class=\"headerlink\" title=\"1、执行安装命令：\"></a>1、执行安装命令：</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D postcss-loader</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"2、在安装过程中可能会出错，这里遇到的问题是缺少了-postcss-cssnext，所以再安装这部分：\"><a href=\"#2、在安装过程中可能会出错，这里遇到的问题是缺少了-postcss-cssnext，所以再安装这部分：\" class=\"headerlink\" title=\"2、在安装过程中可能会出错，这里遇到的问题是缺少了 postcss-cssnext，所以再安装这部分：\"></a>2、在安装过程中可能会出错，这里遇到的问题是缺少了 postcss-cssnext，所以再安装这部分：</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i postcss-cssnext</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"3、在根目录下创建postcss-config-js文件，内容为：\"><a href=\"#3、在根目录下创建postcss-config-js文件，内容为：\" class=\"headerlink\" title=\"3、在根目录下创建postcss.config.js文件，内容为：\"></a>3、在根目录下创建postcss.config.js文件，内容为：</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    plugins: &#123;</span><br><span class=\"line\">        &#x27;postcss-cssnext&#x27;: &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"4、修改main-scss文件内容为：\"><a href=\"#4、修改main-scss文件内容为：\" class=\"headerlink\" title=\"4、修改main.scss文件内容为：\"></a>4、修改main.scss文件内容为：</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body&#123;</span><br><span class=\"line\">    display:flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"5、修改webpack-config-js部分代码如下：\"><a href=\"#5、修改webpack-config-js部分代码如下：\" class=\"headerlink\" title=\"5、修改webpack.config.js部分代码如下：\"></a>5、修改webpack.config.js部分代码如下：</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test: /\\.scss$/,</span><br><span class=\"line\">    use: [&#123;</span><br><span class=\"line\">            loader: &quot;style-loader&quot; // creates style nodes from JS strings</span><br><span class=\"line\">            &#125;, &#123;</span><br><span class=\"line\">                loader: &quot;css-loader&quot;, // translates CSS into CommonJS</span><br><span class=\"line\">                options: &#123; importLoaders: 1 &#125;</span><br><span class=\"line\">            &#125;, &#123;</span><br><span class=\"line\">                loader: &#x27;postcss-loader&#x27;</span><br><span class=\"line\">            &#125;, &#123;</span><br><span class=\"line\">                loader: &quot;sass-loader&quot; // compiles Sass to CSS</span><br><span class=\"line\">            &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"6、执行-node-modules-bin-webpack-命令，打开服务-http-server-c-1，-1\"><a href=\"#6、执行-node-modules-bin-webpack-命令，打开服务-http-server-c-1，-1\" class=\"headerlink\" title=\"6、执行 ./node-modules/.bin/webpack  命令，打开服务 http-server -c-1，\"></a>6、执行 ./node-modules/.bin/webpack  命令，打开服务 http-server -c-1，</h2><p>在浏览器中输入127.0.0.1:8080，打开控制台。style标签的内容为：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body&#123;</span><br><span class=\"line\">    display:-webkit-box;</span><br><span class=\"line\">    display:-ms-flexbox;</span><br><span class=\"line\">    display:flex;&#125;</span><br></pre></td></tr></table></figure><br>说明在打包过程中postcss-loader已经自动地将scss转换为兼容的css。</p>"},{"title":"判断JS数据类型的方法","date":"2018-08-09T16:25:37.000Z","_content":"\n在 ECMAScript 规范中，一共有7种数据类型，分别为：\nNumber、String、Boolean、Null、Undefined、Symbol、Object。\n其中Number、String、Boolean、Null、Undefined、Symbol为基本类型，Object为引用类型或称复杂类型。\n\n# 1、typeof\ntypeof 是一个操作符，右侧跟一个一元表达式，并返回这个表达式的数据类型。返回的结果用该类型的字符串(全小写字母)形式表示。如下:\n<!-- more -->\n    ````\n    typeof 123 //\"number\"\n    typeof '123' //\"string\"\n    typeof true //\"boolean\"\n    typeof undefined //\"undefined\"\n    typeof Symbol('123') //\"symbol\"\n    typeof {} //\"object\"\n    typeof function f(){} //\"function\"\n    typeof new Array() //\"object\"\n    typeof new Date() //\"object\"\n    ````\n所以，typeof的返回值有7种分别是：number、boolean、symbol、string、object、undefined、function 。\n需要注意的是null返回的是\"object\"，函数返回的是\"function\",其余均符合预期结果。\n\n# 2、instanceof\ninstanceof运算符返回一个布尔值(true/false)，表示对象是否为某个构造函数的实例。\n    ````\n    function A(){}\n    var a = new A()\n    a instanceof A //true\n    ````\n\n    ````\n    \"str\" instanceof String //false 字符串不是String对象的实例（因为字符串不是对象），//所以返回false。\n    ````\n需要注意的是instanceof运算符只能用于对象，不适用原始类型的值。\n此外instanceof检查整个原型链，因此同一个实例对象，可能会对多个构造函数都返回true。如：\n    ````\n    [] instanceof Array // true\n    [] instanceof Object //true\n    ````\n上述情况成立的原因是：[].__proto__.__proto__ === Object.prototype //true。\n其中[].__proto__ === Array.prototype //true,\nArray.prototype.__proto__ === Object.prototype//true\n\n# 3、toString方法\ntoString() 是 Object 的原型方法，这是一个内部属性，其格式为 [object Xxx] ，其中 Xxx 就是对象的类型。\n对于 Object 对象，直接调用 toString()  就能返回 [object Object] 。而对于其他对象，则需要通过 call / apply 来调用才能返回正确的类型信息。\n    ````\n    Object.prototype.toString.call(123) //\"[object Number]\"\n    Object.prototype.toString.call('123') //\"[object String]\"\n    Object.prototype.toString.call(true) //\"[object Boolean]\"\n    Object.prototype.toString.call(null) //\"[object Null]\"\n    Object.prototype.toString.call(undefined) //\"[object Undefined]\"\n    Object.prototype.toString.call(Symbol('123')) //\"[object Symbol]\"\n    Object.prototype.toString.call({}) //\"[object Object]\"\n    Object.prototype.toString.call([]) //\"[object Array]\"\n    Object.prototype.toString.call(function f(){}) //\"[object Function]\"\n    Object.prototype.toString.call(new Date()) //\"[object Date]\"\n    Object.prototype.toString.call(new RegExp()) //\"[object RegExp]\"\n    ````\n由此可见使用Object.prototype.toString.call()方法可返回正确的类型。\n在实际中可使用slice()方法截取所需要的值：\n    ````\n    Object.prototype.toString.call(function f(){}).slice(8,-1) //\"Function\"\n    Object.prototype.toString.call([]).slice(8,-1) // \"Array\"\n    Object.prototype.toString.call(true).slice(8,-1) //\"Boolean\"\n    ````  \n","source":"_posts/判断JS数据类型的方法.md","raw":"---\ntitle: 判断JS数据类型的方法\ndate: 2018-08-10 00:25:37\ntags: [\"typeof\", \"instanceof\", \"toString\"]\ncategories: JavaScript\n---\n\n在 ECMAScript 规范中，一共有7种数据类型，分别为：\nNumber、String、Boolean、Null、Undefined、Symbol、Object。\n其中Number、String、Boolean、Null、Undefined、Symbol为基本类型，Object为引用类型或称复杂类型。\n\n# 1、typeof\ntypeof 是一个操作符，右侧跟一个一元表达式，并返回这个表达式的数据类型。返回的结果用该类型的字符串(全小写字母)形式表示。如下:\n<!-- more -->\n    ````\n    typeof 123 //\"number\"\n    typeof '123' //\"string\"\n    typeof true //\"boolean\"\n    typeof undefined //\"undefined\"\n    typeof Symbol('123') //\"symbol\"\n    typeof {} //\"object\"\n    typeof function f(){} //\"function\"\n    typeof new Array() //\"object\"\n    typeof new Date() //\"object\"\n    ````\n所以，typeof的返回值有7种分别是：number、boolean、symbol、string、object、undefined、function 。\n需要注意的是null返回的是\"object\"，函数返回的是\"function\",其余均符合预期结果。\n\n# 2、instanceof\ninstanceof运算符返回一个布尔值(true/false)，表示对象是否为某个构造函数的实例。\n    ````\n    function A(){}\n    var a = new A()\n    a instanceof A //true\n    ````\n\n    ````\n    \"str\" instanceof String //false 字符串不是String对象的实例（因为字符串不是对象），//所以返回false。\n    ````\n需要注意的是instanceof运算符只能用于对象，不适用原始类型的值。\n此外instanceof检查整个原型链，因此同一个实例对象，可能会对多个构造函数都返回true。如：\n    ````\n    [] instanceof Array // true\n    [] instanceof Object //true\n    ````\n上述情况成立的原因是：[].__proto__.__proto__ === Object.prototype //true。\n其中[].__proto__ === Array.prototype //true,\nArray.prototype.__proto__ === Object.prototype//true\n\n# 3、toString方法\ntoString() 是 Object 的原型方法，这是一个内部属性，其格式为 [object Xxx] ，其中 Xxx 就是对象的类型。\n对于 Object 对象，直接调用 toString()  就能返回 [object Object] 。而对于其他对象，则需要通过 call / apply 来调用才能返回正确的类型信息。\n    ````\n    Object.prototype.toString.call(123) //\"[object Number]\"\n    Object.prototype.toString.call('123') //\"[object String]\"\n    Object.prototype.toString.call(true) //\"[object Boolean]\"\n    Object.prototype.toString.call(null) //\"[object Null]\"\n    Object.prototype.toString.call(undefined) //\"[object Undefined]\"\n    Object.prototype.toString.call(Symbol('123')) //\"[object Symbol]\"\n    Object.prototype.toString.call({}) //\"[object Object]\"\n    Object.prototype.toString.call([]) //\"[object Array]\"\n    Object.prototype.toString.call(function f(){}) //\"[object Function]\"\n    Object.prototype.toString.call(new Date()) //\"[object Date]\"\n    Object.prototype.toString.call(new RegExp()) //\"[object RegExp]\"\n    ````\n由此可见使用Object.prototype.toString.call()方法可返回正确的类型。\n在实际中可使用slice()方法截取所需要的值：\n    ````\n    Object.prototype.toString.call(function f(){}).slice(8,-1) //\"Function\"\n    Object.prototype.toString.call([]).slice(8,-1) // \"Array\"\n    Object.prototype.toString.call(true).slice(8,-1) //\"Boolean\"\n    ````  \n","slug":"判断JS数据类型的方法","published":1,"updated":"2021-06-09T06:17:47.299Z","_id":"ckpozdwlv0008xku0199n8230","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在 ECMAScript 规范中，一共有7种数据类型，分别为：<br>Number、String、Boolean、Null、Undefined、Symbol、Object。<br>其中Number、String、Boolean、Null、Undefined、Symbol为基本类型，Object为引用类型或称复杂类型。</p>\n<h1 id=\"1、typeof\"><a href=\"#1、typeof\" class=\"headerlink\" title=\"1、typeof\"></a>1、typeof</h1><p>typeof 是一个操作符，右侧跟一个一元表达式，并返回这个表达式的数据类型。返回的结果用该类型的字符串(全小写字母)形式表示。如下:</p>\n<span id=\"more\"></span>\n<pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typeof 123 //&quot;number&quot;</span><br><span class=\"line\">typeof &#x27;123&#x27; //&quot;string&quot;</span><br><span class=\"line\">typeof true //&quot;boolean&quot;</span><br><span class=\"line\">typeof undefined //&quot;undefined&quot;</span><br><span class=\"line\">typeof Symbol(&#x27;123&#x27;) //&quot;symbol&quot;</span><br><span class=\"line\">typeof &#123;&#125; //&quot;object&quot;</span><br><span class=\"line\">typeof function f()&#123;&#125; //&quot;function&quot;</span><br><span class=\"line\">typeof new Array() //&quot;object&quot;</span><br><span class=\"line\">typeof new Date() //&quot;object&quot;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<p>所以，typeof的返回值有7种分别是：number、boolean、symbol、string、object、undefined、function 。<br>需要注意的是null返回的是”object”，函数返回的是”function”,其余均符合预期结果。</p>\n<h1 id=\"2、instanceof\"><a href=\"#2、instanceof\" class=\"headerlink\" title=\"2、instanceof\"></a>2、instanceof</h1><p>instanceof运算符返回一个布尔值(true/false)，表示对象是否为某个构造函数的实例。<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function A()&#123;&#125;</span><br><span class=\"line\">var a = new A()</span><br><span class=\"line\">a instanceof A //true</span><br></pre></td></tr></table></figure></p>\n<pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;str&quot; instanceof String //false 字符串不是String对象的实例（因为字符串不是对象），//所以返回false。</span><br></pre></td></tr></table></figure>\n</code></pre>\n<p>需要注意的是instanceof运算符只能用于对象，不适用原始类型的值。<br>此外instanceof检查整个原型链，因此同一个实例对象，可能会对多个构造函数都返回true。如：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[] instanceof Array // true</span><br><span class=\"line\">[] instanceof Object //true</span><br></pre></td></tr></table></figure><br>上述情况成立的原因是：[].<strong>proto</strong>.<strong>proto</strong> === Object.prototype //true。<br>其中[].<strong>proto</strong> === Array.prototype //true,<br>Array.prototype.<strong>proto</strong> === Object.prototype//true</p>\n<h1 id=\"3、toString方法\"><a href=\"#3、toString方法\" class=\"headerlink\" title=\"3、toString方法\"></a>3、toString方法</h1><p>toString() 是 Object 的原型方法，这是一个内部属性，其格式为 [object Xxx] ，其中 Xxx 就是对象的类型。<br>对于 Object 对象，直接调用 toString()  就能返回 [object Object] 。而对于其他对象，则需要通过 call / apply 来调用才能返回正确的类型信息。<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.prototype.toString.call(123) //&quot;[object Number]&quot;</span><br><span class=\"line\">Object.prototype.toString.call(&#x27;123&#x27;) //&quot;[object String]&quot;</span><br><span class=\"line\">Object.prototype.toString.call(true) //&quot;[object Boolean]&quot;</span><br><span class=\"line\">Object.prototype.toString.call(null) //&quot;[object Null]&quot;</span><br><span class=\"line\">Object.prototype.toString.call(undefined) //&quot;[object Undefined]&quot;</span><br><span class=\"line\">Object.prototype.toString.call(Symbol(&#x27;123&#x27;)) //&quot;[object Symbol]&quot;</span><br><span class=\"line\">Object.prototype.toString.call(&#123;&#125;) //&quot;[object Object]&quot;</span><br><span class=\"line\">Object.prototype.toString.call([]) //&quot;[object Array]&quot;</span><br><span class=\"line\">Object.prototype.toString.call(function f()&#123;&#125;) //&quot;[object Function]&quot;</span><br><span class=\"line\">Object.prototype.toString.call(new Date()) //&quot;[object Date]&quot;</span><br><span class=\"line\">Object.prototype.toString.call(new RegExp()) //&quot;[object RegExp]&quot;</span><br></pre></td></tr></table></figure><br>由此可见使用Object.prototype.toString.call()方法可返回正确的类型。<br>在实际中可使用slice()方法截取所需要的值：<br>    <code>    Object.prototype.toString.call(function f()&#123;&#125;).slice(8,-1) //&quot;Function&quot;     Object.prototype.toString.call([]).slice(8,-1) // &quot;Array&quot;     Object.prototype.toString.call(true).slice(8,-1) //&quot;Boolean&quot;    </code>  </p>\n","site":{"data":{}},"excerpt":"<p>在 ECMAScript 规范中，一共有7种数据类型，分别为：<br>Number、String、Boolean、Null、Undefined、Symbol、Object。<br>其中Number、String、Boolean、Null、Undefined、Symbol为基本类型，Object为引用类型或称复杂类型。</p>\n<h1 id=\"1、typeof\"><a href=\"#1、typeof\" class=\"headerlink\" title=\"1、typeof\"></a>1、typeof</h1><p>typeof 是一个操作符，右侧跟一个一元表达式，并返回这个表达式的数据类型。返回的结果用该类型的字符串(全小写字母)形式表示。如下:</p>","more":"<pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typeof 123 //&quot;number&quot;</span><br><span class=\"line\">typeof &#x27;123&#x27; //&quot;string&quot;</span><br><span class=\"line\">typeof true //&quot;boolean&quot;</span><br><span class=\"line\">typeof undefined //&quot;undefined&quot;</span><br><span class=\"line\">typeof Symbol(&#x27;123&#x27;) //&quot;symbol&quot;</span><br><span class=\"line\">typeof &#123;&#125; //&quot;object&quot;</span><br><span class=\"line\">typeof function f()&#123;&#125; //&quot;function&quot;</span><br><span class=\"line\">typeof new Array() //&quot;object&quot;</span><br><span class=\"line\">typeof new Date() //&quot;object&quot;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<p>所以，typeof的返回值有7种分别是：number、boolean、symbol、string、object、undefined、function 。<br>需要注意的是null返回的是”object”，函数返回的是”function”,其余均符合预期结果。</p>\n<h1 id=\"2、instanceof\"><a href=\"#2、instanceof\" class=\"headerlink\" title=\"2、instanceof\"></a>2、instanceof</h1><p>instanceof运算符返回一个布尔值(true/false)，表示对象是否为某个构造函数的实例。<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function A()&#123;&#125;</span><br><span class=\"line\">var a = new A()</span><br><span class=\"line\">a instanceof A //true</span><br></pre></td></tr></table></figure></p>\n<pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;str&quot; instanceof String //false 字符串不是String对象的实例（因为字符串不是对象），//所以返回false。</span><br></pre></td></tr></table></figure>\n</code></pre>\n<p>需要注意的是instanceof运算符只能用于对象，不适用原始类型的值。<br>此外instanceof检查整个原型链，因此同一个实例对象，可能会对多个构造函数都返回true。如：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[] instanceof Array // true</span><br><span class=\"line\">[] instanceof Object //true</span><br></pre></td></tr></table></figure><br>上述情况成立的原因是：[].<strong>proto</strong>.<strong>proto</strong> === Object.prototype //true。<br>其中[].<strong>proto</strong> === Array.prototype //true,<br>Array.prototype.<strong>proto</strong> === Object.prototype//true</p>\n<h1 id=\"3、toString方法\"><a href=\"#3、toString方法\" class=\"headerlink\" title=\"3、toString方法\"></a>3、toString方法</h1><p>toString() 是 Object 的原型方法，这是一个内部属性，其格式为 [object Xxx] ，其中 Xxx 就是对象的类型。<br>对于 Object 对象，直接调用 toString()  就能返回 [object Object] 。而对于其他对象，则需要通过 call / apply 来调用才能返回正确的类型信息。<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.prototype.toString.call(123) //&quot;[object Number]&quot;</span><br><span class=\"line\">Object.prototype.toString.call(&#x27;123&#x27;) //&quot;[object String]&quot;</span><br><span class=\"line\">Object.prototype.toString.call(true) //&quot;[object Boolean]&quot;</span><br><span class=\"line\">Object.prototype.toString.call(null) //&quot;[object Null]&quot;</span><br><span class=\"line\">Object.prototype.toString.call(undefined) //&quot;[object Undefined]&quot;</span><br><span class=\"line\">Object.prototype.toString.call(Symbol(&#x27;123&#x27;)) //&quot;[object Symbol]&quot;</span><br><span class=\"line\">Object.prototype.toString.call(&#123;&#125;) //&quot;[object Object]&quot;</span><br><span class=\"line\">Object.prototype.toString.call([]) //&quot;[object Array]&quot;</span><br><span class=\"line\">Object.prototype.toString.call(function f()&#123;&#125;) //&quot;[object Function]&quot;</span><br><span class=\"line\">Object.prototype.toString.call(new Date()) //&quot;[object Date]&quot;</span><br><span class=\"line\">Object.prototype.toString.call(new RegExp()) //&quot;[object RegExp]&quot;</span><br></pre></td></tr></table></figure><br>由此可见使用Object.prototype.toString.call()方法可返回正确的类型。<br>在实际中可使用slice()方法截取所需要的值：<br>    <code>    Object.prototype.toString.call(function f()&#123;&#125;).slice(8,-1) //&quot;Function&quot;     Object.prototype.toString.call([]).slice(8,-1) // &quot;Array&quot;     Object.prototype.toString.call(true).slice(8,-1) //&quot;Boolean&quot;    </code>  </p>"},{"title":"封装一个全局函数","date":"2018-05-19T01:59:39.000Z","_content":"# 1、封装一个全局函数用以操作html元素。\n## (1)html部分代码如下：\n    ````\n    <div>Hello</div>\n    <div>Hello</div>\n    <div>Hello</div>\n    ````\n在页面上创建三个div元素，文本内容Hello、\n\n## (2)css部分代码如下：\n<!-- more -->\n    ````\n    .red{\n    color:red;\n    }\n    ````\n## (3)JS代码如下：\n    ````\n    window.$ = function(node){\n\n    let nodes = document.querySelectorAll(node);\n  \n    nodes.addClass = function(classes){\n    for(let i = 0;i<nodes.length;i++)\n      nodes[i].classList.add(classes);\n    }\n  \n    nodes.setText = function(text){\n    for(let i = 0;i<nodes.length;i++)\n      nodes[i].textContent = text;\n    }\n    return nodes;\n \n    }\n    ````\n\n# 2、调用该函数\n    ````\n    var $div = $('div');  \n    $div.addClass('red');  //为div元素添加上\"red\"类\n    $div.setText('hi');    //将div文本内容置为hi\n    ````\n\n执行上述代码使得所有div元素文本内容变为红色且文本内容变为hi。\n上述代码首先通过API  document.querySelectorAll()返回一个对象获得所有div元素，\n然后add()方法和textContent属性分别为div元素加上\"red\"类名和替换文本内容为hi。\n\ndocument.querySelectorAll()不仅可以接受标签名(如div、span等等)，也可以接受选择器。\n如果将html部分代码改为\n    ````\n    <div id = \"id\">Hello</div>\n    <div>Hello</div>\n    <div>Hello</div>\n    ````\n在调用函数时改为\n    ````\n    var $div = $('#id');  \n    $div.addClass('red');  \n    $div.setText('hi');   \n    ````\n则只会改变第一个div的文本内容与颜色。\n\n当然，也可以为不同的div加上不同的class、不同的文本内容；\n先添加一些颜色以备后用，css部分代码如下：\n    ````\n    .red{color:red;}\n    .blue{color:blue;}\n    .green{color:green;}\n    ````\n\nJS部分代码也要做出相应调整，JS部分代码如下：\n    ````\n    window.$ = function(node){\n\n    let nodes = document.querySelectorAll(node);\n  \n    nodes.addClass = function(classes){\n    for(let i = 0;i<nodes.length;i++)\n      nodes[i].classList.add(classes[i]);\n    }\n  \n    nodes.setText = function(text){\n    for(let i = 0;i<nodes.length;i++)\n      nodes[i].textContent = text[i];\n    }\n    return nodes;\n \n}\n    ````\n\n在调用函数通过传入classes数组以及text数值，实现为不同的div加上不同的class、不同的文本内容：\n    ````\n    var $div = $('div');  \n    $div.addClass([\"red\",\"blue\",\"green\"]);  \n    $div.setText([\"你\",\"我\",\"他\"]);   \n    ````\n显示的就是不同的div有着不同的内容与颜色。\n\n\n","source":"_posts/封装一个全局函数.md","raw":"---\ntitle: 封装一个全局函数\ndate: 2018-05-19 09:59:39\ntags: function\ncategories: JavaScript\n---\n# 1、封装一个全局函数用以操作html元素。\n## (1)html部分代码如下：\n    ````\n    <div>Hello</div>\n    <div>Hello</div>\n    <div>Hello</div>\n    ````\n在页面上创建三个div元素，文本内容Hello、\n\n## (2)css部分代码如下：\n<!-- more -->\n    ````\n    .red{\n    color:red;\n    }\n    ````\n## (3)JS代码如下：\n    ````\n    window.$ = function(node){\n\n    let nodes = document.querySelectorAll(node);\n  \n    nodes.addClass = function(classes){\n    for(let i = 0;i<nodes.length;i++)\n      nodes[i].classList.add(classes);\n    }\n  \n    nodes.setText = function(text){\n    for(let i = 0;i<nodes.length;i++)\n      nodes[i].textContent = text;\n    }\n    return nodes;\n \n    }\n    ````\n\n# 2、调用该函数\n    ````\n    var $div = $('div');  \n    $div.addClass('red');  //为div元素添加上\"red\"类\n    $div.setText('hi');    //将div文本内容置为hi\n    ````\n\n执行上述代码使得所有div元素文本内容变为红色且文本内容变为hi。\n上述代码首先通过API  document.querySelectorAll()返回一个对象获得所有div元素，\n然后add()方法和textContent属性分别为div元素加上\"red\"类名和替换文本内容为hi。\n\ndocument.querySelectorAll()不仅可以接受标签名(如div、span等等)，也可以接受选择器。\n如果将html部分代码改为\n    ````\n    <div id = \"id\">Hello</div>\n    <div>Hello</div>\n    <div>Hello</div>\n    ````\n在调用函数时改为\n    ````\n    var $div = $('#id');  \n    $div.addClass('red');  \n    $div.setText('hi');   \n    ````\n则只会改变第一个div的文本内容与颜色。\n\n当然，也可以为不同的div加上不同的class、不同的文本内容；\n先添加一些颜色以备后用，css部分代码如下：\n    ````\n    .red{color:red;}\n    .blue{color:blue;}\n    .green{color:green;}\n    ````\n\nJS部分代码也要做出相应调整，JS部分代码如下：\n    ````\n    window.$ = function(node){\n\n    let nodes = document.querySelectorAll(node);\n  \n    nodes.addClass = function(classes){\n    for(let i = 0;i<nodes.length;i++)\n      nodes[i].classList.add(classes[i]);\n    }\n  \n    nodes.setText = function(text){\n    for(let i = 0;i<nodes.length;i++)\n      nodes[i].textContent = text[i];\n    }\n    return nodes;\n \n}\n    ````\n\n在调用函数通过传入classes数组以及text数值，实现为不同的div加上不同的class、不同的文本内容：\n    ````\n    var $div = $('div');  \n    $div.addClass([\"red\",\"blue\",\"green\"]);  \n    $div.setText([\"你\",\"我\",\"他\"]);   \n    ````\n显示的就是不同的div有着不同的内容与颜色。\n\n\n","slug":"封装一个全局函数","published":1,"updated":"2021-06-09T06:27:06.828Z","_id":"ckpozdwlw0009xku04hl4dzcz","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"1、封装一个全局函数用以操作html元素。\"><a href=\"#1、封装一个全局函数用以操作html元素。\" class=\"headerlink\" title=\"1、封装一个全局函数用以操作html元素。\"></a>1、封装一个全局函数用以操作html元素。</h1><h2 id=\"1-html部分代码如下：\"><a href=\"#1-html部分代码如下：\" class=\"headerlink\" title=\"(1)html部分代码如下：\"></a>(1)html部分代码如下：</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;Hello&lt;/div&gt;</span><br><span class=\"line\">&lt;div&gt;Hello&lt;/div&gt;</span><br><span class=\"line\">&lt;div&gt;Hello&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<p>在页面上创建三个div元素，文本内容Hello、</p>\n<h2 id=\"2-css部分代码如下：\"><a href=\"#2-css部分代码如下：\" class=\"headerlink\" title=\"(2)css部分代码如下：\"></a>(2)css部分代码如下：</h2><span id=\"more\"></span>\n<pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.red&#123;</span><br><span class=\"line\">color:red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"3-JS代码如下：\"><a href=\"#3-JS代码如下：\" class=\"headerlink\" title=\"(3)JS代码如下：\"></a>(3)JS代码如下：</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.$ = function(node)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">let nodes = document.querySelectorAll(node);</span><br><span class=\"line\">  </span><br><span class=\"line\">nodes.addClass = function(classes)&#123;</span><br><span class=\"line\">for(let i = 0;i&lt;nodes.length;i++)</span><br><span class=\"line\">  nodes[i].classList.add(classes);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">nodes.setText = function(text)&#123;</span><br><span class=\"line\">for(let i = 0;i&lt;nodes.length;i++)</span><br><span class=\"line\">  nodes[i].textContent = text;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return nodes;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h1 id=\"2、调用该函数\"><a href=\"#2、调用该函数\" class=\"headerlink\" title=\"2、调用该函数\"></a>2、调用该函数</h1><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var $div = $(&#x27;div&#x27;);  </span><br><span class=\"line\">$div.addClass(&#x27;red&#x27;);  //为div元素添加上&quot;red&quot;类</span><br><span class=\"line\">$div.setText(&#x27;hi&#x27;);    //将div文本内容置为hi</span><br></pre></td></tr></table></figure>\n</code></pre>\n<p>执行上述代码使得所有div元素文本内容变为红色且文本内容变为hi。<br>上述代码首先通过API  document.querySelectorAll()返回一个对象获得所有div元素，<br>然后add()方法和textContent属性分别为div元素加上”red”类名和替换文本内容为hi。</p>\n<p>document.querySelectorAll()不仅可以接受标签名(如div、span等等)，也可以接受选择器。<br>如果将html部分代码改为<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id = &quot;id&quot;&gt;Hello&lt;/div&gt;</span><br><span class=\"line\">&lt;div&gt;Hello&lt;/div&gt;</span><br><span class=\"line\">&lt;div&gt;Hello&lt;/div&gt;</span><br></pre></td></tr></table></figure><br>在调用函数时改为<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var $div = $(&#x27;#id&#x27;);  </span><br><span class=\"line\">$div.addClass(&#x27;red&#x27;);  </span><br><span class=\"line\">$div.setText(&#x27;hi&#x27;);   </span><br></pre></td></tr></table></figure><br>则只会改变第一个div的文本内容与颜色。</p>\n<p>当然，也可以为不同的div加上不同的class、不同的文本内容；<br>先添加一些颜色以备后用，css部分代码如下：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.red&#123;color:red;&#125;</span><br><span class=\"line\">.blue&#123;color:blue;&#125;</span><br><span class=\"line\">.green&#123;color:green;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>JS部分代码也要做出相应调整，JS部分代码如下：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    window.$ = function(node)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    let nodes = document.querySelectorAll(node);</span><br><span class=\"line\">  </span><br><span class=\"line\">    nodes.addClass = function(classes)&#123;</span><br><span class=\"line\">    for(let i = 0;i&lt;nodes.length;i++)</span><br><span class=\"line\">      nodes[i].classList.add(classes[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    nodes.setText = function(text)&#123;</span><br><span class=\"line\">    for(let i = 0;i&lt;nodes.length;i++)</span><br><span class=\"line\">      nodes[i].textContent = text[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return nodes;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在调用函数通过传入classes数组以及text数值，实现为不同的div加上不同的class、不同的文本内容：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var $div = $(&#x27;div&#x27;);  </span><br><span class=\"line\">$div.addClass([&quot;red&quot;,&quot;blue&quot;,&quot;green&quot;]);  </span><br><span class=\"line\">$div.setText([&quot;你&quot;,&quot;我&quot;,&quot;他&quot;]);   </span><br></pre></td></tr></table></figure><br>显示的就是不同的div有着不同的内容与颜色。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"1、封装一个全局函数用以操作html元素。\"><a href=\"#1、封装一个全局函数用以操作html元素。\" class=\"headerlink\" title=\"1、封装一个全局函数用以操作html元素。\"></a>1、封装一个全局函数用以操作html元素。</h1><h2 id=\"1-html部分代码如下：\"><a href=\"#1-html部分代码如下：\" class=\"headerlink\" title=\"(1)html部分代码如下：\"></a>(1)html部分代码如下：</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;Hello&lt;/div&gt;</span><br><span class=\"line\">&lt;div&gt;Hello&lt;/div&gt;</span><br><span class=\"line\">&lt;div&gt;Hello&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<p>在页面上创建三个div元素，文本内容Hello、</p>\n<h2 id=\"2-css部分代码如下：\"><a href=\"#2-css部分代码如下：\" class=\"headerlink\" title=\"(2)css部分代码如下：\"></a>(2)css部分代码如下：</h2>","more":"<pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.red&#123;</span><br><span class=\"line\">color:red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"3-JS代码如下：\"><a href=\"#3-JS代码如下：\" class=\"headerlink\" title=\"(3)JS代码如下：\"></a>(3)JS代码如下：</h2><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.$ = function(node)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">let nodes = document.querySelectorAll(node);</span><br><span class=\"line\">  </span><br><span class=\"line\">nodes.addClass = function(classes)&#123;</span><br><span class=\"line\">for(let i = 0;i&lt;nodes.length;i++)</span><br><span class=\"line\">  nodes[i].classList.add(classes);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">nodes.setText = function(text)&#123;</span><br><span class=\"line\">for(let i = 0;i&lt;nodes.length;i++)</span><br><span class=\"line\">  nodes[i].textContent = text;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return nodes;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h1 id=\"2、调用该函数\"><a href=\"#2、调用该函数\" class=\"headerlink\" title=\"2、调用该函数\"></a>2、调用该函数</h1><pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var $div = $(&#x27;div&#x27;);  </span><br><span class=\"line\">$div.addClass(&#x27;red&#x27;);  //为div元素添加上&quot;red&quot;类</span><br><span class=\"line\">$div.setText(&#x27;hi&#x27;);    //将div文本内容置为hi</span><br></pre></td></tr></table></figure>\n</code></pre>\n<p>执行上述代码使得所有div元素文本内容变为红色且文本内容变为hi。<br>上述代码首先通过API  document.querySelectorAll()返回一个对象获得所有div元素，<br>然后add()方法和textContent属性分别为div元素加上”red”类名和替换文本内容为hi。</p>\n<p>document.querySelectorAll()不仅可以接受标签名(如div、span等等)，也可以接受选择器。<br>如果将html部分代码改为<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id = &quot;id&quot;&gt;Hello&lt;/div&gt;</span><br><span class=\"line\">&lt;div&gt;Hello&lt;/div&gt;</span><br><span class=\"line\">&lt;div&gt;Hello&lt;/div&gt;</span><br></pre></td></tr></table></figure><br>在调用函数时改为<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var $div = $(&#x27;#id&#x27;);  </span><br><span class=\"line\">$div.addClass(&#x27;red&#x27;);  </span><br><span class=\"line\">$div.setText(&#x27;hi&#x27;);   </span><br></pre></td></tr></table></figure><br>则只会改变第一个div的文本内容与颜色。</p>\n<p>当然，也可以为不同的div加上不同的class、不同的文本内容；<br>先添加一些颜色以备后用，css部分代码如下：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.red&#123;color:red;&#125;</span><br><span class=\"line\">.blue&#123;color:blue;&#125;</span><br><span class=\"line\">.green&#123;color:green;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>JS部分代码也要做出相应调整，JS部分代码如下：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    window.$ = function(node)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    let nodes = document.querySelectorAll(node);</span><br><span class=\"line\">  </span><br><span class=\"line\">    nodes.addClass = function(classes)&#123;</span><br><span class=\"line\">    for(let i = 0;i&lt;nodes.length;i++)</span><br><span class=\"line\">      nodes[i].classList.add(classes[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    nodes.setText = function(text)&#123;</span><br><span class=\"line\">    for(let i = 0;i&lt;nodes.length;i++)</span><br><span class=\"line\">      nodes[i].textContent = text[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return nodes;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在调用函数通过传入classes数组以及text数值，实现为不同的div加上不同的class、不同的文本内容：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var $div = $(&#x27;div&#x27;);  </span><br><span class=\"line\">$div.addClass([&quot;red&quot;,&quot;blue&quot;,&quot;green&quot;]);  </span><br><span class=\"line\">$div.setText([&quot;你&quot;,&quot;我&quot;,&quot;他&quot;]);   </span><br></pre></td></tr></table></figure><br>显示的就是不同的div有着不同的内容与颜色。</p>"},{"title":"搭建Hexo个人博客","date":"2018-05-03T06:12:41.000Z","_content":"一、搭建前准备工作\n1、git安装；\n2、node.js安装；\n3、GitHub账户注册与配置；\n4、创建一个新仓库（wuwenxing0912.github.io）--不需要输入“...or create a new repository on the command line”下的命令；\n5、生成SSH key远程连接GitHub仓库。\n二、使用Hexo搭建博客\n1、使用命令 'npm install -g hexo-cli'，安装 Hexo；\n2、初始化目录myBlog 'hexo init myBlog'，安装模块 'npm i';\n3、新建md文件编写个人博客 'hexo new 开博大吉'；\n4、修改博客网站配置  'start _config.yml'，将Hexo与新建GitHub仓库（wuwenxing0912.github,io） 关联起来；\n5、安装git部署插件，'npm install hexo-deployer-git --save'；\n6、加载配置 'hexo deploy'；\n7、进入wuwenxing0912.github.io仓库的settings，打开 GitHub Pages 功能，点击链接进入个人博客；\n三、搭建环节出现的问题\n1、在创建新仓库之后输入了“...or create a new repository on the command line”下的命令初始化仓库导致搭建失败；\n2、配置文件_config.yml中的最后两行type：以及repo:后未加空格导致搭建失败。\n","source":"_posts/搭建Hexo个人博客.md","raw":"---\ntitle: 搭建Hexo个人博客\ndate: 2018-05-03 14:12:41\ntags:\n---\n一、搭建前准备工作\n1、git安装；\n2、node.js安装；\n3、GitHub账户注册与配置；\n4、创建一个新仓库（wuwenxing0912.github.io）--不需要输入“...or create a new repository on the command line”下的命令；\n5、生成SSH key远程连接GitHub仓库。\n二、使用Hexo搭建博客\n1、使用命令 'npm install -g hexo-cli'，安装 Hexo；\n2、初始化目录myBlog 'hexo init myBlog'，安装模块 'npm i';\n3、新建md文件编写个人博客 'hexo new 开博大吉'；\n4、修改博客网站配置  'start _config.yml'，将Hexo与新建GitHub仓库（wuwenxing0912.github,io） 关联起来；\n5、安装git部署插件，'npm install hexo-deployer-git --save'；\n6、加载配置 'hexo deploy'；\n7、进入wuwenxing0912.github.io仓库的settings，打开 GitHub Pages 功能，点击链接进入个人博客；\n三、搭建环节出现的问题\n1、在创建新仓库之后输入了“...or create a new repository on the command line”下的命令初始化仓库导致搭建失败；\n2、配置文件_config.yml中的最后两行type：以及repo:后未加空格导致搭建失败。\n","slug":"搭建Hexo个人博客","published":1,"updated":"2018-05-03T06:14:24.452Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpozdwlx000axku0777bbvb7","content":"<p>一、搭建前准备工作<br>1、git安装；<br>2、node.js安装；<br>3、GitHub账户注册与配置；<br>4、创建一个新仓库（wuwenxing0912.github.io）–不需要输入“…or create a new repository on the command line”下的命令；<br>5、生成SSH key远程连接GitHub仓库。<br>二、使用Hexo搭建博客<br>1、使用命令 ‘npm install -g hexo-cli’，安装 Hexo；<br>2、初始化目录myBlog ‘hexo init myBlog’，安装模块 ‘npm i’;<br>3、新建md文件编写个人博客 ‘hexo new 开博大吉’；<br>4、修改博客网站配置  ‘start _config.yml’，将Hexo与新建GitHub仓库（wuwenxing0912.github,io） 关联起来；<br>5、安装git部署插件，’npm install hexo-deployer-git –save’；<br>6、加载配置 ‘hexo deploy’；<br>7、进入wuwenxing0912.github.io仓库的settings，打开 GitHub Pages 功能，点击链接进入个人博客；<br>三、搭建环节出现的问题<br>1、在创建新仓库之后输入了“…or create a new repository on the command line”下的命令初始化仓库导致搭建失败；<br>2、配置文件_config.yml中的最后两行type：以及repo:后未加空格导致搭建失败。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>一、搭建前准备工作<br>1、git安装；<br>2、node.js安装；<br>3、GitHub账户注册与配置；<br>4、创建一个新仓库（wuwenxing0912.github.io）–不需要输入“…or create a new repository on the command line”下的命令；<br>5、生成SSH key远程连接GitHub仓库。<br>二、使用Hexo搭建博客<br>1、使用命令 ‘npm install -g hexo-cli’，安装 Hexo；<br>2、初始化目录myBlog ‘hexo init myBlog’，安装模块 ‘npm i’;<br>3、新建md文件编写个人博客 ‘hexo new 开博大吉’；<br>4、修改博客网站配置  ‘start _config.yml’，将Hexo与新建GitHub仓库（wuwenxing0912.github,io） 关联起来；<br>5、安装git部署插件，’npm install hexo-deployer-git –save’；<br>6、加载配置 ‘hexo deploy’；<br>7、进入wuwenxing0912.github.io仓库的settings，打开 GitHub Pages 功能，点击链接进入个人博客；<br>三、搭建环节出现的问题<br>1、在创建新仓库之后输入了“…or create a new repository on the command line”下的命令初始化仓库导致搭建失败；<br>2、配置文件_config.yml中的最后两行type：以及repo:后未加空格导致搭建失败。</p>\n"},{"title":"空标签","date":"2018-05-03T06:16:28.000Z","_content":"一个空元素（empty element）可能是 HTML，SVG，或者 MathML 里的一个不可能存在子节点（例如内嵌的元素或者元素内的文本）的element。\n\nHTML，SVG 和 MathML 的规范都详细定义了每个元素能包含的具体内容（define very precisely what each element can contain）。许多组合是没有任何语义含义的，比如一个 &lt;audio&gt;元素嵌套在一个&lt;hr&gt; 元素里。\n\n在 HTML 中，通常在一个空元素上使用一个闭标签是无效的。例如， &lt;input type=\"text\"&gt;&lt;/input&gt; 的闭标签是无效的 HTML。\n\n在 HTML 中有以下这些空元素：\n&lt;area&gt;、&lt;base&gt;、&lt;br&gt;、&lt;col&gt;、&lt;command&gt;、&lt;embed&gt;、&lt;hr&gt;、&lt;img&gt;、&lt;input&gt;、&lt;keygen&gt;、&lt;link&gt;、&lt;meta&gt;、&lt;param&gt;、&lt;source&gt;、&lt;track&gt;、&lt;wbr&gt;等等。\n","source":"_posts/空标签.md","raw":"---\ntitle: 空标签\ndate: 2018-05-03 14:16:28\ntags:\n---\n一个空元素（empty element）可能是 HTML，SVG，或者 MathML 里的一个不可能存在子节点（例如内嵌的元素或者元素内的文本）的element。\n\nHTML，SVG 和 MathML 的规范都详细定义了每个元素能包含的具体内容（define very precisely what each element can contain）。许多组合是没有任何语义含义的，比如一个 &lt;audio&gt;元素嵌套在一个&lt;hr&gt; 元素里。\n\n在 HTML 中，通常在一个空元素上使用一个闭标签是无效的。例如， &lt;input type=\"text\"&gt;&lt;/input&gt; 的闭标签是无效的 HTML。\n\n在 HTML 中有以下这些空元素：\n&lt;area&gt;、&lt;base&gt;、&lt;br&gt;、&lt;col&gt;、&lt;command&gt;、&lt;embed&gt;、&lt;hr&gt;、&lt;img&gt;、&lt;input&gt;、&lt;keygen&gt;、&lt;link&gt;、&lt;meta&gt;、&lt;param&gt;、&lt;source&gt;、&lt;track&gt;、&lt;wbr&gt;等等。\n","slug":"空标签","published":1,"updated":"2018-05-03T06:17:14.016Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpozdwlz000cxku03lynamzl","content":"<p>一个空元素（empty element）可能是 HTML，SVG，或者 MathML 里的一个不可能存在子节点（例如内嵌的元素或者元素内的文本）的element。</p>\n<p>HTML，SVG 和 MathML 的规范都详细定义了每个元素能包含的具体内容（define very precisely what each element can contain）。许多组合是没有任何语义含义的，比如一个 &lt;audio&gt;元素嵌套在一个&lt;hr&gt; 元素里。</p>\n<p>在 HTML 中，通常在一个空元素上使用一个闭标签是无效的。例如， &lt;input type=”text”&gt;&lt;/input&gt; 的闭标签是无效的 HTML。</p>\n<p>在 HTML 中有以下这些空元素：<br>&lt;area&gt;、&lt;base&gt;、&lt;br&gt;、&lt;col&gt;、&lt;command&gt;、&lt;embed&gt;、&lt;hr&gt;、&lt;img&gt;、&lt;input&gt;、&lt;keygen&gt;、&lt;link&gt;、&lt;meta&gt;、&lt;param&gt;、&lt;source&gt;、&lt;track&gt;、&lt;wbr&gt;等等。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>一个空元素（empty element）可能是 HTML，SVG，或者 MathML 里的一个不可能存在子节点（例如内嵌的元素或者元素内的文本）的element。</p>\n<p>HTML，SVG 和 MathML 的规范都详细定义了每个元素能包含的具体内容（define very precisely what each element can contain）。许多组合是没有任何语义含义的，比如一个 &lt;audio&gt;元素嵌套在一个&lt;hr&gt; 元素里。</p>\n<p>在 HTML 中，通常在一个空元素上使用一个闭标签是无效的。例如， &lt;input type=”text”&gt;&lt;/input&gt; 的闭标签是无效的 HTML。</p>\n<p>在 HTML 中有以下这些空元素：<br>&lt;area&gt;、&lt;base&gt;、&lt;br&gt;、&lt;col&gt;、&lt;command&gt;、&lt;embed&gt;、&lt;hr&gt;、&lt;img&gt;、&lt;input&gt;、&lt;keygen&gt;、&lt;link&gt;、&lt;meta&gt;、&lt;param&gt;、&lt;source&gt;、&lt;track&gt;、&lt;wbr&gt;等等。</p>\n"},{"title":"闭包","date":"2018-06-20T15:24:10.000Z","_content":"\n# 1、闭包的概念\n根据MDN的定义：闭包(closure)是函数和声明该函数的词法环境(词法作用域)的组合。\n其中词法作用域是指代码编写时变量所处的作用域。\n在ES5中有两种作用域：全局作用域和函数作用域。\n函数内部可以直接读取全局变量：\n    ````\n    var a = 1\n    function f(){\n    console.log(a)\n    }\n    f()//控制台输出结果为 1\n    ````\n但是函数外部不能获取函数内部的变量：\n<!-- more -->\n    ````\n    function f(){\n    var a = 1\n    }\n    console.log(a)//控制台报错：a is not defined\n    ````\n如果想获取函数内部的变量，可以在函数内部再声明一个函数：\n    ````\n    function f(){\n      var a = 1\n       function f1(){\n         console.log(a)\n       }\n      return f1\n    }\n    var fn = f()\n    fn()//控制台输出结果为 1\n    ````\n上面代码中，函数f的返回值是函数f1，因为函数f1可以获取其声明所在的作用域(即函数f内部作用域)中的a，\n因此可以在函数外部获取函数内部变量。\n而函数f1就是闭包，所以可以简单的把闭包理解为“函数内部的函数”。\n\n# 2、循环创建闭包的一个问题\nhtml部分代码：\n    ````\n    <ul>\n      <li>第1个</li>\n      <li>第2个</li>\n      <li>第3个</li>\n      <li>第4个</li>\n      <li>第5个</li>\n      <li>第6个</li>\n    </ul>\n    ````\nJavaScript部分代码：\n    ````\n    function clickList(){\n        var liList = document.querySelectorAll('li')\n        for(var i = 0;i<liList.length;i++){\n               liList[i].onclick = function(){\n               console.log(i + 1)\n               }\n        }\n    }\n    clickList()\n    ````\n当点击列表时发现，无论点击哪一个控制台输出都是 7。\n原因是赋值给onclick的是闭包，这六个闭包在循环中被创建，但他们共享了同一个词法作用域。\n由于循环在事件触发之前已经执行完毕，所以i的值已经为7了。\n解决的一种办法就是使用let：\n    ````\n    function clickList(){\n        var liList = document.querySelectorAll('li')\n        for(let i = 0;i<liList.length;i++){\n               liList[i].onclick = function(){\n               console.log(i + 1)\n               }\n        }\n    }\n    clickList()\n    ````\n这样就使得每个闭包都绑定一个块级作用域，从而在点击列表时得到对应的值。","source":"_posts/闭包.md","raw":"---\ntitle: 闭包\ndate: 2018-06-20 23:24:10\ntags: [\"function\", \"Closure\"]\ncategories: JavaScript\n---\n\n# 1、闭包的概念\n根据MDN的定义：闭包(closure)是函数和声明该函数的词法环境(词法作用域)的组合。\n其中词法作用域是指代码编写时变量所处的作用域。\n在ES5中有两种作用域：全局作用域和函数作用域。\n函数内部可以直接读取全局变量：\n    ````\n    var a = 1\n    function f(){\n    console.log(a)\n    }\n    f()//控制台输出结果为 1\n    ````\n但是函数外部不能获取函数内部的变量：\n<!-- more -->\n    ````\n    function f(){\n    var a = 1\n    }\n    console.log(a)//控制台报错：a is not defined\n    ````\n如果想获取函数内部的变量，可以在函数内部再声明一个函数：\n    ````\n    function f(){\n      var a = 1\n       function f1(){\n         console.log(a)\n       }\n      return f1\n    }\n    var fn = f()\n    fn()//控制台输出结果为 1\n    ````\n上面代码中，函数f的返回值是函数f1，因为函数f1可以获取其声明所在的作用域(即函数f内部作用域)中的a，\n因此可以在函数外部获取函数内部变量。\n而函数f1就是闭包，所以可以简单的把闭包理解为“函数内部的函数”。\n\n# 2、循环创建闭包的一个问题\nhtml部分代码：\n    ````\n    <ul>\n      <li>第1个</li>\n      <li>第2个</li>\n      <li>第3个</li>\n      <li>第4个</li>\n      <li>第5个</li>\n      <li>第6个</li>\n    </ul>\n    ````\nJavaScript部分代码：\n    ````\n    function clickList(){\n        var liList = document.querySelectorAll('li')\n        for(var i = 0;i<liList.length;i++){\n               liList[i].onclick = function(){\n               console.log(i + 1)\n               }\n        }\n    }\n    clickList()\n    ````\n当点击列表时发现，无论点击哪一个控制台输出都是 7。\n原因是赋值给onclick的是闭包，这六个闭包在循环中被创建，但他们共享了同一个词法作用域。\n由于循环在事件触发之前已经执行完毕，所以i的值已经为7了。\n解决的一种办法就是使用let：\n    ````\n    function clickList(){\n        var liList = document.querySelectorAll('li')\n        for(let i = 0;i<liList.length;i++){\n               liList[i].onclick = function(){\n               console.log(i + 1)\n               }\n        }\n    }\n    clickList()\n    ````\n这样就使得每个闭包都绑定一个块级作用域，从而在点击列表时得到对应的值。","slug":"闭包","published":1,"updated":"2021-06-09T06:30:46.579Z","_id":"ckpozdwm0000dxku05lh19nzu","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"1、闭包的概念\"><a href=\"#1、闭包的概念\" class=\"headerlink\" title=\"1、闭包的概念\"></a>1、闭包的概念</h1><p>根据MDN的定义：闭包(closure)是函数和声明该函数的词法环境(词法作用域)的组合。<br>其中词法作用域是指代码编写时变量所处的作用域。<br>在ES5中有两种作用域：全局作用域和函数作用域。<br>函数内部可以直接读取全局变量：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 1</span><br><span class=\"line\">function f()&#123;</span><br><span class=\"line\">console.log(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f()//控制台输出结果为 1</span><br></pre></td></tr></table></figure><br>但是函数外部不能获取函数内部的变量：</p>\n<span id=\"more\"></span>\n<pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f()&#123;</span><br><span class=\"line\">var a = 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(a)//控制台报错：a is not defined</span><br></pre></td></tr></table></figure>\n</code></pre>\n<p>如果想获取函数内部的变量，可以在函数内部再声明一个函数：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f()&#123;</span><br><span class=\"line\">  var a = 1</span><br><span class=\"line\">   function f1()&#123;</span><br><span class=\"line\">     console.log(a)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  return f1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var fn = f()</span><br><span class=\"line\">fn()//控制台输出结果为 1</span><br></pre></td></tr></table></figure><br>上面代码中，函数f的返回值是函数f1，因为函数f1可以获取其声明所在的作用域(即函数f内部作用域)中的a，<br>因此可以在函数外部获取函数内部变量。<br>而函数f1就是闭包，所以可以简单的把闭包理解为“函数内部的函数”。</p>\n<h1 id=\"2、循环创建闭包的一个问题\"><a href=\"#2、循环创建闭包的一个问题\" class=\"headerlink\" title=\"2、循环创建闭包的一个问题\"></a>2、循环创建闭包的一个问题</h1><p>html部分代码：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">  &lt;li&gt;第1个&lt;/li&gt;</span><br><span class=\"line\">  &lt;li&gt;第2个&lt;/li&gt;</span><br><span class=\"line\">  &lt;li&gt;第3个&lt;/li&gt;</span><br><span class=\"line\">  &lt;li&gt;第4个&lt;/li&gt;</span><br><span class=\"line\">  &lt;li&gt;第5个&lt;/li&gt;</span><br><span class=\"line\">  &lt;li&gt;第6个&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><br>JavaScript部分代码：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function clickList()&#123;</span><br><span class=\"line\">    var liList = document.querySelectorAll(&#x27;li&#x27;)</span><br><span class=\"line\">    for(var i = 0;i&lt;liList.length;i++)&#123;</span><br><span class=\"line\">           liList[i].onclick = function()&#123;</span><br><span class=\"line\">           console.log(i + 1)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">clickList()</span><br></pre></td></tr></table></figure><br>当点击列表时发现，无论点击哪一个控制台输出都是 7。<br>原因是赋值给onclick的是闭包，这六个闭包在循环中被创建，但他们共享了同一个词法作用域。<br>由于循环在事件触发之前已经执行完毕，所以i的值已经为7了。<br>解决的一种办法就是使用let：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function clickList()&#123;</span><br><span class=\"line\">    var liList = document.querySelectorAll(&#x27;li&#x27;)</span><br><span class=\"line\">    for(let i = 0;i&lt;liList.length;i++)&#123;</span><br><span class=\"line\">           liList[i].onclick = function()&#123;</span><br><span class=\"line\">           console.log(i + 1)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">clickList()</span><br></pre></td></tr></table></figure><br>这样就使得每个闭包都绑定一个块级作用域，从而在点击列表时得到对应的值。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"1、闭包的概念\"><a href=\"#1、闭包的概念\" class=\"headerlink\" title=\"1、闭包的概念\"></a>1、闭包的概念</h1><p>根据MDN的定义：闭包(closure)是函数和声明该函数的词法环境(词法作用域)的组合。<br>其中词法作用域是指代码编写时变量所处的作用域。<br>在ES5中有两种作用域：全局作用域和函数作用域。<br>函数内部可以直接读取全局变量：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 1</span><br><span class=\"line\">function f()&#123;</span><br><span class=\"line\">console.log(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f()//控制台输出结果为 1</span><br></pre></td></tr></table></figure><br>但是函数外部不能获取函数内部的变量：</p>","more":"<pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f()&#123;</span><br><span class=\"line\">var a = 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(a)//控制台报错：a is not defined</span><br></pre></td></tr></table></figure>\n</code></pre>\n<p>如果想获取函数内部的变量，可以在函数内部再声明一个函数：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f()&#123;</span><br><span class=\"line\">  var a = 1</span><br><span class=\"line\">   function f1()&#123;</span><br><span class=\"line\">     console.log(a)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  return f1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var fn = f()</span><br><span class=\"line\">fn()//控制台输出结果为 1</span><br></pre></td></tr></table></figure><br>上面代码中，函数f的返回值是函数f1，因为函数f1可以获取其声明所在的作用域(即函数f内部作用域)中的a，<br>因此可以在函数外部获取函数内部变量。<br>而函数f1就是闭包，所以可以简单的把闭包理解为“函数内部的函数”。</p>\n<h1 id=\"2、循环创建闭包的一个问题\"><a href=\"#2、循环创建闭包的一个问题\" class=\"headerlink\" title=\"2、循环创建闭包的一个问题\"></a>2、循环创建闭包的一个问题</h1><p>html部分代码：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">  &lt;li&gt;第1个&lt;/li&gt;</span><br><span class=\"line\">  &lt;li&gt;第2个&lt;/li&gt;</span><br><span class=\"line\">  &lt;li&gt;第3个&lt;/li&gt;</span><br><span class=\"line\">  &lt;li&gt;第4个&lt;/li&gt;</span><br><span class=\"line\">  &lt;li&gt;第5个&lt;/li&gt;</span><br><span class=\"line\">  &lt;li&gt;第6个&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><br>JavaScript部分代码：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function clickList()&#123;</span><br><span class=\"line\">    var liList = document.querySelectorAll(&#x27;li&#x27;)</span><br><span class=\"line\">    for(var i = 0;i&lt;liList.length;i++)&#123;</span><br><span class=\"line\">           liList[i].onclick = function()&#123;</span><br><span class=\"line\">           console.log(i + 1)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">clickList()</span><br></pre></td></tr></table></figure><br>当点击列表时发现，无论点击哪一个控制台输出都是 7。<br>原因是赋值给onclick的是闭包，这六个闭包在循环中被创建，但他们共享了同一个词法作用域。<br>由于循环在事件触发之前已经执行完毕，所以i的值已经为7了。<br>解决的一种办法就是使用let：<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function clickList()&#123;</span><br><span class=\"line\">    var liList = document.querySelectorAll(&#x27;li&#x27;)</span><br><span class=\"line\">    for(let i = 0;i&lt;liList.length;i++)&#123;</span><br><span class=\"line\">           liList[i].onclick = function()&#123;</span><br><span class=\"line\">           console.log(i + 1)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">clickList()</span><br></pre></td></tr></table></figure><br>这样就使得每个闭包都绑定一个块级作用域，从而在点击列表时得到对应的值。</p>"},{"title":"flex布局","date":"2018-07-11T08:26:50.000Z","_content":"\n# 一、flex布局\nflex布局（Flexible Box）意为\"弹性布局\"，可以实现空间的自动分配，自动对齐。\n使用flex布局的元素，称为flex容器（flex container），它的所有子元素自动成为容器成员，称为flex item。\n容器默认存在两根轴：水平的主轴（main axis）和垂直的侧轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；侧轴的开始位置叫做cross start，结束位置叫做cross end。\n<!-- more -->\n{% asset_img flex.jpg flex %}\n\n# 二、容器属性\n容器上有6个属性：flex-direction、flex-wrap、flex-flow、justify-content、align-items、align-content。\n\n## 1、flex-direction属性确定主轴的方向，flex-direction属性有4个值可选：\nflex-direction：row; 主轴为水平方向，起点在左端（默认值）\n{% asset_img row.jpg row %}\n\nflex-direction：row-reverse; 主轴为水平方向，起点在右端。\n{% asset_img row-reverse.jpg row-reverse %}\n\nflex-direction：column; 主轴为垂直方向，起点在上方。\n{% asset_img column.jpg column %}\n\nflex-direction：column-reverse; 主轴为垂直方向，起点在下方。\n{% asset_img column-reverse.jpg column-reverse %}\n\n## 2、flex-wrap属性确定是否换行，flex-wrap属性有3个值可选：\nflex-wrap：nowrap; 不换行（默认值）\n{% asset_img nowrap.jpg nowrap %}\n\nflex-wrap：wrap; 换行，第一行在上方。\n{% asset_img wrap.jpg wrap %}\n\nflex-wrap：wrap-reverse; 换行，第一行在下方。\n{% asset_img wrap-reverse.jpg wrap-reverse %}\n\n## 3、flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。\nflex-flow：row wrap; \n{% asset_img flex-flow.jpg flex-flow %}\n\n## 4、justify-content属性定义了item在主轴上的对齐方式。justify-content属性有5个值可选：\njustify-content:flex-start; 左对齐（默认值）\n{% asset_img flex-start.jpg flex-start %}\n\njustify-content:flex-end; 右对齐\n{% asset_img flex-end.jpg flex-end %}\n\njustify-content:center; 居中\n{% asset_img center.jpg centert %}\n\njustify-content:space-between; 两端对齐，item之间的间隔都相等。\n{% asset_img space-between.jpg space-between %}\n\njustify-content:space-around; 每个item两侧的间隔相等，所以，item之间的间隔比item与边框的间隔大一倍。\n{% asset_img space-around.jpg space-around %}\n\n## 5、align-items属性定义item在侧轴上如何对齐。align-items属性有5个值可选：\nalign-items:flex-start; 侧轴的起点对齐。\n{% asset_img align-items-flex-start.jpg align-items-flex-start %}\n\nalign-items:flex-end; 侧轴的终点对齐。\n{% asset_img align-items-flex-end.jpg align-items-flex-end %}\n\nalign-items:center; 侧轴的中点对齐。\n{% asset_img align-items-center.jpg align-items-center %}\n\nalign-items:baseline; item的第一行文字的基线对齐。\n{% asset_img align-items-baseline.jpg align-items-baseline %}\n\nalign-items:stretch; 如果item未设置高度或设为auto，将占满整个容器的高度。\n{% asset_img align-items-stretch.jpg align-items-stretch %}\n\n## 6、align-content属性定义多行/多列对齐方式。align-content属性有6个值可选：\nalign-content:flex-start; 与侧轴的起点对齐。\n{% asset_img align-content-flex-start.jpg align-content-flex-start %}\n\nalign-content:flex-end; 与侧轴的终点对齐。\n{% asset_img align-content-flex-end.jpg align-content-flex-end %}\n\nalign-content:center; 与侧轴的中点对齐。\n{% asset_img align-content-center.jpg align-content-center %}\n\nalign-content:space-between; 侧轴两端对齐，轴线之间的间隔平均分布。\n{% asset_img align-content-space-between.jpg align-content-space-between %}\n\nalign-content:space-around; 每根轴线两侧的间隔都相等，所以，轴线之间的间隔比轴线与边框的间隔大一倍。\n{% asset_img align-content-space-around.jpg align-content-space-around %}\n\nalign-content:stretch; 轴线占满整个侧轴（默认值）。\n{% asset_img align-content-stretch.jpg align-content-stretch %}\n\n# 三、item属性\nitem上有6个属性order、flex-grow、flex-shrink、flex-basis、flex、align-self。\n## 1、order属性定义item的排列顺序。数值越小，排列越靠前，默认为0。\norder:1;\n{% asset_img order.jpg order %}\n\n## 2、flex-grow属性定义item的放大比例，默认为0，即如果存在剩余空间，也不放大。\n如果所有item的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。\n如果一个item的flex-grow属性为2，其他item都为1，则前者占据的剩余空间将比其他项多一倍。\nflex-grow:1; \n{% asset_img flex-grow.jpg flex-grow %}\n\nflex-grow:2;\n{% asset_img flex-grow.jpg flex-grow %}\n\n## 3、flex-shrink属性定义了item的缩小比例，默认为1，即如果空间不足，该item将缩小。\n如果所有item的flex-shrink属性都为1，当空间不足时，都将等比例缩小。\n如果一个item的flex-shrink属性为0，其他item都为1，则空间不足时，前者不缩小。\nflex-shrink:1;\n{% asset_img flex-shrink.jpg flex-shrink %}\n\nflex-shrink:0;\n{% asset_img flex-shrink-2.jpg flex-shrink %}\n\n## 4、flex-basis属性定义了在分配多余空间之前，item占据的主轴空间（main size）。\n浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即item的本来大小。\n它可以设为跟width或height属性一样的值，则item将占据固定空间。\nflex-basis:230px;\n{% asset_img flex-basis.jpg flex-basis %}\n\n## 5、flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。\nflex:1 1 230px;\n{% asset_img flex-auto.jpg flex-auto %}\n\n## 6、align-self属性允许单个item有与其他item不一样的对齐方式，可覆盖align-items属性。默认值为auto，\n表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。\nalign-self:flex-end;\n{% asset_img align-self.jpg align-self %}\n\n\n","source":"_posts/flex布局.md","raw":"---\ntitle: flex布局\ndate: 2018-07-11 16:26:50\ntags: flex\ncategories: CSS\n---\n\n# 一、flex布局\nflex布局（Flexible Box）意为\"弹性布局\"，可以实现空间的自动分配，自动对齐。\n使用flex布局的元素，称为flex容器（flex container），它的所有子元素自动成为容器成员，称为flex item。\n容器默认存在两根轴：水平的主轴（main axis）和垂直的侧轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；侧轴的开始位置叫做cross start，结束位置叫做cross end。\n<!-- more -->\n{% asset_img flex.jpg flex %}\n\n# 二、容器属性\n容器上有6个属性：flex-direction、flex-wrap、flex-flow、justify-content、align-items、align-content。\n\n## 1、flex-direction属性确定主轴的方向，flex-direction属性有4个值可选：\nflex-direction：row; 主轴为水平方向，起点在左端（默认值）\n{% asset_img row.jpg row %}\n\nflex-direction：row-reverse; 主轴为水平方向，起点在右端。\n{% asset_img row-reverse.jpg row-reverse %}\n\nflex-direction：column; 主轴为垂直方向，起点在上方。\n{% asset_img column.jpg column %}\n\nflex-direction：column-reverse; 主轴为垂直方向，起点在下方。\n{% asset_img column-reverse.jpg column-reverse %}\n\n## 2、flex-wrap属性确定是否换行，flex-wrap属性有3个值可选：\nflex-wrap：nowrap; 不换行（默认值）\n{% asset_img nowrap.jpg nowrap %}\n\nflex-wrap：wrap; 换行，第一行在上方。\n{% asset_img wrap.jpg wrap %}\n\nflex-wrap：wrap-reverse; 换行，第一行在下方。\n{% asset_img wrap-reverse.jpg wrap-reverse %}\n\n## 3、flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。\nflex-flow：row wrap; \n{% asset_img flex-flow.jpg flex-flow %}\n\n## 4、justify-content属性定义了item在主轴上的对齐方式。justify-content属性有5个值可选：\njustify-content:flex-start; 左对齐（默认值）\n{% asset_img flex-start.jpg flex-start %}\n\njustify-content:flex-end; 右对齐\n{% asset_img flex-end.jpg flex-end %}\n\njustify-content:center; 居中\n{% asset_img center.jpg centert %}\n\njustify-content:space-between; 两端对齐，item之间的间隔都相等。\n{% asset_img space-between.jpg space-between %}\n\njustify-content:space-around; 每个item两侧的间隔相等，所以，item之间的间隔比item与边框的间隔大一倍。\n{% asset_img space-around.jpg space-around %}\n\n## 5、align-items属性定义item在侧轴上如何对齐。align-items属性有5个值可选：\nalign-items:flex-start; 侧轴的起点对齐。\n{% asset_img align-items-flex-start.jpg align-items-flex-start %}\n\nalign-items:flex-end; 侧轴的终点对齐。\n{% asset_img align-items-flex-end.jpg align-items-flex-end %}\n\nalign-items:center; 侧轴的中点对齐。\n{% asset_img align-items-center.jpg align-items-center %}\n\nalign-items:baseline; item的第一行文字的基线对齐。\n{% asset_img align-items-baseline.jpg align-items-baseline %}\n\nalign-items:stretch; 如果item未设置高度或设为auto，将占满整个容器的高度。\n{% asset_img align-items-stretch.jpg align-items-stretch %}\n\n## 6、align-content属性定义多行/多列对齐方式。align-content属性有6个值可选：\nalign-content:flex-start; 与侧轴的起点对齐。\n{% asset_img align-content-flex-start.jpg align-content-flex-start %}\n\nalign-content:flex-end; 与侧轴的终点对齐。\n{% asset_img align-content-flex-end.jpg align-content-flex-end %}\n\nalign-content:center; 与侧轴的中点对齐。\n{% asset_img align-content-center.jpg align-content-center %}\n\nalign-content:space-between; 侧轴两端对齐，轴线之间的间隔平均分布。\n{% asset_img align-content-space-between.jpg align-content-space-between %}\n\nalign-content:space-around; 每根轴线两侧的间隔都相等，所以，轴线之间的间隔比轴线与边框的间隔大一倍。\n{% asset_img align-content-space-around.jpg align-content-space-around %}\n\nalign-content:stretch; 轴线占满整个侧轴（默认值）。\n{% asset_img align-content-stretch.jpg align-content-stretch %}\n\n# 三、item属性\nitem上有6个属性order、flex-grow、flex-shrink、flex-basis、flex、align-self。\n## 1、order属性定义item的排列顺序。数值越小，排列越靠前，默认为0。\norder:1;\n{% asset_img order.jpg order %}\n\n## 2、flex-grow属性定义item的放大比例，默认为0，即如果存在剩余空间，也不放大。\n如果所有item的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。\n如果一个item的flex-grow属性为2，其他item都为1，则前者占据的剩余空间将比其他项多一倍。\nflex-grow:1; \n{% asset_img flex-grow.jpg flex-grow %}\n\nflex-grow:2;\n{% asset_img flex-grow.jpg flex-grow %}\n\n## 3、flex-shrink属性定义了item的缩小比例，默认为1，即如果空间不足，该item将缩小。\n如果所有item的flex-shrink属性都为1，当空间不足时，都将等比例缩小。\n如果一个item的flex-shrink属性为0，其他item都为1，则空间不足时，前者不缩小。\nflex-shrink:1;\n{% asset_img flex-shrink.jpg flex-shrink %}\n\nflex-shrink:0;\n{% asset_img flex-shrink-2.jpg flex-shrink %}\n\n## 4、flex-basis属性定义了在分配多余空间之前，item占据的主轴空间（main size）。\n浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即item的本来大小。\n它可以设为跟width或height属性一样的值，则item将占据固定空间。\nflex-basis:230px;\n{% asset_img flex-basis.jpg flex-basis %}\n\n## 5、flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。\nflex:1 1 230px;\n{% asset_img flex-auto.jpg flex-auto %}\n\n## 6、align-self属性允许单个item有与其他item不一样的对齐方式，可覆盖align-items属性。默认值为auto，\n表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。\nalign-self:flex-end;\n{% asset_img align-self.jpg align-self %}\n\n\n","slug":"flex布局","published":1,"updated":"2021-06-09T07:33:02.227Z","_id":"ckpp42uyj000014u00yhmaert","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"一、flex布局\"><a href=\"#一、flex布局\" class=\"headerlink\" title=\"一、flex布局\"></a>一、flex布局</h1><p>flex布局（Flexible Box）意为”弹性布局”，可以实现空间的自动分配，自动对齐。<br>使用flex布局的元素，称为flex容器（flex container），它的所有子元素自动成为容器成员，称为flex item。<br>容器默认存在两根轴：水平的主轴（main axis）和垂直的侧轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；侧轴的开始位置叫做cross start，结束位置叫做cross end。</p>\n<span id=\"more\"></span>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/flex.jpg\" class title=\"flex\">\n\n<h1 id=\"二、容器属性\"><a href=\"#二、容器属性\" class=\"headerlink\" title=\"二、容器属性\"></a>二、容器属性</h1><p>容器上有6个属性：flex-direction、flex-wrap、flex-flow、justify-content、align-items、align-content。</p>\n<h2 id=\"1、flex-direction属性确定主轴的方向，flex-direction属性有4个值可选：\"><a href=\"#1、flex-direction属性确定主轴的方向，flex-direction属性有4个值可选：\" class=\"headerlink\" title=\"1、flex-direction属性确定主轴的方向，flex-direction属性有4个值可选：\"></a>1、flex-direction属性确定主轴的方向，flex-direction属性有4个值可选：</h2><p>flex-direction：row; 主轴为水平方向，起点在左端（默认值）</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/row.jpg\" class title=\"row\">\n\n<p>flex-direction：row-reverse; 主轴为水平方向，起点在右端。</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/row-reverse.jpg\" class title=\"row-reverse\">\n\n<p>flex-direction：column; 主轴为垂直方向，起点在上方。</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/column.jpg\" class title=\"column\">\n\n<p>flex-direction：column-reverse; 主轴为垂直方向，起点在下方。</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/column-reverse.jpg\" class title=\"column-reverse\">\n\n<h2 id=\"2、flex-wrap属性确定是否换行，flex-wrap属性有3个值可选：\"><a href=\"#2、flex-wrap属性确定是否换行，flex-wrap属性有3个值可选：\" class=\"headerlink\" title=\"2、flex-wrap属性确定是否换行，flex-wrap属性有3个值可选：\"></a>2、flex-wrap属性确定是否换行，flex-wrap属性有3个值可选：</h2><p>flex-wrap：nowrap; 不换行（默认值）</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/nowrap.jpg\" class title=\"nowrap\">\n\n<p>flex-wrap：wrap; 换行，第一行在上方。</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/wrap.jpg\" class title=\"wrap\">\n\n<p>flex-wrap：wrap-reverse; 换行，第一行在下方。</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/wrap-reverse.jpg\" class title=\"wrap-reverse\">\n\n<h2 id=\"3、flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row-nowrap。\"><a href=\"#3、flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row-nowrap。\" class=\"headerlink\" title=\"3、flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。\"></a>3、flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。</h2><p>flex-flow：row wrap; </p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/flex-flow.jpg\" class title=\"flex-flow\">\n\n<h2 id=\"4、justify-content属性定义了item在主轴上的对齐方式。justify-content属性有5个值可选：\"><a href=\"#4、justify-content属性定义了item在主轴上的对齐方式。justify-content属性有5个值可选：\" class=\"headerlink\" title=\"4、justify-content属性定义了item在主轴上的对齐方式。justify-content属性有5个值可选：\"></a>4、justify-content属性定义了item在主轴上的对齐方式。justify-content属性有5个值可选：</h2><p>justify-content:flex-start; 左对齐（默认值）</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/flex-start.jpg\" class title=\"flex-start\">\n\n<p>justify-content:flex-end; 右对齐</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/flex-end.jpg\" class title=\"flex-end\">\n\n<p>justify-content:center; 居中</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/center.jpg\" class title=\"centert\">\n\n<p>justify-content:space-between; 两端对齐，item之间的间隔都相等。</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/space-between.jpg\" class title=\"space-between\">\n\n<p>justify-content:space-around; 每个item两侧的间隔相等，所以，item之间的间隔比item与边框的间隔大一倍。</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/space-around.jpg\" class title=\"space-around\">\n\n<h2 id=\"5、align-items属性定义item在侧轴上如何对齐。align-items属性有5个值可选：\"><a href=\"#5、align-items属性定义item在侧轴上如何对齐。align-items属性有5个值可选：\" class=\"headerlink\" title=\"5、align-items属性定义item在侧轴上如何对齐。align-items属性有5个值可选：\"></a>5、align-items属性定义item在侧轴上如何对齐。align-items属性有5个值可选：</h2><p>align-items:flex-start; 侧轴的起点对齐。</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/align-items-flex-start.jpg\" class title=\"align-items-flex-start\">\n\n<p>align-items:flex-end; 侧轴的终点对齐。</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/align-items-flex-end.jpg\" class title=\"align-items-flex-end\">\n\n<p>align-items:center; 侧轴的中点对齐。</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/align-items-center.jpg\" class title=\"align-items-center\">\n\n<p>align-items:baseline; item的第一行文字的基线对齐。</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/align-items-baseline.jpg\" class title=\"align-items-baseline\">\n\n<p>align-items:stretch; 如果item未设置高度或设为auto，将占满整个容器的高度。</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/align-items-stretch.jpg\" class title=\"align-items-stretch\">\n\n<h2 id=\"6、align-content属性定义多行-多列对齐方式。align-content属性有6个值可选：\"><a href=\"#6、align-content属性定义多行-多列对齐方式。align-content属性有6个值可选：\" class=\"headerlink\" title=\"6、align-content属性定义多行/多列对齐方式。align-content属性有6个值可选：\"></a>6、align-content属性定义多行/多列对齐方式。align-content属性有6个值可选：</h2><p>align-content:flex-start; 与侧轴的起点对齐。</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/align-content-flex-start.jpg\" class title=\"align-content-flex-start\">\n\n<p>align-content:flex-end; 与侧轴的终点对齐。</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/align-content-flex-end.jpg\" class title=\"align-content-flex-end\">\n\n<p>align-content:center; 与侧轴的中点对齐。</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/align-content-center.jpg\" class title=\"align-content-center\">\n\n<p>align-content:space-between; 侧轴两端对齐，轴线之间的间隔平均分布。</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/align-content-space-between.jpg\" class title=\"align-content-space-between\">\n\n<p>align-content:space-around; 每根轴线两侧的间隔都相等，所以，轴线之间的间隔比轴线与边框的间隔大一倍。</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/align-content-space-around.jpg\" class title=\"align-content-space-around\">\n\n<p>align-content:stretch; 轴线占满整个侧轴（默认值）。</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/align-content-stretch.jpg\" class title=\"align-content-stretch\">\n\n<h1 id=\"三、item属性\"><a href=\"#三、item属性\" class=\"headerlink\" title=\"三、item属性\"></a>三、item属性</h1><p>item上有6个属性order、flex-grow、flex-shrink、flex-basis、flex、align-self。</p>\n<h2 id=\"1、order属性定义item的排列顺序。数值越小，排列越靠前，默认为0。\"><a href=\"#1、order属性定义item的排列顺序。数值越小，排列越靠前，默认为0。\" class=\"headerlink\" title=\"1、order属性定义item的排列顺序。数值越小，排列越靠前，默认为0。\"></a>1、order属性定义item的排列顺序。数值越小，排列越靠前，默认为0。</h2><p>order:1;</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/order.jpg\" class title=\"order\">\n\n<h2 id=\"2、flex-grow属性定义item的放大比例，默认为0，即如果存在剩余空间，也不放大。\"><a href=\"#2、flex-grow属性定义item的放大比例，默认为0，即如果存在剩余空间，也不放大。\" class=\"headerlink\" title=\"2、flex-grow属性定义item的放大比例，默认为0，即如果存在剩余空间，也不放大。\"></a>2、flex-grow属性定义item的放大比例，默认为0，即如果存在剩余空间，也不放大。</h2><p>如果所有item的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。<br>如果一个item的flex-grow属性为2，其他item都为1，则前者占据的剩余空间将比其他项多一倍。<br>flex-grow:1; </p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/flex-grow.jpg\" class title=\"flex-grow\">\n\n<p>flex-grow:2;</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/flex-grow.jpg\" class title=\"flex-grow\">\n\n<h2 id=\"3、flex-shrink属性定义了item的缩小比例，默认为1，即如果空间不足，该item将缩小。\"><a href=\"#3、flex-shrink属性定义了item的缩小比例，默认为1，即如果空间不足，该item将缩小。\" class=\"headerlink\" title=\"3、flex-shrink属性定义了item的缩小比例，默认为1，即如果空间不足，该item将缩小。\"></a>3、flex-shrink属性定义了item的缩小比例，默认为1，即如果空间不足，该item将缩小。</h2><p>如果所有item的flex-shrink属性都为1，当空间不足时，都将等比例缩小。<br>如果一个item的flex-shrink属性为0，其他item都为1，则空间不足时，前者不缩小。<br>flex-shrink:1;</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/flex-shrink.jpg\" class title=\"flex-shrink\">\n\n<p>flex-shrink:0;</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/flex-shrink-2.jpg\" class title=\"flex-shrink\">\n\n<h2 id=\"4、flex-basis属性定义了在分配多余空间之前，item占据的主轴空间（main-size）。\"><a href=\"#4、flex-basis属性定义了在分配多余空间之前，item占据的主轴空间（main-size）。\" class=\"headerlink\" title=\"4、flex-basis属性定义了在分配多余空间之前，item占据的主轴空间（main size）。\"></a>4、flex-basis属性定义了在分配多余空间之前，item占据的主轴空间（main size）。</h2><p>浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即item的本来大小。<br>它可以设为跟width或height属性一样的值，则item将占据固定空间。<br>flex-basis:230px;</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/flex-basis.jpg\" class title=\"flex-basis\">\n\n<h2 id=\"5、flex属性是flex-grow-flex-shrink-和-flex-basis的简写，默认值为0-1-auto。后两个属性可选。\"><a href=\"#5、flex属性是flex-grow-flex-shrink-和-flex-basis的简写，默认值为0-1-auto。后两个属性可选。\" class=\"headerlink\" title=\"5、flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。\"></a>5、flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</h2><p>flex:1 1 230px;</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/flex-auto.jpg\" class title=\"flex-auto\">\n\n<h2 id=\"6、align-self属性允许单个item有与其他item不一样的对齐方式，可覆盖align-items属性。默认值为auto，\"><a href=\"#6、align-self属性允许单个item有与其他item不一样的对齐方式，可覆盖align-items属性。默认值为auto，\" class=\"headerlink\" title=\"6、align-self属性允许单个item有与其他item不一样的对齐方式，可覆盖align-items属性。默认值为auto，\"></a>6、align-self属性允许单个item有与其他item不一样的对齐方式，可覆盖align-items属性。默认值为auto，</h2><p>表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。<br>align-self:flex-end;</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/align-self.jpg\" class title=\"align-self\">\n\n\n","site":{"data":{}},"excerpt":"<h1 id=\"一、flex布局\"><a href=\"#一、flex布局\" class=\"headerlink\" title=\"一、flex布局\"></a>一、flex布局</h1><p>flex布局（Flexible Box）意为”弹性布局”，可以实现空间的自动分配，自动对齐。<br>使用flex布局的元素，称为flex容器（flex container），它的所有子元素自动成为容器成员，称为flex item。<br>容器默认存在两根轴：水平的主轴（main axis）和垂直的侧轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；侧轴的开始位置叫做cross start，结束位置叫做cross end。</p>","more":"<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/flex.jpg\" class title=\"flex\">\n\n<h1 id=\"二、容器属性\"><a href=\"#二、容器属性\" class=\"headerlink\" title=\"二、容器属性\"></a>二、容器属性</h1><p>容器上有6个属性：flex-direction、flex-wrap、flex-flow、justify-content、align-items、align-content。</p>\n<h2 id=\"1、flex-direction属性确定主轴的方向，flex-direction属性有4个值可选：\"><a href=\"#1、flex-direction属性确定主轴的方向，flex-direction属性有4个值可选：\" class=\"headerlink\" title=\"1、flex-direction属性确定主轴的方向，flex-direction属性有4个值可选：\"></a>1、flex-direction属性确定主轴的方向，flex-direction属性有4个值可选：</h2><p>flex-direction：row; 主轴为水平方向，起点在左端（默认值）</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/row.jpg\" class title=\"row\">\n\n<p>flex-direction：row-reverse; 主轴为水平方向，起点在右端。</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/row-reverse.jpg\" class title=\"row-reverse\">\n\n<p>flex-direction：column; 主轴为垂直方向，起点在上方。</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/column.jpg\" class title=\"column\">\n\n<p>flex-direction：column-reverse; 主轴为垂直方向，起点在下方。</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/column-reverse.jpg\" class title=\"column-reverse\">\n\n<h2 id=\"2、flex-wrap属性确定是否换行，flex-wrap属性有3个值可选：\"><a href=\"#2、flex-wrap属性确定是否换行，flex-wrap属性有3个值可选：\" class=\"headerlink\" title=\"2、flex-wrap属性确定是否换行，flex-wrap属性有3个值可选：\"></a>2、flex-wrap属性确定是否换行，flex-wrap属性有3个值可选：</h2><p>flex-wrap：nowrap; 不换行（默认值）</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/nowrap.jpg\" class title=\"nowrap\">\n\n<p>flex-wrap：wrap; 换行，第一行在上方。</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/wrap.jpg\" class title=\"wrap\">\n\n<p>flex-wrap：wrap-reverse; 换行，第一行在下方。</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/wrap-reverse.jpg\" class title=\"wrap-reverse\">\n\n<h2 id=\"3、flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row-nowrap。\"><a href=\"#3、flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row-nowrap。\" class=\"headerlink\" title=\"3、flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。\"></a>3、flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。</h2><p>flex-flow：row wrap; </p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/flex-flow.jpg\" class title=\"flex-flow\">\n\n<h2 id=\"4、justify-content属性定义了item在主轴上的对齐方式。justify-content属性有5个值可选：\"><a href=\"#4、justify-content属性定义了item在主轴上的对齐方式。justify-content属性有5个值可选：\" class=\"headerlink\" title=\"4、justify-content属性定义了item在主轴上的对齐方式。justify-content属性有5个值可选：\"></a>4、justify-content属性定义了item在主轴上的对齐方式。justify-content属性有5个值可选：</h2><p>justify-content:flex-start; 左对齐（默认值）</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/flex-start.jpg\" class title=\"flex-start\">\n\n<p>justify-content:flex-end; 右对齐</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/flex-end.jpg\" class title=\"flex-end\">\n\n<p>justify-content:center; 居中</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/center.jpg\" class title=\"centert\">\n\n<p>justify-content:space-between; 两端对齐，item之间的间隔都相等。</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/space-between.jpg\" class title=\"space-between\">\n\n<p>justify-content:space-around; 每个item两侧的间隔相等，所以，item之间的间隔比item与边框的间隔大一倍。</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/space-around.jpg\" class title=\"space-around\">\n\n<h2 id=\"5、align-items属性定义item在侧轴上如何对齐。align-items属性有5个值可选：\"><a href=\"#5、align-items属性定义item在侧轴上如何对齐。align-items属性有5个值可选：\" class=\"headerlink\" title=\"5、align-items属性定义item在侧轴上如何对齐。align-items属性有5个值可选：\"></a>5、align-items属性定义item在侧轴上如何对齐。align-items属性有5个值可选：</h2><p>align-items:flex-start; 侧轴的起点对齐。</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/align-items-flex-start.jpg\" class title=\"align-items-flex-start\">\n\n<p>align-items:flex-end; 侧轴的终点对齐。</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/align-items-flex-end.jpg\" class title=\"align-items-flex-end\">\n\n<p>align-items:center; 侧轴的中点对齐。</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/align-items-center.jpg\" class title=\"align-items-center\">\n\n<p>align-items:baseline; item的第一行文字的基线对齐。</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/align-items-baseline.jpg\" class title=\"align-items-baseline\">\n\n<p>align-items:stretch; 如果item未设置高度或设为auto，将占满整个容器的高度。</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/align-items-stretch.jpg\" class title=\"align-items-stretch\">\n\n<h2 id=\"6、align-content属性定义多行-多列对齐方式。align-content属性有6个值可选：\"><a href=\"#6、align-content属性定义多行-多列对齐方式。align-content属性有6个值可选：\" class=\"headerlink\" title=\"6、align-content属性定义多行/多列对齐方式。align-content属性有6个值可选：\"></a>6、align-content属性定义多行/多列对齐方式。align-content属性有6个值可选：</h2><p>align-content:flex-start; 与侧轴的起点对齐。</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/align-content-flex-start.jpg\" class title=\"align-content-flex-start\">\n\n<p>align-content:flex-end; 与侧轴的终点对齐。</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/align-content-flex-end.jpg\" class title=\"align-content-flex-end\">\n\n<p>align-content:center; 与侧轴的中点对齐。</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/align-content-center.jpg\" class title=\"align-content-center\">\n\n<p>align-content:space-between; 侧轴两端对齐，轴线之间的间隔平均分布。</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/align-content-space-between.jpg\" class title=\"align-content-space-between\">\n\n<p>align-content:space-around; 每根轴线两侧的间隔都相等，所以，轴线之间的间隔比轴线与边框的间隔大一倍。</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/align-content-space-around.jpg\" class title=\"align-content-space-around\">\n\n<p>align-content:stretch; 轴线占满整个侧轴（默认值）。</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/align-content-stretch.jpg\" class title=\"align-content-stretch\">\n\n<h1 id=\"三、item属性\"><a href=\"#三、item属性\" class=\"headerlink\" title=\"三、item属性\"></a>三、item属性</h1><p>item上有6个属性order、flex-grow、flex-shrink、flex-basis、flex、align-self。</p>\n<h2 id=\"1、order属性定义item的排列顺序。数值越小，排列越靠前，默认为0。\"><a href=\"#1、order属性定义item的排列顺序。数值越小，排列越靠前，默认为0。\" class=\"headerlink\" title=\"1、order属性定义item的排列顺序。数值越小，排列越靠前，默认为0。\"></a>1、order属性定义item的排列顺序。数值越小，排列越靠前，默认为0。</h2><p>order:1;</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/order.jpg\" class title=\"order\">\n\n<h2 id=\"2、flex-grow属性定义item的放大比例，默认为0，即如果存在剩余空间，也不放大。\"><a href=\"#2、flex-grow属性定义item的放大比例，默认为0，即如果存在剩余空间，也不放大。\" class=\"headerlink\" title=\"2、flex-grow属性定义item的放大比例，默认为0，即如果存在剩余空间，也不放大。\"></a>2、flex-grow属性定义item的放大比例，默认为0，即如果存在剩余空间，也不放大。</h2><p>如果所有item的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。<br>如果一个item的flex-grow属性为2，其他item都为1，则前者占据的剩余空间将比其他项多一倍。<br>flex-grow:1; </p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/flex-grow.jpg\" class title=\"flex-grow\">\n\n<p>flex-grow:2;</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/flex-grow.jpg\" class title=\"flex-grow\">\n\n<h2 id=\"3、flex-shrink属性定义了item的缩小比例，默认为1，即如果空间不足，该item将缩小。\"><a href=\"#3、flex-shrink属性定义了item的缩小比例，默认为1，即如果空间不足，该item将缩小。\" class=\"headerlink\" title=\"3、flex-shrink属性定义了item的缩小比例，默认为1，即如果空间不足，该item将缩小。\"></a>3、flex-shrink属性定义了item的缩小比例，默认为1，即如果空间不足，该item将缩小。</h2><p>如果所有item的flex-shrink属性都为1，当空间不足时，都将等比例缩小。<br>如果一个item的flex-shrink属性为0，其他item都为1，则空间不足时，前者不缩小。<br>flex-shrink:1;</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/flex-shrink.jpg\" class title=\"flex-shrink\">\n\n<p>flex-shrink:0;</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/flex-shrink-2.jpg\" class title=\"flex-shrink\">\n\n<h2 id=\"4、flex-basis属性定义了在分配多余空间之前，item占据的主轴空间（main-size）。\"><a href=\"#4、flex-basis属性定义了在分配多余空间之前，item占据的主轴空间（main-size）。\" class=\"headerlink\" title=\"4、flex-basis属性定义了在分配多余空间之前，item占据的主轴空间（main size）。\"></a>4、flex-basis属性定义了在分配多余空间之前，item占据的主轴空间（main size）。</h2><p>浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即item的本来大小。<br>它可以设为跟width或height属性一样的值，则item将占据固定空间。<br>flex-basis:230px;</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/flex-basis.jpg\" class title=\"flex-basis\">\n\n<h2 id=\"5、flex属性是flex-grow-flex-shrink-和-flex-basis的简写，默认值为0-1-auto。后两个属性可选。\"><a href=\"#5、flex属性是flex-grow-flex-shrink-和-flex-basis的简写，默认值为0-1-auto。后两个属性可选。\" class=\"headerlink\" title=\"5、flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。\"></a>5、flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</h2><p>flex:1 1 230px;</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/flex-auto.jpg\" class title=\"flex-auto\">\n\n<h2 id=\"6、align-self属性允许单个item有与其他item不一样的对齐方式，可覆盖align-items属性。默认值为auto，\"><a href=\"#6、align-self属性允许单个item有与其他item不一样的对齐方式，可覆盖align-items属性。默认值为auto，\" class=\"headerlink\" title=\"6、align-self属性允许单个item有与其他item不一样的对齐方式，可覆盖align-items属性。默认值为auto，\"></a>6、align-self属性允许单个item有与其他item不一样的对齐方式，可覆盖align-items属性。默认值为auto，</h2><p>表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。<br>align-self:flex-end;</p>\n<img src=\"/2018/07/11/flex%E5%B8%83%E5%B1%80/align-self.jpg\" class title=\"align-self\">"},{"title":"手写系列之一：深拷贝","date":"2021-06-09T12:05:59.000Z","_content":"\n# 前置知识\n## 数据类型\n\n按照《JavaScript高级程序设计：第4版》书中的描述，JavaScript共有7种数据类型分别是：Undefined、Null、Boolean、Number、String、Symbol和Object。其中前6种是简单数据类型，也称为基本类型；Object是复杂数据类型，又称为引用类型。\n\n```javascript\n//基本类型: Number\nvar a = 1;\nvar b = a;\nb = 2;\nconsole.log(a, b); //1, 2 变量b重新赋值不影响变量a\n\n//基本类型: String\nvar str1 = 'str1';\nvar str2 = str1;\nstr2 = 'str2'\nconsole.log(str1, str2); //'str1', 'str2' 变量b重新赋值不影响变量a\n\n//引用类型\nvar obj1 = {x: 1};\nvar obj2 = obj1;\nobj2.x = 2;\nconsole.log(obj1.x, obj2.x); //2, 2 修改obj2中的值影响了obj1\n```\n\n对于基本类型：一个变量赋值给另一个变量时，这两个变量互不影响。\n\n对于引用类型：一个对象赋值给另一个变量时，可以理解为复制的是对象的地址，因此这两个对象指向的是同一个存储空间。当其中一个发生改变时，另一个对象也会受到影响。\n\n所以要想隔断obj1和obj2的联系，可以拷贝一份obj1的数据。\n\n<!-- more -->\n\n拷贝分为浅拷贝和深拷贝。浅拷贝创建一个新对象，这个对象有着原始对象属性值的一份相同拷贝；如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址 。深拷贝则是完全的拷贝。\n\n## 浅拷贝与深拷贝\n\n````javascript\n//浅拷贝\nvar obj1 = {x: 1, o: {y: 1}};\nvar obj2 = shallowClone(obj1);\nobj2.x = 2;\nobj2.o.y = 2;\nconsole.log(obj1.x, obj2.x); //1, 2   obj1无影响\nconsole.log(obj1.o.y, obj2.o.y)// 2, 2  obj1被影响\n````\n\n````javascript\n//深拷贝\nvar obj1 = {x: 1, o: {y: 1}};\nvar obj2 = deepClone(obj1);\nobj2.x = 2;\nobj2.o.y = 2;\nconsole.log(obj1.x, obj2.x); //1, 2  obj1无影响\nconsole.log(obj1.o.y, obj2.o.y)// 1, 2  obj1无影响\n````\n\n# 实现深拷贝\n\n## 1. JSON序列化反序列化\n\n````javascript\nvar obj1 = {\n  n: 1,\n  s: 'str1',\n  empty: null,\n  bool: true,\n  arr: [1, [2, 3], [4, 5, 6]],\n  obj: {a: 'a1', b: 'b1'}\n}\n\nvar obj2 = JSON.parse(JSON.stringify(obj1));\nobj2.n = 2;\nconsole.log(obj1.n); //1\nobj2.s = 'str1';\nconsole.log(obj1.s); //'str1'\nobj2.bool = false;\nconsole.log(obj1.bool); //true\nobj2.arr[0] = 0;\nconsole.log(obj1.arr[0]); //1\nobj2.obj.a = 'a2';\nconsole.log(obj1.obj.a); //'a1'\n````\n\n通过使用JSON序列化与反序列化可以比较完美的实现深拷贝，但是JSON仅支持上述几种类型，它不适用于函数、undefined、循环引用、正则 、Symbol等等。\n\n````javascript\nvar obj1 = {\n  n: 1,\n  un: undefined,\n  sym: Symbol(),\n  f: function () {},\n  reg: /hi/,\n};\nvar obj2 = JSON.parse(JSON.stringify(obj1));\nconsole.log(obj2);// { n: 1, reg: {} }\n````\n\n## 2. 递归克隆\n\n使用递归深拷贝的思路是：如果节点是基本数据类型就直接拷贝；如果是Object就需要分情况讨论。\n\n### 基本数据类型\n\n````javascript\nfunction deepClone(args) {\n    return args;\n}\n````\n\n### 引用类型\n\n````javascript\n//普通Object\nfunction deepClone(args) {\n    if(args instanceof Object) {\n        let result = new Object();\n        for(let key in args) {\n            result[key] = deepClone(args[key]);\n        }\n        return result;\n    }\n    return args;\n}\n\nlet obj1 = {\n  name: 'x',\n  age: { year: 2020 }\n};\n\nlet obj2 = deepClone(obj1);\nobj2.name = 'xx';\nconsole.log(obj1.name); //'x'\nconsole.log(obj1.age === obj2.age); //false\nobj2.age.year = 2021;\nconsole.log(obj1.age.year); //2020\n````\n\n````javascript\n//包含Array\nfunction deepClone(args) {\n  if (args instanceof Object) {\n    let result;\n    if (args instanceof Array) {\n      result = new Array();\n    } else {\n      result = new Object();\n    }\n    for (let key in args) {\n      result[key] = deepClone(args[key]);\n    }\n    return result;\n\n  }\n  return args;\n}\n\nlet obj1 = { arr: [1, [2, 3], [4, 5]] };\n\nlet obj2 = deepClone(obj1);\nconsole.log(obj1.arr === obj2.arr, obj1.arr[1] === obj2.arr[1]); //false false\nobj2.arr[1][0] = 0;\nconsole.log(obj1.arr[1][0]); //2\n````\n\n````javascript\n//包含正则表达式\nfunction deepClone(args) {\n  if (args instanceof Object) {\n    let result;\n    if (args instanceof Array) {\n      result = new Array();\n    } else if (args instanceof RegExp) {\n      result = new RegExp(args.source, args.flags);\n    } else {\n      result = new Object();\n    }\n    for (let key in args) {\n      result[key] = deepClone(args[key]);\n    }\n    return result;\n\n  }\n  return args;\n}\n\nlet obj1 = { reg: new RegExp(\"hi\\\\d+\", \"gi\") };\n\nlet obj2 = deepClone(obj1);\nconsole.log(obj1 === obj2); //false\nconsole.log(obj1.source === obj2.source); //true\nconsole.log(obj1.flags === obj2.flags); //true\n````\n\n````javascript\n//包含function\nfunction deepClone(args) {\n  if (args instanceof Object) {\n    let result;\n    if (args instanceof Array) {\n      result = new Array();\n    } else if (args instanceof Function) {\n      result = function () {\n        return args.apply(this, arguments);\n      };\n    } else if (args instanceof RegExp) {\n      result = new RegExp(args.source, args.flags);\n    } else {\n      result = new Object();\n    }\n    for (let key in args) {\n      result[key] = deepClone(args[key]);\n    }\n    return result;\n\n  }\n  return args;\n}\n\nlet obj1 = { fn: function (x, y) { return x + y + 1 } };\n\nlet obj2 = deepClone(obj1);\nconsole.log(obj1.fn === obj2.fn); //false\nconsole.log(obj1.fn(1, 1) === obj2.fn(1, 1)); //true\n````\n\n````javascript\n//包含循环引用\nlet cache = []; //创建拷贝记录， 每当发生一次拷贝时就记录原始数据和拷贝数据\nfunction deepClone(args) {\n  let cacheResult = findCache(args);\n  if (args instanceof Object) {\n    if (cacheResult) {\n      return cacheResult;\n    } else {\n      let result;\n      if (args instanceof Array) {\n        result = new Array();\n      } else if (args instanceof Function) {\n        result = function () {\n          return args.apply(this, arguments);\n        };\n      } else if (args instanceof RegExp) {\n      result = new RegExp(args.source, args.flags);\n      } else {\n        result = new Object();\n      }\n  \n      cache.push([args, result]); //拷贝记录\n      for (let key in args) {\n        if (args.hasOwnProperty(key)) {//不拷贝原型属性\n          result[key] = deepClone(args[key]);\n        }\n      }\n      return result;\n  \n    }\n  }\n\n  return args;\n}\n\nfunction findCache(args) { //查找拷贝记录\n  for (let i = 0; i < cache.length; i++) {\n    if (cache[i][0] === args) {\n      return cache[i][1];\n    }\n  }\n  return undefined;\n}\n\nlet obj1 = { a: 1 };\nobj1.self = obj1; //循环引用\n\nlet obj2 = deepClone(obj1);\nconsole.log(obj1 === obj2); //false\nobj1.a = 2;\nconsole.log(obj2.a); //1\nconsole.log(obj1.self === obj2.self); //false\n````\n\n以上代码能够支持的[深拷贝](https://github.com/wuwenxing0912/hand-writing/tree/master/deepClone)包括：Number、String、Boolean、Null、Undefined、Symbol、普通对象、Array、函数、正则表达式以及循环引用。\n\n","source":"_posts/手写系列之一：深拷贝.md","raw":"---\ntitle: 手写系列之一：深拷贝\ndate: 2021-06-09 20:05:59\ntags: [\"deep clone\", \"手写系列\"]\ncategories: JavaScript\n---\n\n# 前置知识\n## 数据类型\n\n按照《JavaScript高级程序设计：第4版》书中的描述，JavaScript共有7种数据类型分别是：Undefined、Null、Boolean、Number、String、Symbol和Object。其中前6种是简单数据类型，也称为基本类型；Object是复杂数据类型，又称为引用类型。\n\n```javascript\n//基本类型: Number\nvar a = 1;\nvar b = a;\nb = 2;\nconsole.log(a, b); //1, 2 变量b重新赋值不影响变量a\n\n//基本类型: String\nvar str1 = 'str1';\nvar str2 = str1;\nstr2 = 'str2'\nconsole.log(str1, str2); //'str1', 'str2' 变量b重新赋值不影响变量a\n\n//引用类型\nvar obj1 = {x: 1};\nvar obj2 = obj1;\nobj2.x = 2;\nconsole.log(obj1.x, obj2.x); //2, 2 修改obj2中的值影响了obj1\n```\n\n对于基本类型：一个变量赋值给另一个变量时，这两个变量互不影响。\n\n对于引用类型：一个对象赋值给另一个变量时，可以理解为复制的是对象的地址，因此这两个对象指向的是同一个存储空间。当其中一个发生改变时，另一个对象也会受到影响。\n\n所以要想隔断obj1和obj2的联系，可以拷贝一份obj1的数据。\n\n<!-- more -->\n\n拷贝分为浅拷贝和深拷贝。浅拷贝创建一个新对象，这个对象有着原始对象属性值的一份相同拷贝；如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址 。深拷贝则是完全的拷贝。\n\n## 浅拷贝与深拷贝\n\n````javascript\n//浅拷贝\nvar obj1 = {x: 1, o: {y: 1}};\nvar obj2 = shallowClone(obj1);\nobj2.x = 2;\nobj2.o.y = 2;\nconsole.log(obj1.x, obj2.x); //1, 2   obj1无影响\nconsole.log(obj1.o.y, obj2.o.y)// 2, 2  obj1被影响\n````\n\n````javascript\n//深拷贝\nvar obj1 = {x: 1, o: {y: 1}};\nvar obj2 = deepClone(obj1);\nobj2.x = 2;\nobj2.o.y = 2;\nconsole.log(obj1.x, obj2.x); //1, 2  obj1无影响\nconsole.log(obj1.o.y, obj2.o.y)// 1, 2  obj1无影响\n````\n\n# 实现深拷贝\n\n## 1. JSON序列化反序列化\n\n````javascript\nvar obj1 = {\n  n: 1,\n  s: 'str1',\n  empty: null,\n  bool: true,\n  arr: [1, [2, 3], [4, 5, 6]],\n  obj: {a: 'a1', b: 'b1'}\n}\n\nvar obj2 = JSON.parse(JSON.stringify(obj1));\nobj2.n = 2;\nconsole.log(obj1.n); //1\nobj2.s = 'str1';\nconsole.log(obj1.s); //'str1'\nobj2.bool = false;\nconsole.log(obj1.bool); //true\nobj2.arr[0] = 0;\nconsole.log(obj1.arr[0]); //1\nobj2.obj.a = 'a2';\nconsole.log(obj1.obj.a); //'a1'\n````\n\n通过使用JSON序列化与反序列化可以比较完美的实现深拷贝，但是JSON仅支持上述几种类型，它不适用于函数、undefined、循环引用、正则 、Symbol等等。\n\n````javascript\nvar obj1 = {\n  n: 1,\n  un: undefined,\n  sym: Symbol(),\n  f: function () {},\n  reg: /hi/,\n};\nvar obj2 = JSON.parse(JSON.stringify(obj1));\nconsole.log(obj2);// { n: 1, reg: {} }\n````\n\n## 2. 递归克隆\n\n使用递归深拷贝的思路是：如果节点是基本数据类型就直接拷贝；如果是Object就需要分情况讨论。\n\n### 基本数据类型\n\n````javascript\nfunction deepClone(args) {\n    return args;\n}\n````\n\n### 引用类型\n\n````javascript\n//普通Object\nfunction deepClone(args) {\n    if(args instanceof Object) {\n        let result = new Object();\n        for(let key in args) {\n            result[key] = deepClone(args[key]);\n        }\n        return result;\n    }\n    return args;\n}\n\nlet obj1 = {\n  name: 'x',\n  age: { year: 2020 }\n};\n\nlet obj2 = deepClone(obj1);\nobj2.name = 'xx';\nconsole.log(obj1.name); //'x'\nconsole.log(obj1.age === obj2.age); //false\nobj2.age.year = 2021;\nconsole.log(obj1.age.year); //2020\n````\n\n````javascript\n//包含Array\nfunction deepClone(args) {\n  if (args instanceof Object) {\n    let result;\n    if (args instanceof Array) {\n      result = new Array();\n    } else {\n      result = new Object();\n    }\n    for (let key in args) {\n      result[key] = deepClone(args[key]);\n    }\n    return result;\n\n  }\n  return args;\n}\n\nlet obj1 = { arr: [1, [2, 3], [4, 5]] };\n\nlet obj2 = deepClone(obj1);\nconsole.log(obj1.arr === obj2.arr, obj1.arr[1] === obj2.arr[1]); //false false\nobj2.arr[1][0] = 0;\nconsole.log(obj1.arr[1][0]); //2\n````\n\n````javascript\n//包含正则表达式\nfunction deepClone(args) {\n  if (args instanceof Object) {\n    let result;\n    if (args instanceof Array) {\n      result = new Array();\n    } else if (args instanceof RegExp) {\n      result = new RegExp(args.source, args.flags);\n    } else {\n      result = new Object();\n    }\n    for (let key in args) {\n      result[key] = deepClone(args[key]);\n    }\n    return result;\n\n  }\n  return args;\n}\n\nlet obj1 = { reg: new RegExp(\"hi\\\\d+\", \"gi\") };\n\nlet obj2 = deepClone(obj1);\nconsole.log(obj1 === obj2); //false\nconsole.log(obj1.source === obj2.source); //true\nconsole.log(obj1.flags === obj2.flags); //true\n````\n\n````javascript\n//包含function\nfunction deepClone(args) {\n  if (args instanceof Object) {\n    let result;\n    if (args instanceof Array) {\n      result = new Array();\n    } else if (args instanceof Function) {\n      result = function () {\n        return args.apply(this, arguments);\n      };\n    } else if (args instanceof RegExp) {\n      result = new RegExp(args.source, args.flags);\n    } else {\n      result = new Object();\n    }\n    for (let key in args) {\n      result[key] = deepClone(args[key]);\n    }\n    return result;\n\n  }\n  return args;\n}\n\nlet obj1 = { fn: function (x, y) { return x + y + 1 } };\n\nlet obj2 = deepClone(obj1);\nconsole.log(obj1.fn === obj2.fn); //false\nconsole.log(obj1.fn(1, 1) === obj2.fn(1, 1)); //true\n````\n\n````javascript\n//包含循环引用\nlet cache = []; //创建拷贝记录， 每当发生一次拷贝时就记录原始数据和拷贝数据\nfunction deepClone(args) {\n  let cacheResult = findCache(args);\n  if (args instanceof Object) {\n    if (cacheResult) {\n      return cacheResult;\n    } else {\n      let result;\n      if (args instanceof Array) {\n        result = new Array();\n      } else if (args instanceof Function) {\n        result = function () {\n          return args.apply(this, arguments);\n        };\n      } else if (args instanceof RegExp) {\n      result = new RegExp(args.source, args.flags);\n      } else {\n        result = new Object();\n      }\n  \n      cache.push([args, result]); //拷贝记录\n      for (let key in args) {\n        if (args.hasOwnProperty(key)) {//不拷贝原型属性\n          result[key] = deepClone(args[key]);\n        }\n      }\n      return result;\n  \n    }\n  }\n\n  return args;\n}\n\nfunction findCache(args) { //查找拷贝记录\n  for (let i = 0; i < cache.length; i++) {\n    if (cache[i][0] === args) {\n      return cache[i][1];\n    }\n  }\n  return undefined;\n}\n\nlet obj1 = { a: 1 };\nobj1.self = obj1; //循环引用\n\nlet obj2 = deepClone(obj1);\nconsole.log(obj1 === obj2); //false\nobj1.a = 2;\nconsole.log(obj2.a); //1\nconsole.log(obj1.self === obj2.self); //false\n````\n\n以上代码能够支持的[深拷贝](https://github.com/wuwenxing0912/hand-writing/tree/master/deepClone)包括：Number、String、Boolean、Null、Undefined、Symbol、普通对象、Array、函数、正则表达式以及循环引用。\n\n","slug":"手写系列之一：深拷贝","published":1,"updated":"2021-06-10T15:18:27.580Z","_id":"ckpqc3vvc0000dwu001grgdfj","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h1><h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p>按照《JavaScript高级程序设计：第4版》书中的描述，JavaScript共有7种数据类型分别是：Undefined、Null、Boolean、Number、String、Symbol和Object。其中前6种是简单数据类型，也称为基本类型；Object是复杂数据类型，又称为引用类型。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//基本类型: Number</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;</span><br><span class=\"line\">b = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b); <span class=\"comment\">//1, 2 变量b重新赋值不影响变量a</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//基本类型: String</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str1 = <span class=\"string\">&#x27;str1&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = str1;</span><br><span class=\"line\">str2 = <span class=\"string\">&#x27;str2&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str1, str2); <span class=\"comment\">//&#x27;str1&#x27;, &#x27;str2&#x27; 变量b重新赋值不影响变量a</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//引用类型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = obj1;</span><br><span class=\"line\">obj2.x = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.x, obj2.x); <span class=\"comment\">//2, 2 修改obj2中的值影响了obj1</span></span><br></pre></td></tr></table></figure>\n\n<p>对于基本类型：一个变量赋值给另一个变量时，这两个变量互不影响。</p>\n<p>对于引用类型：一个对象赋值给另一个变量时，可以理解为复制的是对象的地址，因此这两个对象指向的是同一个存储空间。当其中一个发生改变时，另一个对象也会受到影响。</p>\n<p>所以要想隔断obj1和obj2的联系，可以拷贝一份obj1的数据。</p>\n<span id=\"more\"></span>\n\n<p>拷贝分为浅拷贝和深拷贝。浅拷贝创建一个新对象，这个对象有着原始对象属性值的一份相同拷贝；如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址 。深拷贝则是完全的拷贝。</p>\n<h2 id=\"浅拷贝与深拷贝\"><a href=\"#浅拷贝与深拷贝\" class=\"headerlink\" title=\"浅拷贝与深拷贝\"></a>浅拷贝与深拷贝</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//浅拷贝</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">o</span>: &#123;<span class=\"attr\">y</span>: <span class=\"number\">1</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = shallowClone(obj1);</span><br><span class=\"line\">obj2.x = <span class=\"number\">2</span>;</span><br><span class=\"line\">obj2.o.y = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.x, obj2.x); <span class=\"comment\">//1, 2   obj1无影响</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.o.y, obj2.o.y)<span class=\"comment\">// 2, 2  obj1被影响</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//深拷贝</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">o</span>: &#123;<span class=\"attr\">y</span>: <span class=\"number\">1</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = deepClone(obj1);</span><br><span class=\"line\">obj2.x = <span class=\"number\">2</span>;</span><br><span class=\"line\">obj2.o.y = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.x, obj2.x); <span class=\"comment\">//1, 2  obj1无影响</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.o.y, obj2.o.y)<span class=\"comment\">// 1, 2  obj1无影响</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"实现深拷贝\"><a href=\"#实现深拷贝\" class=\"headerlink\" title=\"实现深拷贝\"></a>实现深拷贝</h1><h2 id=\"1-JSON序列化反序列化\"><a href=\"#1-JSON序列化反序列化\" class=\"headerlink\" title=\"1. JSON序列化反序列化\"></a>1. JSON序列化反序列化</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">n</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">s</span>: <span class=\"string\">&#x27;str1&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">empty</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">bool</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">arr</span>: [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]],</span><br><span class=\"line\">  <span class=\"attr\">obj</span>: &#123;<span class=\"attr\">a</span>: <span class=\"string\">&#x27;a1&#x27;</span>, <span class=\"attr\">b</span>: <span class=\"string\">&#x27;b1&#x27;</span>&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(obj1));</span><br><span class=\"line\">obj2.n = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.n); <span class=\"comment\">//1</span></span><br><span class=\"line\">obj2.s = <span class=\"string\">&#x27;str1&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.s); <span class=\"comment\">//&#x27;str1&#x27;</span></span><br><span class=\"line\">obj2.bool = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.bool); <span class=\"comment\">//true</span></span><br><span class=\"line\">obj2.arr[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.arr[<span class=\"number\">0</span>]); <span class=\"comment\">//1</span></span><br><span class=\"line\">obj2.obj.a = <span class=\"string\">&#x27;a2&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.obj.a); <span class=\"comment\">//&#x27;a1&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>通过使用JSON序列化与反序列化可以比较完美的实现深拷贝，但是JSON仅支持上述几种类型，它不适用于函数、undefined、循环引用、正则 、Symbol等等。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">n</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">un</span>: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">  <span class=\"attr\">sym</span>: <span class=\"built_in\">Symbol</span>(),</span><br><span class=\"line\">  <span class=\"attr\">f</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">reg</span>: <span class=\"regexp\">/hi/</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(obj1));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2);<span class=\"comment\">// &#123; n: 1, reg: &#123;&#125; &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-递归克隆\"><a href=\"#2-递归克隆\" class=\"headerlink\" title=\"2. 递归克隆\"></a>2. 递归克隆</h2><p>使用递归深拷贝的思路是：如果节点是基本数据类型就直接拷贝；如果是Object就需要分情况讨论。</p>\n<h3 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepClone</span>(<span class=\"params\">args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> args;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//普通Object</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepClone</span>(<span class=\"params\">args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(args <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> args) &#123;</span><br><span class=\"line\">            result[key] = deepClone(args[key]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> args;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;x&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: &#123; <span class=\"attr\">year</span>: <span class=\"number\">2020</span> &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = deepClone(obj1);</span><br><span class=\"line\">obj2.name = <span class=\"string\">&#x27;xx&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.name); <span class=\"comment\">//&#x27;x&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.age === obj2.age); <span class=\"comment\">//false</span></span><br><span class=\"line\">obj2.age.year = <span class=\"number\">2021</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.age.year); <span class=\"comment\">//2020</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//包含Array</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepClone</span>(<span class=\"params\">args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (args <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (args <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>) &#123;</span><br><span class=\"line\">      result = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      result = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> args) &#123;</span><br><span class=\"line\">      result[key] = deepClone(args[key]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> args;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123; <span class=\"attr\">arr</span>: [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>]] &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = deepClone(obj1);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.arr === obj2.arr, obj1.arr[<span class=\"number\">1</span>] === obj2.arr[<span class=\"number\">1</span>]); <span class=\"comment\">//false false</span></span><br><span class=\"line\">obj2.arr[<span class=\"number\">1</span>][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.arr[<span class=\"number\">1</span>][<span class=\"number\">0</span>]); <span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//包含正则表达式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepClone</span>(<span class=\"params\">args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (args <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (args <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>) &#123;</span><br><span class=\"line\">      result = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (args <span class=\"keyword\">instanceof</span> <span class=\"built_in\">RegExp</span>) &#123;</span><br><span class=\"line\">      result = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(args.source, args.flags);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      result = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> args) &#123;</span><br><span class=\"line\">      result[key] = deepClone(args[key]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> args;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123; <span class=\"attr\">reg</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">&quot;hi\\\\d+&quot;</span>, <span class=\"string\">&quot;gi&quot;</span>) &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = deepClone(obj1);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1 === obj2); <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.source === obj2.source); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.flags === obj2.flags); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//包含function</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepClone</span>(<span class=\"params\">args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (args <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (args <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>) &#123;</span><br><span class=\"line\">      result = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (args <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span>) &#123;</span><br><span class=\"line\">      result = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> args.apply(<span class=\"built_in\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (args <span class=\"keyword\">instanceof</span> <span class=\"built_in\">RegExp</span>) &#123;</span><br><span class=\"line\">      result = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(args.source, args.flags);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      result = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> args) &#123;</span><br><span class=\"line\">      result[key] = deepClone(args[key]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> args;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123; <span class=\"attr\">fn</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) </span>&#123; <span class=\"keyword\">return</span> x + y + <span class=\"number\">1</span> &#125; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = deepClone(obj1);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.fn === obj2.fn); <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.fn(<span class=\"number\">1</span>, <span class=\"number\">1</span>) === obj2.fn(<span class=\"number\">1</span>, <span class=\"number\">1</span>)); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//包含循环引用</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> cache = []; <span class=\"comment\">//创建拷贝记录， 每当发生一次拷贝时就记录原始数据和拷贝数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepClone</span>(<span class=\"params\">args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> cacheResult = findCache(args);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (args <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cacheResult) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> cacheResult;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> result;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (args <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>) &#123;</span><br><span class=\"line\">        result = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (args <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span>) &#123;</span><br><span class=\"line\">        result = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> args.apply(<span class=\"built_in\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (args <span class=\"keyword\">instanceof</span> <span class=\"built_in\">RegExp</span>) &#123;</span><br><span class=\"line\">      result = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(args.source, args.flags);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        result = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">      cache.push([args, result]); <span class=\"comment\">//拷贝记录</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> args) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (args.hasOwnProperty(key)) &#123;<span class=\"comment\">//不拷贝原型属性</span></span><br><span class=\"line\">          result[key] = deepClone(args[key]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> args;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findCache</span>(<span class=\"params\">args</span>) </span>&#123; <span class=\"comment\">//查找拷贝记录</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; cache.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cache[i][<span class=\"number\">0</span>] === args) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> cache[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">obj1.self = obj1; <span class=\"comment\">//循环引用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = deepClone(obj1);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1 === obj2); <span class=\"comment\">//false</span></span><br><span class=\"line\">obj1.a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2.a); <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.self === obj2.self); <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<p>以上代码能够支持的<a href=\"https://github.com/wuwenxing0912/hand-writing/tree/master/deepClone\">深拷贝</a>包括：Number、String、Boolean、Null、Undefined、Symbol、普通对象、Array、函数、正则表达式以及循环引用。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h1><h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p>按照《JavaScript高级程序设计：第4版》书中的描述，JavaScript共有7种数据类型分别是：Undefined、Null、Boolean、Number、String、Symbol和Object。其中前6种是简单数据类型，也称为基本类型；Object是复杂数据类型，又称为引用类型。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//基本类型: Number</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;</span><br><span class=\"line\">b = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b); <span class=\"comment\">//1, 2 变量b重新赋值不影响变量a</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//基本类型: String</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str1 = <span class=\"string\">&#x27;str1&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = str1;</span><br><span class=\"line\">str2 = <span class=\"string\">&#x27;str2&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str1, str2); <span class=\"comment\">//&#x27;str1&#x27;, &#x27;str2&#x27; 变量b重新赋值不影响变量a</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//引用类型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = obj1;</span><br><span class=\"line\">obj2.x = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.x, obj2.x); <span class=\"comment\">//2, 2 修改obj2中的值影响了obj1</span></span><br></pre></td></tr></table></figure>\n\n<p>对于基本类型：一个变量赋值给另一个变量时，这两个变量互不影响。</p>\n<p>对于引用类型：一个对象赋值给另一个变量时，可以理解为复制的是对象的地址，因此这两个对象指向的是同一个存储空间。当其中一个发生改变时，另一个对象也会受到影响。</p>\n<p>所以要想隔断obj1和obj2的联系，可以拷贝一份obj1的数据。</p>","more":"<p>拷贝分为浅拷贝和深拷贝。浅拷贝创建一个新对象，这个对象有着原始对象属性值的一份相同拷贝；如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址 。深拷贝则是完全的拷贝。</p>\n<h2 id=\"浅拷贝与深拷贝\"><a href=\"#浅拷贝与深拷贝\" class=\"headerlink\" title=\"浅拷贝与深拷贝\"></a>浅拷贝与深拷贝</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//浅拷贝</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">o</span>: &#123;<span class=\"attr\">y</span>: <span class=\"number\">1</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = shallowClone(obj1);</span><br><span class=\"line\">obj2.x = <span class=\"number\">2</span>;</span><br><span class=\"line\">obj2.o.y = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.x, obj2.x); <span class=\"comment\">//1, 2   obj1无影响</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.o.y, obj2.o.y)<span class=\"comment\">// 2, 2  obj1被影响</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//深拷贝</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">o</span>: &#123;<span class=\"attr\">y</span>: <span class=\"number\">1</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = deepClone(obj1);</span><br><span class=\"line\">obj2.x = <span class=\"number\">2</span>;</span><br><span class=\"line\">obj2.o.y = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.x, obj2.x); <span class=\"comment\">//1, 2  obj1无影响</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.o.y, obj2.o.y)<span class=\"comment\">// 1, 2  obj1无影响</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"实现深拷贝\"><a href=\"#实现深拷贝\" class=\"headerlink\" title=\"实现深拷贝\"></a>实现深拷贝</h1><h2 id=\"1-JSON序列化反序列化\"><a href=\"#1-JSON序列化反序列化\" class=\"headerlink\" title=\"1. JSON序列化反序列化\"></a>1. JSON序列化反序列化</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">n</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">s</span>: <span class=\"string\">&#x27;str1&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">empty</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">bool</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">arr</span>: [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]],</span><br><span class=\"line\">  <span class=\"attr\">obj</span>: &#123;<span class=\"attr\">a</span>: <span class=\"string\">&#x27;a1&#x27;</span>, <span class=\"attr\">b</span>: <span class=\"string\">&#x27;b1&#x27;</span>&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(obj1));</span><br><span class=\"line\">obj2.n = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.n); <span class=\"comment\">//1</span></span><br><span class=\"line\">obj2.s = <span class=\"string\">&#x27;str1&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.s); <span class=\"comment\">//&#x27;str1&#x27;</span></span><br><span class=\"line\">obj2.bool = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.bool); <span class=\"comment\">//true</span></span><br><span class=\"line\">obj2.arr[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.arr[<span class=\"number\">0</span>]); <span class=\"comment\">//1</span></span><br><span class=\"line\">obj2.obj.a = <span class=\"string\">&#x27;a2&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.obj.a); <span class=\"comment\">//&#x27;a1&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>通过使用JSON序列化与反序列化可以比较完美的实现深拷贝，但是JSON仅支持上述几种类型，它不适用于函数、undefined、循环引用、正则 、Symbol等等。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">n</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">un</span>: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">  <span class=\"attr\">sym</span>: <span class=\"built_in\">Symbol</span>(),</span><br><span class=\"line\">  <span class=\"attr\">f</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">reg</span>: <span class=\"regexp\">/hi/</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(obj1));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2);<span class=\"comment\">// &#123; n: 1, reg: &#123;&#125; &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-递归克隆\"><a href=\"#2-递归克隆\" class=\"headerlink\" title=\"2. 递归克隆\"></a>2. 递归克隆</h2><p>使用递归深拷贝的思路是：如果节点是基本数据类型就直接拷贝；如果是Object就需要分情况讨论。</p>\n<h3 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepClone</span>(<span class=\"params\">args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> args;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//普通Object</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepClone</span>(<span class=\"params\">args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(args <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> args) &#123;</span><br><span class=\"line\">            result[key] = deepClone(args[key]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> args;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;x&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: &#123; <span class=\"attr\">year</span>: <span class=\"number\">2020</span> &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = deepClone(obj1);</span><br><span class=\"line\">obj2.name = <span class=\"string\">&#x27;xx&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.name); <span class=\"comment\">//&#x27;x&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.age === obj2.age); <span class=\"comment\">//false</span></span><br><span class=\"line\">obj2.age.year = <span class=\"number\">2021</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.age.year); <span class=\"comment\">//2020</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//包含Array</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepClone</span>(<span class=\"params\">args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (args <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (args <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>) &#123;</span><br><span class=\"line\">      result = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      result = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> args) &#123;</span><br><span class=\"line\">      result[key] = deepClone(args[key]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> args;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123; <span class=\"attr\">arr</span>: [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>]] &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = deepClone(obj1);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.arr === obj2.arr, obj1.arr[<span class=\"number\">1</span>] === obj2.arr[<span class=\"number\">1</span>]); <span class=\"comment\">//false false</span></span><br><span class=\"line\">obj2.arr[<span class=\"number\">1</span>][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.arr[<span class=\"number\">1</span>][<span class=\"number\">0</span>]); <span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//包含正则表达式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepClone</span>(<span class=\"params\">args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (args <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (args <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>) &#123;</span><br><span class=\"line\">      result = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (args <span class=\"keyword\">instanceof</span> <span class=\"built_in\">RegExp</span>) &#123;</span><br><span class=\"line\">      result = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(args.source, args.flags);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      result = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> args) &#123;</span><br><span class=\"line\">      result[key] = deepClone(args[key]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> args;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123; <span class=\"attr\">reg</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">&quot;hi\\\\d+&quot;</span>, <span class=\"string\">&quot;gi&quot;</span>) &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = deepClone(obj1);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1 === obj2); <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.source === obj2.source); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.flags === obj2.flags); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//包含function</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepClone</span>(<span class=\"params\">args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (args <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (args <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>) &#123;</span><br><span class=\"line\">      result = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (args <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span>) &#123;</span><br><span class=\"line\">      result = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> args.apply(<span class=\"built_in\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (args <span class=\"keyword\">instanceof</span> <span class=\"built_in\">RegExp</span>) &#123;</span><br><span class=\"line\">      result = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(args.source, args.flags);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      result = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> args) &#123;</span><br><span class=\"line\">      result[key] = deepClone(args[key]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> args;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123; <span class=\"attr\">fn</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) </span>&#123; <span class=\"keyword\">return</span> x + y + <span class=\"number\">1</span> &#125; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = deepClone(obj1);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.fn === obj2.fn); <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.fn(<span class=\"number\">1</span>, <span class=\"number\">1</span>) === obj2.fn(<span class=\"number\">1</span>, <span class=\"number\">1</span>)); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//包含循环引用</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> cache = []; <span class=\"comment\">//创建拷贝记录， 每当发生一次拷贝时就记录原始数据和拷贝数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepClone</span>(<span class=\"params\">args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> cacheResult = findCache(args);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (args <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cacheResult) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> cacheResult;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> result;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (args <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>) &#123;</span><br><span class=\"line\">        result = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (args <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span>) &#123;</span><br><span class=\"line\">        result = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> args.apply(<span class=\"built_in\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (args <span class=\"keyword\">instanceof</span> <span class=\"built_in\">RegExp</span>) &#123;</span><br><span class=\"line\">      result = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(args.source, args.flags);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        result = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">      cache.push([args, result]); <span class=\"comment\">//拷贝记录</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> args) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (args.hasOwnProperty(key)) &#123;<span class=\"comment\">//不拷贝原型属性</span></span><br><span class=\"line\">          result[key] = deepClone(args[key]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> args;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findCache</span>(<span class=\"params\">args</span>) </span>&#123; <span class=\"comment\">//查找拷贝记录</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; cache.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cache[i][<span class=\"number\">0</span>] === args) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> cache[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">obj1.self = obj1; <span class=\"comment\">//循环引用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = deepClone(obj1);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1 === obj2); <span class=\"comment\">//false</span></span><br><span class=\"line\">obj1.a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2.a); <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.self === obj2.self); <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<p>以上代码能够支持的<a href=\"https://github.com/wuwenxing0912/hand-writing/tree/master/deepClone\">深拷贝</a>包括：Number、String、Boolean、Null、Undefined、Symbol、普通对象、Array、函数、正则表达式以及循环引用。</p>"},{"title":"手写系列之二：EventHub","date":"2021-06-11T09:20:12.000Z","_content":"\n# 何时使用EventHub\n\n曾经在实际开发工作中遇到如下场景：在一个页面中有2个Tab页(Tab之间切换不会刷新页面)，其中Tab A展示接入设备的数量使用情况；Tab B可允许用户对设备接入数量进行扩容，要求在Tab B成功进行扩容后Tab A随后自动更新数据。EventHub则正好适用于这种场景。EventHub可用于模块之间通信：Tab A注册/监听(on)更新事件，在Tab B触发(emit)更新事件后，Tab A做出相应行为。\n\n# 实现EventHub\n\nEventHub包含3个方法：on(注册/监听)、emit(触发)、off(取消)。\n\n<!-- more -->\n\n- on 方法\n\n  ````typescript\n  class EventHub {\n      cache: {[key: string]: Array<(data: unknown) => void>} = {}\n      //cache的类型是对象，key的类型是string，value的类型是数组，数组中的函数接受一个参数，参数类型unknown，返回值void。\n      \n      //cache的结构\n      //{\n      // 'eventName1': [fn1, fn2, fn3],\n      // 'eventName2': [fn4, fn5, fn6],\n      //}\n      \n      //把fn存入this.cache[eventName]数组\n      on (eventName: string, fn: (data: unknown) => void) { \n      //接收2个参数，第一个参数是注册/监听的事件名(类型为string)，第二个参数是事件触发后做出的行为函数(接受一个参数，参数类型unknown，返回值void)。\n          this.cache[eventName] = this.cache[eventName] || [];//初始化\n          this.cache[eventName].push(fn);\n      }\n  }\n  ````\n\n  \n\n- emit 方法\n\n  ````typescript\n  class EventHub {\n      cache: {[key: string]: Array<(data: unknown) => void>} = {}\n      //cache的类型是对象，key的类型是string，value的类型是数组，数组中的函数接受一个参数，参数类型unknown，返回值void。\n      \n      //把this.cache[eventName]数组中的fn依次调用\n      emit (eventName: string, data: unknown) { \n      //接收2个参数，第一个参数是触发的事件名(类型为string)，第二个参数是触发事件传递的数据(参数类型unknown)。\n          (this.cache[eventName] || []).forEach(fn => fn(data));\n      }\n  }\n  ````\n\n  \n\n- off 方法\n\n````typescript\nclass EventHub {\n    cache: {[key: string]: Array<(data: unknown) => void>} = {}\n    //cache的类型是对象，key的类型是string，value的类型是数组，数组中的函数接受一个参数，参数类型unknown，返回值void。\n    \n    //把this.cache[eventName]数组中的fn删除\n    off (eventName: string, fn: (data: unknown) => void) { \n    //接收2个参数，第一个参数是注册/监听的事件名(类型为string)，第二个参数是事件触发后做出的行为函数(接受一个参数，参数类型unknown，返回值void)。\n      let index = indexOf(this.cache[eventName], fn);\n      if (index === -1) return;\n      this.cache[eventName].splice(index, 1);\n    }\n}\n\nfunction  indexOf(array, fn) {//找到fn在this.cache[eventName]中的位置\n  let index = -1;\n  if (array === undefined) return -1;\n\n  for(let i = 0; i < array.length; i++) {\n    if (array[i] === fn) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n}\n````\n\n至此，on、emit、off均已实现，[完整代码](https://github.com/wuwenxing0912/hand-writing/tree/master/EventHub)如下：\n\n````typescript\n class EventHub {\n   cache: {[key: string]: Array<(data: unknown) => void>} = {}\n\n   on(eventName: string, fn: (data: unknown) => void) {\n     this.cache[eventName] = this.cache[eventName] || [];\n     this.cache[eventName].push(fn);\n   }\n\n   emit(eventName: string, data?: unknown) {\n     (this.cache[eventName] || []).forEach(fn => fn(data));\n   }\n\n   off(eventName: string, fn: (data: unknown) => void) {\n     let index = indexOf(this.cache[eventName], fn);\n     if (index === -1) return;\n     this.cache[eventName].splice(index, 1);\n   }\n };\n\nfunction  indexOf(array, fn) {\n  let index = -1;\n  if (array === undefined) return -1;\n\n  for(let i = 0; i < array.length; i++) {\n    if (array[i] === fn) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n}\n````\n\n","source":"_posts/手写系列之二：EventHub.md","raw":"---\ntitle: 手写系列之二：EventHub\ndate: 2021-06-11 17:20:12\ntags: [\"EventHub\", \"手写系列\"]\ncategories: JavaScript\n---\n\n# 何时使用EventHub\n\n曾经在实际开发工作中遇到如下场景：在一个页面中有2个Tab页(Tab之间切换不会刷新页面)，其中Tab A展示接入设备的数量使用情况；Tab B可允许用户对设备接入数量进行扩容，要求在Tab B成功进行扩容后Tab A随后自动更新数据。EventHub则正好适用于这种场景。EventHub可用于模块之间通信：Tab A注册/监听(on)更新事件，在Tab B触发(emit)更新事件后，Tab A做出相应行为。\n\n# 实现EventHub\n\nEventHub包含3个方法：on(注册/监听)、emit(触发)、off(取消)。\n\n<!-- more -->\n\n- on 方法\n\n  ````typescript\n  class EventHub {\n      cache: {[key: string]: Array<(data: unknown) => void>} = {}\n      //cache的类型是对象，key的类型是string，value的类型是数组，数组中的函数接受一个参数，参数类型unknown，返回值void。\n      \n      //cache的结构\n      //{\n      // 'eventName1': [fn1, fn2, fn3],\n      // 'eventName2': [fn4, fn5, fn6],\n      //}\n      \n      //把fn存入this.cache[eventName]数组\n      on (eventName: string, fn: (data: unknown) => void) { \n      //接收2个参数，第一个参数是注册/监听的事件名(类型为string)，第二个参数是事件触发后做出的行为函数(接受一个参数，参数类型unknown，返回值void)。\n          this.cache[eventName] = this.cache[eventName] || [];//初始化\n          this.cache[eventName].push(fn);\n      }\n  }\n  ````\n\n  \n\n- emit 方法\n\n  ````typescript\n  class EventHub {\n      cache: {[key: string]: Array<(data: unknown) => void>} = {}\n      //cache的类型是对象，key的类型是string，value的类型是数组，数组中的函数接受一个参数，参数类型unknown，返回值void。\n      \n      //把this.cache[eventName]数组中的fn依次调用\n      emit (eventName: string, data: unknown) { \n      //接收2个参数，第一个参数是触发的事件名(类型为string)，第二个参数是触发事件传递的数据(参数类型unknown)。\n          (this.cache[eventName] || []).forEach(fn => fn(data));\n      }\n  }\n  ````\n\n  \n\n- off 方法\n\n````typescript\nclass EventHub {\n    cache: {[key: string]: Array<(data: unknown) => void>} = {}\n    //cache的类型是对象，key的类型是string，value的类型是数组，数组中的函数接受一个参数，参数类型unknown，返回值void。\n    \n    //把this.cache[eventName]数组中的fn删除\n    off (eventName: string, fn: (data: unknown) => void) { \n    //接收2个参数，第一个参数是注册/监听的事件名(类型为string)，第二个参数是事件触发后做出的行为函数(接受一个参数，参数类型unknown，返回值void)。\n      let index = indexOf(this.cache[eventName], fn);\n      if (index === -1) return;\n      this.cache[eventName].splice(index, 1);\n    }\n}\n\nfunction  indexOf(array, fn) {//找到fn在this.cache[eventName]中的位置\n  let index = -1;\n  if (array === undefined) return -1;\n\n  for(let i = 0; i < array.length; i++) {\n    if (array[i] === fn) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n}\n````\n\n至此，on、emit、off均已实现，[完整代码](https://github.com/wuwenxing0912/hand-writing/tree/master/EventHub)如下：\n\n````typescript\n class EventHub {\n   cache: {[key: string]: Array<(data: unknown) => void>} = {}\n\n   on(eventName: string, fn: (data: unknown) => void) {\n     this.cache[eventName] = this.cache[eventName] || [];\n     this.cache[eventName].push(fn);\n   }\n\n   emit(eventName: string, data?: unknown) {\n     (this.cache[eventName] || []).forEach(fn => fn(data));\n   }\n\n   off(eventName: string, fn: (data: unknown) => void) {\n     let index = indexOf(this.cache[eventName], fn);\n     if (index === -1) return;\n     this.cache[eventName].splice(index, 1);\n   }\n };\n\nfunction  indexOf(array, fn) {\n  let index = -1;\n  if (array === undefined) return -1;\n\n  for(let i = 0; i < array.length; i++) {\n    if (array[i] === fn) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n}\n````\n\n","slug":"手写系列之二：EventHub","published":1,"updated":"2021-06-12T07:45:14.084Z","_id":"ckps4qo9o00008wu04twxbrh0","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"何时使用EventHub\"><a href=\"#何时使用EventHub\" class=\"headerlink\" title=\"何时使用EventHub\"></a>何时使用EventHub</h1><p>曾经在实际开发工作中遇到如下场景：在一个页面中有2个Tab页(Tab之间切换不会刷新页面)，其中Tab A展示接入设备的数量使用情况；Tab B可允许用户对设备接入数量进行扩容，要求在Tab B成功进行扩容后Tab A随后自动更新数据。EventHub则正好适用于这种场景。EventHub可用于模块之间通信：Tab A注册/监听(on)更新事件，在Tab B触发(emit)更新事件后，Tab A做出相应行为。</p>\n<h1 id=\"实现EventHub\"><a href=\"#实现EventHub\" class=\"headerlink\" title=\"实现EventHub\"></a>实现EventHub</h1><p>EventHub包含3个方法：on(注册/监听)、emit(触发)、off(取消)。</p>\n<span id=\"more\"></span>\n\n<ul>\n<li><p>on 方法</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EventHub</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">cache</span>: &#123;[key: <span class=\"built_in\">string</span>]: <span class=\"built_in\">Array</span>&lt;<span class=\"function\">(<span class=\"params\">data: unknown</span>) =&gt;</span> <span class=\"built_in\">void</span>&gt;&#125; = &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">//cache的类型是对象，key的类型是string，value的类型是数组，数组中的函数接受一个参数，参数类型unknown，返回值void。</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//cache的结构</span></span><br><span class=\"line\">    <span class=\"comment\">//&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#x27;eventName1&#x27;: [fn1, fn2, fn3],</span></span><br><span class=\"line\">    <span class=\"comment\">// &#x27;eventName2&#x27;: [fn4, fn5, fn6],</span></span><br><span class=\"line\">    <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//把fn存入this.cache[eventName]数组</span></span><br><span class=\"line\">    on (eventName: <span class=\"built_in\">string</span>, <span class=\"attr\">fn</span>: <span class=\"function\">(<span class=\"params\">data: unknown</span>) =&gt;</span> <span class=\"built_in\">void</span>) &#123; </span><br><span class=\"line\">    <span class=\"comment\">//接收2个参数，第一个参数是注册/监听的事件名(类型为string)，第二个参数是事件触发后做出的行为函数(接受一个参数，参数类型unknown，返回值void)。</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.cache[eventName] = <span class=\"built_in\">this</span>.cache[eventName] || [];<span class=\"comment\">//初始化</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.cache[eventName].push(fn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>emit 方法</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EventHub</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">cache</span>: &#123;[key: <span class=\"built_in\">string</span>]: <span class=\"built_in\">Array</span>&lt;<span class=\"function\">(<span class=\"params\">data: unknown</span>) =&gt;</span> <span class=\"built_in\">void</span>&gt;&#125; = &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">//cache的类型是对象，key的类型是string，value的类型是数组，数组中的函数接受一个参数，参数类型unknown，返回值void。</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//把this.cache[eventName]数组中的fn依次调用</span></span><br><span class=\"line\">    emit (eventName: <span class=\"built_in\">string</span>, <span class=\"attr\">data</span>: unknown) &#123; </span><br><span class=\"line\">    <span class=\"comment\">//接收2个参数，第一个参数是触发的事件名(类型为string)，第二个参数是触发事件传递的数据(参数类型unknown)。</span></span><br><span class=\"line\">        (<span class=\"built_in\">this</span>.cache[eventName] || []).forEach(<span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> fn(data));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>off 方法</p>\n</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EventHub</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">cache</span>: &#123;[key: <span class=\"built_in\">string</span>]: <span class=\"built_in\">Array</span>&lt;<span class=\"function\">(<span class=\"params\">data: unknown</span>) =&gt;</span> <span class=\"built_in\">void</span>&gt;&#125; = &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">//cache的类型是对象，key的类型是string，value的类型是数组，数组中的函数接受一个参数，参数类型unknown，返回值void。</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//把this.cache[eventName]数组中的fn删除</span></span><br><span class=\"line\">    off (eventName: <span class=\"built_in\">string</span>, <span class=\"attr\">fn</span>: <span class=\"function\">(<span class=\"params\">data: unknown</span>) =&gt;</span> <span class=\"built_in\">void</span>) &#123; </span><br><span class=\"line\">    <span class=\"comment\">//接收2个参数，第一个参数是注册/监听的事件名(类型为string)，第二个参数是事件触发后做出的行为函数(接受一个参数，参数类型unknown，返回值void)。</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> index = indexOf(<span class=\"built_in\">this</span>.cache[eventName], fn);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (index === -<span class=\"number\">1</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.cache[eventName].splice(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"title\">indexOf</span>(<span class=\"params\">array, fn</span>) </span>&#123;<span class=\"comment\">//找到fn在this.cache[eventName]中的位置</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> index = -<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (array === <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array[i] === fn) &#123;</span><br><span class=\"line\">      index = i;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> index;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>至此，on、emit、off均已实现，<a href=\"https://github.com/wuwenxing0912/hand-writing/tree/master/EventHub\">完整代码</a>如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EventHub</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"attr\">cache</span>: &#123;[key: <span class=\"built_in\">string</span>]: <span class=\"built_in\">Array</span>&lt;<span class=\"function\">(<span class=\"params\">data: unknown</span>) =&gt;</span> <span class=\"built_in\">void</span>&gt;&#125; = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"title\">on</span>(<span class=\"params\">eventName: <span class=\"built_in\">string</span>, fn: (data: unknown) =&gt; <span class=\"built_in\">void</span></span>)</span> &#123;</span><br><span class=\"line\">     <span class=\"built_in\">this</span>.cache[eventName] = <span class=\"built_in\">this</span>.cache[eventName] || [];</span><br><span class=\"line\">     <span class=\"built_in\">this</span>.cache[eventName].push(fn);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"title\">emit</span>(<span class=\"params\">eventName: <span class=\"built_in\">string</span>, data?: unknown</span>)</span> &#123;</span><br><span class=\"line\">     (<span class=\"built_in\">this</span>.cache[eventName] || []).forEach(<span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> fn(data));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"title\">off</span>(<span class=\"params\">eventName: <span class=\"built_in\">string</span>, fn: (data: unknown) =&gt; <span class=\"built_in\">void</span></span>)</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> index = indexOf(<span class=\"built_in\">this</span>.cache[eventName], fn);</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (index === -<span class=\"number\">1</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">     <span class=\"built_in\">this</span>.cache[eventName].splice(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"title\">indexOf</span>(<span class=\"params\">array, fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> index = -<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (array === <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array[i] === fn) &#123;</span><br><span class=\"line\">      index = i;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> index;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h1 id=\"何时使用EventHub\"><a href=\"#何时使用EventHub\" class=\"headerlink\" title=\"何时使用EventHub\"></a>何时使用EventHub</h1><p>曾经在实际开发工作中遇到如下场景：在一个页面中有2个Tab页(Tab之间切换不会刷新页面)，其中Tab A展示接入设备的数量使用情况；Tab B可允许用户对设备接入数量进行扩容，要求在Tab B成功进行扩容后Tab A随后自动更新数据。EventHub则正好适用于这种场景。EventHub可用于模块之间通信：Tab A注册/监听(on)更新事件，在Tab B触发(emit)更新事件后，Tab A做出相应行为。</p>\n<h1 id=\"实现EventHub\"><a href=\"#实现EventHub\" class=\"headerlink\" title=\"实现EventHub\"></a>实现EventHub</h1><p>EventHub包含3个方法：on(注册/监听)、emit(触发)、off(取消)。</p>","more":"<ul>\n<li><p>on 方法</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EventHub</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">cache</span>: &#123;[key: <span class=\"built_in\">string</span>]: <span class=\"built_in\">Array</span>&lt;<span class=\"function\">(<span class=\"params\">data: unknown</span>) =&gt;</span> <span class=\"built_in\">void</span>&gt;&#125; = &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">//cache的类型是对象，key的类型是string，value的类型是数组，数组中的函数接受一个参数，参数类型unknown，返回值void。</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//cache的结构</span></span><br><span class=\"line\">    <span class=\"comment\">//&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#x27;eventName1&#x27;: [fn1, fn2, fn3],</span></span><br><span class=\"line\">    <span class=\"comment\">// &#x27;eventName2&#x27;: [fn4, fn5, fn6],</span></span><br><span class=\"line\">    <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//把fn存入this.cache[eventName]数组</span></span><br><span class=\"line\">    on (eventName: <span class=\"built_in\">string</span>, <span class=\"attr\">fn</span>: <span class=\"function\">(<span class=\"params\">data: unknown</span>) =&gt;</span> <span class=\"built_in\">void</span>) &#123; </span><br><span class=\"line\">    <span class=\"comment\">//接收2个参数，第一个参数是注册/监听的事件名(类型为string)，第二个参数是事件触发后做出的行为函数(接受一个参数，参数类型unknown，返回值void)。</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.cache[eventName] = <span class=\"built_in\">this</span>.cache[eventName] || [];<span class=\"comment\">//初始化</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.cache[eventName].push(fn);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>emit 方法</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EventHub</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">cache</span>: &#123;[key: <span class=\"built_in\">string</span>]: <span class=\"built_in\">Array</span>&lt;<span class=\"function\">(<span class=\"params\">data: unknown</span>) =&gt;</span> <span class=\"built_in\">void</span>&gt;&#125; = &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">//cache的类型是对象，key的类型是string，value的类型是数组，数组中的函数接受一个参数，参数类型unknown，返回值void。</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//把this.cache[eventName]数组中的fn依次调用</span></span><br><span class=\"line\">    emit (eventName: <span class=\"built_in\">string</span>, <span class=\"attr\">data</span>: unknown) &#123; </span><br><span class=\"line\">    <span class=\"comment\">//接收2个参数，第一个参数是触发的事件名(类型为string)，第二个参数是触发事件传递的数据(参数类型unknown)。</span></span><br><span class=\"line\">        (<span class=\"built_in\">this</span>.cache[eventName] || []).forEach(<span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> fn(data));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>off 方法</p>\n</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EventHub</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">cache</span>: &#123;[key: <span class=\"built_in\">string</span>]: <span class=\"built_in\">Array</span>&lt;<span class=\"function\">(<span class=\"params\">data: unknown</span>) =&gt;</span> <span class=\"built_in\">void</span>&gt;&#125; = &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">//cache的类型是对象，key的类型是string，value的类型是数组，数组中的函数接受一个参数，参数类型unknown，返回值void。</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//把this.cache[eventName]数组中的fn删除</span></span><br><span class=\"line\">    off (eventName: <span class=\"built_in\">string</span>, <span class=\"attr\">fn</span>: <span class=\"function\">(<span class=\"params\">data: unknown</span>) =&gt;</span> <span class=\"built_in\">void</span>) &#123; </span><br><span class=\"line\">    <span class=\"comment\">//接收2个参数，第一个参数是注册/监听的事件名(类型为string)，第二个参数是事件触发后做出的行为函数(接受一个参数，参数类型unknown，返回值void)。</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> index = indexOf(<span class=\"built_in\">this</span>.cache[eventName], fn);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (index === -<span class=\"number\">1</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.cache[eventName].splice(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"title\">indexOf</span>(<span class=\"params\">array, fn</span>) </span>&#123;<span class=\"comment\">//找到fn在this.cache[eventName]中的位置</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> index = -<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (array === <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array[i] === fn) &#123;</span><br><span class=\"line\">      index = i;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> index;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>至此，on、emit、off均已实现，<a href=\"https://github.com/wuwenxing0912/hand-writing/tree/master/EventHub\">完整代码</a>如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EventHub</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"attr\">cache</span>: &#123;[key: <span class=\"built_in\">string</span>]: <span class=\"built_in\">Array</span>&lt;<span class=\"function\">(<span class=\"params\">data: unknown</span>) =&gt;</span> <span class=\"built_in\">void</span>&gt;&#125; = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"title\">on</span>(<span class=\"params\">eventName: <span class=\"built_in\">string</span>, fn: (data: unknown) =&gt; <span class=\"built_in\">void</span></span>)</span> &#123;</span><br><span class=\"line\">     <span class=\"built_in\">this</span>.cache[eventName] = <span class=\"built_in\">this</span>.cache[eventName] || [];</span><br><span class=\"line\">     <span class=\"built_in\">this</span>.cache[eventName].push(fn);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"title\">emit</span>(<span class=\"params\">eventName: <span class=\"built_in\">string</span>, data?: unknown</span>)</span> &#123;</span><br><span class=\"line\">     (<span class=\"built_in\">this</span>.cache[eventName] || []).forEach(<span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> fn(data));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"title\">off</span>(<span class=\"params\">eventName: <span class=\"built_in\">string</span>, fn: (data: unknown) =&gt; <span class=\"built_in\">void</span></span>)</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> index = indexOf(<span class=\"built_in\">this</span>.cache[eventName], fn);</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (index === -<span class=\"number\">1</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">     <span class=\"built_in\">this</span>.cache[eventName].splice(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"title\">indexOf</span>(<span class=\"params\">array, fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> index = -<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (array === <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array[i] === fn) &#123;</span><br><span class=\"line\">      index = i;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> index;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"搭建基于Hexo5博客遇到的问题","date":"2021-06-15T02:56:26.000Z","_content":"\n# 前言\n\n早些时候使用Hexo 4成功搭建了个人博客。现在更换了电脑，生成博客的源代码也没有备份，只好重头开始。Hexo已经更新到5.4.0，与Hexo 4有些不同，所以开篇博客记录在安装时遇到的问题(本文的操作平台是Windows 10环境)。\n\n# hexo init\n\n与Hexo 4不同的是，使用Hexo 5就倒在了第一步：初始化失败。报错内容大致如下：\n\n````javascript\nINFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git\nfatal: unable to access 'https://github.com/xxx': OpenSSL SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443\nWARN  git clone failed. Copying data instead\nFATAL {\n  err: [Error: ENOENT: no such file or directory, scandir 'C:\\Users\\xxx\\AppData\\Roaming\\npm\\node_modules\\hexo-cli\\assets'] {\n    errno: -4058,\n    code: 'ENOENT',\n    syscall: 'scandir',\n    path: 'C:\\\\Users\\\\xxx\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\hexo-cli\\\\assets'\n  }\n} Something's wrong. Maybe you can find the solution here: %s http://hexo.io/docs/troubleshooting.html\n````\n\n在搜索解决方法时，有些答案认为是因为github被墙或者是git设置了http代理所导致，对于前者我试着挂好了梯子(github、google均能正常使用)初始化仍然失败；接着检查了http代理也不存在问题。\n\n最后的解决办法是：替换github链接。首先在你的电脑找到init.js文件，大致路径：C:\\Users\\xxx\\AppData\\Roaming\\npm\\node_modules\\hexo-cli\\lib\\console\\init.js，搜索GIT_REPO_URL字段后做如下替换：\n\n<!-- more -->\n\n````javascript\n//原链接\nconst GIT_REPO_URL = 'https://github.com/hexojs/hexo-starter.git';\n//替换后的链接\nconst GIT_REPO_URL = 'https://github.com.cnpmjs.org/hexojs/hexo-starter.git';\n````\n\n重新输入命令hexo init 初始化成功。\n\n# hexo-theme-next 主题\n\n[hexo-theme-next](https://github.com/iissnan/hexo-theme-next) 是Hexo一个非常受欢迎的极简风格主题。在成功搭建Hexo博客后使用该主题，然而却出现了以下问题：\n\n- 博客主页乱码\n\n  打开个人博客主页后，出现如下乱码，无法正常显示\n\n  ````javascript\n  {% extends '_layout.swig' %} {% import '_macro/post.swig' as post_template %}\n  ````\n\n  原因是因为在 Hexo 5.0 之后删除了依赖 hexo-renderer-swig，解决方法：\n\n  ````javascript\n  npm i hexo-renderer-swig\n  ````\n\n  \n\n- 图片无法正常显示\n\n  查看以前写的博客发现，图片均无法加载。打开控制台，显示请求图片文件返回404。猜测 Hexo 5 引入图片方式发生变化，随后按照如下方式引入图片：\n\n  ````javascript\n  {% asset_img example.jpg avatar %}\n  ````\n\n  更改之后，请求图片文件依然返回404。仔细查看请求发现请求路径中多了：/.com//    ，解决方法如下：\n\n  1.安装 hexo-asset-image 插件\n\n  ````javascript\n  npm i hexo-asset-image\n  ````\n\n   2.把当前目录下的  /node_modules/hexo-asset-image/index.js 文件中的代码替换成如下代码：\n\n  ````javascript\n  'use strict';\n  var cheerio = require('cheerio');\n  \n  function getPosition(str, m, i) {\n  return str.split(m, i).join(m).length;\n  }\n  \n  var version = String(hexo.version).split('.');\n  hexo.extend.filter.register('after_post_render', function(data){\n  var config = hexo.config;\n  if(config.post_asset_folder){    \n    var link = data.permalink;\n    if(version.length > 0 && Number(version[0]) == 3)\n       var beginPos = getPosition(link, '/', 1) + 1;\n    else\n       var beginPos = getPosition(link, '/', 3) + 1;\n    // In hexo 3.1.1, the permalink of \"about\" page is like \".../about/index.html\".\n    var endPos = link.lastIndexOf('/') + 1;\n    link = link.substring(beginPos, endPos);\n    \n    var toprocess = ['excerpt', 'more', 'content'];\n    for(var i = 0; i < toprocess.length; i++){\n      var key = toprocess[i];\n    \n      var $ = cheerio.load(data[key], {\n        ignoreWhitespace: false,\n        xmlMode: false,\n        lowerCaseTags: false,\n        decodeEntities: false\n      });\n    \n      $('img').each(function(){\n        if ($(this).attr('src')){\n            // For windows style path, we replace '\\' to '/'.\n            var src = $(this).attr('src').replace('\\\\', '/');\n            if(!/http[s]*.*|\\/\\/.*/.test(src) &&\n               !/^\\s*\\//.test(src)) {\n              // For \"about\" page, the first part of \"src\" can't be removed.\n              // In addition, to support multi-level local directory.\n              var linkArray = link.split('/').filter(function(elem){\n                return elem != '';\n              });\n              var srcArray = src.split('/').filter(function(elem){\n                return elem != '' && elem != '.';\n              });\n              if(srcArray.length > 1)\n                srcArray.shift();\n              src = srcArray.join('/');\n              $(this).attr('src', config.root + link + src);\n              console.info&&console.info(\"update link as:-->\"+config.root + link + src);\n            }\n        }else{\n            console.info&&console.info(\"no src attr, skipped...\");\n            console.info&&console.info($(this));\n        }\n      });\n      data[key] = $.html();\n        }\n      }\n    });\n  ````\n\n  \n\n- 翻页按钮不正常显示\n\n  博客页面底部翻页页码 1 2 后 显示 ：\n\n  ````html\n  <i class=\"fa fa-angle-right\"></i>\n  ````\n\n  解决方法：把当前目录下的 \\themes\\next\\layout\\_partials\\pagination.swig  文件中的代码替换成如下代码\n\n  ````javascript\n  {% if page.prev or page.next %}\n    <nav class=\"pagination\">\n      {{\n        paginator({\n          prev_text: '<',\n          next_text: '>',\n          mid_size: 1\n        })\n      }}\n    </nav>\n  {% endif %}\n  ````\n\n  \n\n","source":"_posts/搭建基于Hexo5博客遇到的问题.md","raw":"---\ntitle: 搭建基于Hexo5博客遇到的问题\ndate: 2021-06-15 10:56:26\ntags: [\"Hexo\", \"hexo-theme-next\", \"hexo init\", \"hexo-theme-next 图片无法加载\"]\ncategories: Hexo\n---\n\n# 前言\n\n早些时候使用Hexo 4成功搭建了个人博客。现在更换了电脑，生成博客的源代码也没有备份，只好重头开始。Hexo已经更新到5.4.0，与Hexo 4有些不同，所以开篇博客记录在安装时遇到的问题(本文的操作平台是Windows 10环境)。\n\n# hexo init\n\n与Hexo 4不同的是，使用Hexo 5就倒在了第一步：初始化失败。报错内容大致如下：\n\n````javascript\nINFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git\nfatal: unable to access 'https://github.com/xxx': OpenSSL SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443\nWARN  git clone failed. Copying data instead\nFATAL {\n  err: [Error: ENOENT: no such file or directory, scandir 'C:\\Users\\xxx\\AppData\\Roaming\\npm\\node_modules\\hexo-cli\\assets'] {\n    errno: -4058,\n    code: 'ENOENT',\n    syscall: 'scandir',\n    path: 'C:\\\\Users\\\\xxx\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\hexo-cli\\\\assets'\n  }\n} Something's wrong. Maybe you can find the solution here: %s http://hexo.io/docs/troubleshooting.html\n````\n\n在搜索解决方法时，有些答案认为是因为github被墙或者是git设置了http代理所导致，对于前者我试着挂好了梯子(github、google均能正常使用)初始化仍然失败；接着检查了http代理也不存在问题。\n\n最后的解决办法是：替换github链接。首先在你的电脑找到init.js文件，大致路径：C:\\Users\\xxx\\AppData\\Roaming\\npm\\node_modules\\hexo-cli\\lib\\console\\init.js，搜索GIT_REPO_URL字段后做如下替换：\n\n<!-- more -->\n\n````javascript\n//原链接\nconst GIT_REPO_URL = 'https://github.com/hexojs/hexo-starter.git';\n//替换后的链接\nconst GIT_REPO_URL = 'https://github.com.cnpmjs.org/hexojs/hexo-starter.git';\n````\n\n重新输入命令hexo init 初始化成功。\n\n# hexo-theme-next 主题\n\n[hexo-theme-next](https://github.com/iissnan/hexo-theme-next) 是Hexo一个非常受欢迎的极简风格主题。在成功搭建Hexo博客后使用该主题，然而却出现了以下问题：\n\n- 博客主页乱码\n\n  打开个人博客主页后，出现如下乱码，无法正常显示\n\n  ````javascript\n  {% extends '_layout.swig' %} {% import '_macro/post.swig' as post_template %}\n  ````\n\n  原因是因为在 Hexo 5.0 之后删除了依赖 hexo-renderer-swig，解决方法：\n\n  ````javascript\n  npm i hexo-renderer-swig\n  ````\n\n  \n\n- 图片无法正常显示\n\n  查看以前写的博客发现，图片均无法加载。打开控制台，显示请求图片文件返回404。猜测 Hexo 5 引入图片方式发生变化，随后按照如下方式引入图片：\n\n  ````javascript\n  {% asset_img example.jpg avatar %}\n  ````\n\n  更改之后，请求图片文件依然返回404。仔细查看请求发现请求路径中多了：/.com//    ，解决方法如下：\n\n  1.安装 hexo-asset-image 插件\n\n  ````javascript\n  npm i hexo-asset-image\n  ````\n\n   2.把当前目录下的  /node_modules/hexo-asset-image/index.js 文件中的代码替换成如下代码：\n\n  ````javascript\n  'use strict';\n  var cheerio = require('cheerio');\n  \n  function getPosition(str, m, i) {\n  return str.split(m, i).join(m).length;\n  }\n  \n  var version = String(hexo.version).split('.');\n  hexo.extend.filter.register('after_post_render', function(data){\n  var config = hexo.config;\n  if(config.post_asset_folder){    \n    var link = data.permalink;\n    if(version.length > 0 && Number(version[0]) == 3)\n       var beginPos = getPosition(link, '/', 1) + 1;\n    else\n       var beginPos = getPosition(link, '/', 3) + 1;\n    // In hexo 3.1.1, the permalink of \"about\" page is like \".../about/index.html\".\n    var endPos = link.lastIndexOf('/') + 1;\n    link = link.substring(beginPos, endPos);\n    \n    var toprocess = ['excerpt', 'more', 'content'];\n    for(var i = 0; i < toprocess.length; i++){\n      var key = toprocess[i];\n    \n      var $ = cheerio.load(data[key], {\n        ignoreWhitespace: false,\n        xmlMode: false,\n        lowerCaseTags: false,\n        decodeEntities: false\n      });\n    \n      $('img').each(function(){\n        if ($(this).attr('src')){\n            // For windows style path, we replace '\\' to '/'.\n            var src = $(this).attr('src').replace('\\\\', '/');\n            if(!/http[s]*.*|\\/\\/.*/.test(src) &&\n               !/^\\s*\\//.test(src)) {\n              // For \"about\" page, the first part of \"src\" can't be removed.\n              // In addition, to support multi-level local directory.\n              var linkArray = link.split('/').filter(function(elem){\n                return elem != '';\n              });\n              var srcArray = src.split('/').filter(function(elem){\n                return elem != '' && elem != '.';\n              });\n              if(srcArray.length > 1)\n                srcArray.shift();\n              src = srcArray.join('/');\n              $(this).attr('src', config.root + link + src);\n              console.info&&console.info(\"update link as:-->\"+config.root + link + src);\n            }\n        }else{\n            console.info&&console.info(\"no src attr, skipped...\");\n            console.info&&console.info($(this));\n        }\n      });\n      data[key] = $.html();\n        }\n      }\n    });\n  ````\n\n  \n\n- 翻页按钮不正常显示\n\n  博客页面底部翻页页码 1 2 后 显示 ：\n\n  ````html\n  <i class=\"fa fa-angle-right\"></i>\n  ````\n\n  解决方法：把当前目录下的 \\themes\\next\\layout\\_partials\\pagination.swig  文件中的代码替换成如下代码\n\n  ````javascript\n  {% if page.prev or page.next %}\n    <nav class=\"pagination\">\n      {{\n        paginator({\n          prev_text: '<',\n          next_text: '>',\n          mid_size: 1\n        })\n      }}\n    </nav>\n  {% endif %}\n  ````\n\n  \n\n","slug":"搭建基于Hexo5博客遇到的问题","published":1,"updated":"2021-06-15T05:27:55.405Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpxlvlk60000zsu0d30ffn46","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>早些时候使用Hexo 4成功搭建了个人博客。现在更换了电脑，生成博客的源代码也没有备份，只好重头开始。Hexo已经更新到5.4.0，与Hexo 4有些不同，所以开篇博客记录在安装时遇到的问题(本文的操作平台是Windows 10环境)。</p>\n<h1 id=\"hexo-init\"><a href=\"#hexo-init\" class=\"headerlink\" title=\"hexo init\"></a>hexo init</h1><p>与Hexo 4不同的是，使用Hexo 5就倒在了第一步：初始化失败。报错内容大致如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  Cloning hexo-starter https:<span class=\"comment\">//github.com/hexojs/hexo-starter.git</span></span><br><span class=\"line\">fatal: unable to access <span class=\"string\">&#x27;https://github.com/xxx&#x27;</span>: OpenSSL SSL_connect: SSL_ERROR_SYSCALL <span class=\"keyword\">in</span> connection to github.com:<span class=\"number\">443</span></span><br><span class=\"line\">WARN  git clone failed. Copying data instead</span><br><span class=\"line\">FATAL &#123;</span><br><span class=\"line\">  <span class=\"attr\">err</span>: [<span class=\"built_in\">Error</span>: ENOENT: no such file or directory, scandir <span class=\"string\">&#x27;C:\\Users\\xxx\\AppData\\Roaming\\npm\\node_modules\\hexo-cli\\assets&#x27;</span>] &#123;</span><br><span class=\"line\">    <span class=\"attr\">errno</span>: -<span class=\"number\">4058</span>,</span><br><span class=\"line\">    <span class=\"attr\">code</span>: <span class=\"string\">&#x27;ENOENT&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">syscall</span>: <span class=\"string\">&#x27;scandir&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;C:\\\\Users\\\\xxx\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\hexo-cli\\\\assets&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; Something<span class=\"string\">&#x27;s wrong. Maybe you can find the solution here: %s http://hexo.io/docs/troubleshooting.html</span></span><br></pre></td></tr></table></figure>\n\n<p>在搜索解决方法时，有些答案认为是因为github被墙或者是git设置了http代理所导致，对于前者我试着挂好了梯子(github、google均能正常使用)初始化仍然失败；接着检查了http代理也不存在问题。</p>\n<p>最后的解决办法是：替换github链接。首先在你的电脑找到init.js文件，大致路径：C:\\Users\\xxx\\AppData\\Roaming\\npm\\node_modules\\hexo-cli\\lib\\console\\init.js，搜索GIT_REPO_URL字段后做如下替换：</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//原链接</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GIT_REPO_URL = <span class=\"string\">&#x27;https://github.com/hexojs/hexo-starter.git&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//替换后的链接</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GIT_REPO_URL = <span class=\"string\">&#x27;https://github.com.cnpmjs.org/hexojs/hexo-starter.git&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>重新输入命令hexo init 初始化成功。</p>\n<h1 id=\"hexo-theme-next-主题\"><a href=\"#hexo-theme-next-主题\" class=\"headerlink\" title=\"hexo-theme-next 主题\"></a>hexo-theme-next 主题</h1><p><a href=\"https://github.com/iissnan/hexo-theme-next\">hexo-theme-next</a> 是Hexo一个非常受欢迎的极简风格主题。在成功搭建Hexo博客后使用该主题，然而却出现了以下问题：</p>\n<ul>\n<li><p>博客主页乱码</p>\n<p>打开个人博客主页后，出现如下乱码，无法正常显示</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% <span class=\"keyword\">extends</span> <span class=\"string\">&#x27;_layout.swig&#x27;</span> %&#125; &#123;% <span class=\"keyword\">import</span> <span class=\"string\">&#x27;_macro/post.swig&#x27;</span> <span class=\"keyword\">as</span> post_template %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>原因是因为在 Hexo 5.0 之后删除了依赖 hexo-renderer-swig，解决方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i hexo-renderer-swig</span><br></pre></td></tr></table></figure></li>\n<li><p>图片无法正常显示</p>\n<p>查看以前写的博客发现，图片均无法加载。打开控制台，显示请求图片文件返回404。猜测 Hexo 5 引入图片方式发生变化，随后按照如下方式引入图片：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_img example.jpg avatar %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>更改之后，请求图片文件依然返回404。仔细查看请求发现请求路径中多了：/.com//    ，解决方法如下：</p>\n<p>1.安装 hexo-asset-image 插件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i hexo-asset-image</span><br></pre></td></tr></table></figure>\n\n<p> 2.把当前目录下的  /node_modules/hexo-asset-image/index.js 文件中的代码替换成如下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> cheerio = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;cheerio&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPosition</span>(<span class=\"params\">str, m, i</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> str.split(m, i).join(m).length;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> version = <span class=\"built_in\">String</span>(hexo.version).split(<span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">hexo.extend.filter.register(<span class=\"string\">&#x27;after_post_render&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> config = hexo.config;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(config.post_asset_folder)&#123;    </span><br><span class=\"line\">  <span class=\"keyword\">var</span> link = data.permalink;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(version.length &gt; <span class=\"number\">0</span> &amp;&amp; <span class=\"built_in\">Number</span>(version[<span class=\"number\">0</span>]) == <span class=\"number\">3</span>)</span><br><span class=\"line\">     <span class=\"keyword\">var</span> beginPos = getPosition(link, <span class=\"string\">&#x27;/&#x27;</span>, <span class=\"number\">1</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">     <span class=\"keyword\">var</span> beginPos = getPosition(link, <span class=\"string\">&#x27;/&#x27;</span>, <span class=\"number\">3</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"comment\">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> endPos = link.lastIndexOf(<span class=\"string\">&#x27;/&#x27;</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">  link = link.substring(beginPos, endPos);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">var</span> toprocess = [<span class=\"string\">&#x27;excerpt&#x27;</span>, <span class=\"string\">&#x27;more&#x27;</span>, <span class=\"string\">&#x27;content&#x27;</span>];</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; toprocess.length; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> key = toprocess[i];</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class=\"line\">      <span class=\"attr\">ignoreWhitespace</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">xmlMode</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">lowerCaseTags</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">decodeEntities</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">    $(<span class=\"string\">&#x27;img&#x27;</span>).each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ($(<span class=\"built_in\">this</span>).attr(<span class=\"string\">&#x27;src&#x27;</span>))&#123;</span><br><span class=\"line\">          <span class=\"comment\">// For windows style path, we replace &#x27;\\&#x27; to &#x27;/&#x27;.</span></span><br><span class=\"line\">          <span class=\"keyword\">var</span> src = $(<span class=\"built_in\">this</span>).attr(<span class=\"string\">&#x27;src&#x27;</span>).replace(<span class=\"string\">&#x27;\\\\&#x27;</span>, <span class=\"string\">&#x27;/&#x27;</span>);</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(!<span class=\"regexp\">/http[s]*.*|\\/\\/.*/</span>.test(src) &amp;&amp;</span><br><span class=\"line\">             !<span class=\"regexp\">/^\\s*\\//</span>.test(src)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span></span><br><span class=\"line\">            <span class=\"comment\">// In addition, to support multi-level local directory.</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> linkArray = link.split(<span class=\"string\">&#x27;/&#x27;</span>).filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem</span>)</span>&#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> elem != <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> srcArray = src.split(<span class=\"string\">&#x27;/&#x27;</span>).filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem</span>)</span>&#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> elem != <span class=\"string\">&#x27;&#x27;</span> &amp;&amp; elem != <span class=\"string\">&#x27;.&#x27;</span>;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(srcArray.length &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">              srcArray.shift();</span><br><span class=\"line\">            src = srcArray.join(<span class=\"string\">&#x27;/&#x27;</span>);</span><br><span class=\"line\">            $(<span class=\"built_in\">this</span>).attr(<span class=\"string\">&#x27;src&#x27;</span>, config.root + link + src);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.info&amp;&amp;<span class=\"built_in\">console</span>.info(<span class=\"string\">&quot;update link as:--&gt;&quot;</span>+config.root + link + src);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.info&amp;&amp;<span class=\"built_in\">console</span>.info(<span class=\"string\">&quot;no src attr, skipped...&quot;</span>);</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.info&amp;&amp;<span class=\"built_in\">console</span>.info($(<span class=\"built_in\">this</span>));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    data[key] = $.html();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure></li>\n<li><p>翻页按钮不正常显示</p>\n<p>博客页面底部翻页页码 1 2 后 显示 ：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-angle-right&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>解决方法：把当前目录下的 \\themes\\next\\layout_partials\\pagination.swig  文件中的代码替换成如下代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% <span class=\"keyword\">if</span> page.prev or page.next %&#125;</span><br><span class=\"line\">  &lt;nav <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;pagination&quot;</span>&gt;</span><br><span class=\"line\">    &#123;&#123;</span><br><span class=\"line\">      paginator(&#123;</span><br><span class=\"line\">        <span class=\"attr\">prev_text</span>: <span class=\"string\">&#x27;&lt;&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">next_text</span>: <span class=\"string\">&#x27;&gt;&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">mid_size</span>: <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;&#125;</span><br><span class=\"line\">  &lt;/nav&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>早些时候使用Hexo 4成功搭建了个人博客。现在更换了电脑，生成博客的源代码也没有备份，只好重头开始。Hexo已经更新到5.4.0，与Hexo 4有些不同，所以开篇博客记录在安装时遇到的问题(本文的操作平台是Windows 10环境)。</p>\n<h1 id=\"hexo-init\"><a href=\"#hexo-init\" class=\"headerlink\" title=\"hexo init\"></a>hexo init</h1><p>与Hexo 4不同的是，使用Hexo 5就倒在了第一步：初始化失败。报错内容大致如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  Cloning hexo-starter https:<span class=\"comment\">//github.com/hexojs/hexo-starter.git</span></span><br><span class=\"line\">fatal: unable to access <span class=\"string\">&#x27;https://github.com/xxx&#x27;</span>: OpenSSL SSL_connect: SSL_ERROR_SYSCALL <span class=\"keyword\">in</span> connection to github.com:<span class=\"number\">443</span></span><br><span class=\"line\">WARN  git clone failed. Copying data instead</span><br><span class=\"line\">FATAL &#123;</span><br><span class=\"line\">  <span class=\"attr\">err</span>: [<span class=\"built_in\">Error</span>: ENOENT: no such file or directory, scandir <span class=\"string\">&#x27;C:\\Users\\xxx\\AppData\\Roaming\\npm\\node_modules\\hexo-cli\\assets&#x27;</span>] &#123;</span><br><span class=\"line\">    <span class=\"attr\">errno</span>: -<span class=\"number\">4058</span>,</span><br><span class=\"line\">    <span class=\"attr\">code</span>: <span class=\"string\">&#x27;ENOENT&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">syscall</span>: <span class=\"string\">&#x27;scandir&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;C:\\\\Users\\\\xxx\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\hexo-cli\\\\assets&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; Something<span class=\"string\">&#x27;s wrong. Maybe you can find the solution here: %s http://hexo.io/docs/troubleshooting.html</span></span><br></pre></td></tr></table></figure>\n\n<p>在搜索解决方法时，有些答案认为是因为github被墙或者是git设置了http代理所导致，对于前者我试着挂好了梯子(github、google均能正常使用)初始化仍然失败；接着检查了http代理也不存在问题。</p>\n<p>最后的解决办法是：替换github链接。首先在你的电脑找到init.js文件，大致路径：C:\\Users\\xxx\\AppData\\Roaming\\npm\\node_modules\\hexo-cli\\lib\\console\\init.js，搜索GIT_REPO_URL字段后做如下替换：</p>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//原链接</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GIT_REPO_URL = <span class=\"string\">&#x27;https://github.com/hexojs/hexo-starter.git&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//替换后的链接</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> GIT_REPO_URL = <span class=\"string\">&#x27;https://github.com.cnpmjs.org/hexojs/hexo-starter.git&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>重新输入命令hexo init 初始化成功。</p>\n<h1 id=\"hexo-theme-next-主题\"><a href=\"#hexo-theme-next-主题\" class=\"headerlink\" title=\"hexo-theme-next 主题\"></a>hexo-theme-next 主题</h1><p><a href=\"https://github.com/iissnan/hexo-theme-next\">hexo-theme-next</a> 是Hexo一个非常受欢迎的极简风格主题。在成功搭建Hexo博客后使用该主题，然而却出现了以下问题：</p>\n<ul>\n<li><p>博客主页乱码</p>\n<p>打开个人博客主页后，出现如下乱码，无法正常显示</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% <span class=\"keyword\">extends</span> <span class=\"string\">&#x27;_layout.swig&#x27;</span> %&#125; &#123;% <span class=\"keyword\">import</span> <span class=\"string\">&#x27;_macro/post.swig&#x27;</span> <span class=\"keyword\">as</span> post_template %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>原因是因为在 Hexo 5.0 之后删除了依赖 hexo-renderer-swig，解决方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i hexo-renderer-swig</span><br></pre></td></tr></table></figure></li>\n<li><p>图片无法正常显示</p>\n<p>查看以前写的博客发现，图片均无法加载。打开控制台，显示请求图片文件返回404。猜测 Hexo 5 引入图片方式发生变化，随后按照如下方式引入图片：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_img example.jpg avatar %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>更改之后，请求图片文件依然返回404。仔细查看请求发现请求路径中多了：/.com//    ，解决方法如下：</p>\n<p>1.安装 hexo-asset-image 插件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i hexo-asset-image</span><br></pre></td></tr></table></figure>\n\n<p> 2.把当前目录下的  /node_modules/hexo-asset-image/index.js 文件中的代码替换成如下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> cheerio = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;cheerio&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPosition</span>(<span class=\"params\">str, m, i</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> str.split(m, i).join(m).length;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> version = <span class=\"built_in\">String</span>(hexo.version).split(<span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">hexo.extend.filter.register(<span class=\"string\">&#x27;after_post_render&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> config = hexo.config;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(config.post_asset_folder)&#123;    </span><br><span class=\"line\">  <span class=\"keyword\">var</span> link = data.permalink;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(version.length &gt; <span class=\"number\">0</span> &amp;&amp; <span class=\"built_in\">Number</span>(version[<span class=\"number\">0</span>]) == <span class=\"number\">3</span>)</span><br><span class=\"line\">     <span class=\"keyword\">var</span> beginPos = getPosition(link, <span class=\"string\">&#x27;/&#x27;</span>, <span class=\"number\">1</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">     <span class=\"keyword\">var</span> beginPos = getPosition(link, <span class=\"string\">&#x27;/&#x27;</span>, <span class=\"number\">3</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"comment\">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> endPos = link.lastIndexOf(<span class=\"string\">&#x27;/&#x27;</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">  link = link.substring(beginPos, endPos);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">var</span> toprocess = [<span class=\"string\">&#x27;excerpt&#x27;</span>, <span class=\"string\">&#x27;more&#x27;</span>, <span class=\"string\">&#x27;content&#x27;</span>];</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; toprocess.length; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> key = toprocess[i];</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class=\"line\">      <span class=\"attr\">ignoreWhitespace</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">xmlMode</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">lowerCaseTags</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">decodeEntities</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">    $(<span class=\"string\">&#x27;img&#x27;</span>).each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ($(<span class=\"built_in\">this</span>).attr(<span class=\"string\">&#x27;src&#x27;</span>))&#123;</span><br><span class=\"line\">          <span class=\"comment\">// For windows style path, we replace &#x27;\\&#x27; to &#x27;/&#x27;.</span></span><br><span class=\"line\">          <span class=\"keyword\">var</span> src = $(<span class=\"built_in\">this</span>).attr(<span class=\"string\">&#x27;src&#x27;</span>).replace(<span class=\"string\">&#x27;\\\\&#x27;</span>, <span class=\"string\">&#x27;/&#x27;</span>);</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(!<span class=\"regexp\">/http[s]*.*|\\/\\/.*/</span>.test(src) &amp;&amp;</span><br><span class=\"line\">             !<span class=\"regexp\">/^\\s*\\//</span>.test(src)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span></span><br><span class=\"line\">            <span class=\"comment\">// In addition, to support multi-level local directory.</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> linkArray = link.split(<span class=\"string\">&#x27;/&#x27;</span>).filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem</span>)</span>&#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> elem != <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> srcArray = src.split(<span class=\"string\">&#x27;/&#x27;</span>).filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem</span>)</span>&#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> elem != <span class=\"string\">&#x27;&#x27;</span> &amp;&amp; elem != <span class=\"string\">&#x27;.&#x27;</span>;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(srcArray.length &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">              srcArray.shift();</span><br><span class=\"line\">            src = srcArray.join(<span class=\"string\">&#x27;/&#x27;</span>);</span><br><span class=\"line\">            $(<span class=\"built_in\">this</span>).attr(<span class=\"string\">&#x27;src&#x27;</span>, config.root + link + src);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.info&amp;&amp;<span class=\"built_in\">console</span>.info(<span class=\"string\">&quot;update link as:--&gt;&quot;</span>+config.root + link + src);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.info&amp;&amp;<span class=\"built_in\">console</span>.info(<span class=\"string\">&quot;no src attr, skipped...&quot;</span>);</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.info&amp;&amp;<span class=\"built_in\">console</span>.info($(<span class=\"built_in\">this</span>));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    data[key] = $.html();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure></li>\n<li><p>翻页按钮不正常显示</p>\n<p>博客页面底部翻页页码 1 2 后 显示 ：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-angle-right&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>解决方法：把当前目录下的 \\themes\\next\\layout_partials\\pagination.swig  文件中的代码替换成如下代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% <span class=\"keyword\">if</span> page.prev or page.next %&#125;</span><br><span class=\"line\">  &lt;nav <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;pagination&quot;</span>&gt;</span><br><span class=\"line\">    &#123;&#123;</span><br><span class=\"line\">      paginator(&#123;</span><br><span class=\"line\">        <span class=\"attr\">prev_text</span>: <span class=\"string\">&#x27;&lt;&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">next_text</span>: <span class=\"string\">&#x27;&gt;&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">mid_size</span>: <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;&#125;</span><br><span class=\"line\">  &lt;/nav&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>"},{"title":"实现一个基于React的Button组件","date":"2021-06-20T09:18:44.000Z","_content":"\n# API\n\n在开始编写 [Button组件](https://wuwenxing0912.github.io/react-ui-lib/home.html) 之前，首先构思 Button 需要提供的 API，然后按照 API 的要求着手实现。API 具体如下：\n\n| API        | 说明                     | 默认值  | 类型                                           |\n| ---------- | ------------------------ | ------- | ---------------------------------------------- |\n| type       | button类型               | default | \"default\" \\| \"primary\" \\| \"dashed\" \\| \"danger\" |\n| className  | 自定义类名               | ---     | string                                         |\n| style      | 自定义样式               | ---     | React.CSSProperties                            |\n| disabled   | 按钮禁用状态             | false   | boolean                                        |\n| ghost      | 幽灵按钮，背景透明       | false   | boolean                                        |\n| size       | 按钮尺寸大小             | middle  | \"large\" \\| \"middle\" \\| \"small\"                 |\n| icon       | 自定义按钮图标           | ---     | string                                         |\n| onClick    | 点击按钮时的回调         | ---     | React.MouseEventHandler                        |\n| buttonType | 设置原生button的type属性 | button  | \"button\" \\|\"submit\" \\|\"reset\"                  |\n\n根据上述要求，那么就可以这样设计 Props ：\n\n````typescript\ninterface Props {\n\ttype?: \"default\" | \"primary\" | \"dashed\" | \"danger\";\n\tclassName?: string;\n\tstyle?: React.CSSProperties;\n\tdisabled?: boolean;\n\tghost?: boolean;\n\tsize?: \"large\" | \"middle\" | \"small\";\n\ticon?: string;\n\tonClick?: React.MouseEventHandler;\n\tbuttonType?: \"button\" | \"submit\" | \"reset\"\n}\n\nButton.defaultProps = {\n\ttype: \"default\",\n\tdisabled: false,\n\tghost: false,\n\tsize: \"middle\",\n\tbuttonType: \"button\"\n};\n````\n\n<!-- more -->\n\n# type\n\nbutton 共有4种类型分别为：default(默认按钮)、primary(主题按钮)、dashed(虚线按钮)和danger(危险按钮)。type 为可选参数，默认值为 default。每当传入 type 时，就相应的给 button 加上对应的类名，根据不同的类 button 的显示不同的样式。\n\n````typescript\nconst Button: React.FunctionComponent<Props> = (props) => {\n\tconst { type, ...rest } = props;\n\tconst buttonClassName = classes(\"x-button\", type); //classes 能够返回形如 x-button type 的类\n\treturn (\n\t\t<Fragment>\n\t\t    <button className={buttonClassName} {...rest}></button>\n\t\t</Fragment>\n\t);\n};\n````\n\n设置 button type 代码如下：\n\n````typescript\n<Button type=\"default\">Default</Button>\n<Button type=\"primary\">Primary</Button>\n<Button type=\"dashed\">Dashed</Button>\n<Button type=\"danger\">Danger</Button>\n````\n\n效果如下：\n\n{% asset_img type.jpg  type %}\n\n# disabled\n\ndisabled 是可选参数，类型是 boolean，默认值为 false。当设置为 true 时，给 button 加上 disabled 类名，此时 button 为禁用状态。\n\n````typescript\nconst Button: React.FunctionComponent<Props> = (props) => {\n\tconst { type, ...rest } = props;\n\tconst disabled = props.disabled ? \"disabled\" : undefined;//disabled 为 true 时，加上 disabled 类\n\tconst buttonClassName = classes(\"x-button\", type, disabled);\n\treturn (\n\t\t<Fragment>\n\t\t    <button className={buttonClassName} {...rest}></button>\n\t\t</Fragment>\n\t);\n};\n````\n\n设置 disabled 代码如下：\n\n````typescript\n<Button type=\"default\" disabled={true}>Default</Button>\n<Button type=\"primary\" disabled={true}>Primary</Button>\n<Button type=\"dashed\" disabled={true}>Dashed</Button>\n<Button type=\"danger\" disabled={true}>Danger</Button>\n````\n\n效果如下：\n\n{% asset_img disabled.jpg  disabled %}\n\n# ghost\n\nghost 是可选参数，类型是 boolean，默认值为 false。当设置为 true 时，给 button 加上 ghost 类名，此时 button 背景变为透明。\n\n````typescript\nconst Button: React.FunctionComponent<Props> = (props) => {\n\tconst { type, ...rest } = props;\n\tconst ghost = props.ghost ? \"ghost\" : undefined;\n\tconst buttonClassName = classes(\"x-button\", type, ghost);\n\treturn (\n\t\t<Fragment>\n\t\t    <button className={buttonClassName} {...rest}></button>\n\t\t</Fragment>\n\t);\n};\n````\n\n设置 ghost 代码如下：\n\n````typescript\n<Button type=\"default\" ghost={true}>Default</Button>\n<Button type=\"primary\" ghost={true}>Primary</Button>\n<Button type=\"dashed\" ghost={true}>Dashed</Button>\n<Button type=\"danger\" ghost={true}>Danger</Button>\n````\n\n效果如下：\n\n{% asset_img ghost.jpg  ghost%}\n\n# size\n\nsize 共有3种分别为：large(大)、middle(中)和small(小)。size为可选参数，默认值为 middle。每当传入 size 时，就相应的给 button 加上对应的类名，根据不同的类 button 的显示不同的样式。\n\n````typescript\nconst Button: React.FunctionComponent<Props> = (props) => {\n\tconst { type, ...rest } = props;\n\tconst size = props.size ? props.size : \"middle\";\n\tconst onClick = (e: React.MouseEvent) => {\n\t\tif (disabled) return e.preventDefault(); //当 disabled 为 true 时， 阻止点击事件。\n\t\tprops.onClick && props.onClick();\n\t};\n\tconst buttonClassName = classes(\"x-button\", type, size);\n\treturn (\n\t\t<Fragment>\n\t\t    <button className={buttonClassName} onClick={onClick} {...rest}></button>\n\t\t</Fragment>\n\t);\n};\n````\n\n设置 size 代码如下：\n\n````typescript\nconst [size, setSize] = useState(\"middle\"); //初始化 size 为 middle\n<Button type=\"default\" onClick={() => {setSize(\"large\")}}>Default</Button> //点击时改变 size 的值为 large\n<Button type=\"primary\" onClick={() => {setSize(\"middle\")}}>Primary</Button> //点击时改变 size 的值为 middle\n<Button type=\"dashed\" onClick={() => {setSize(\"middle\")}}>Dashed</Button> //点击时改变 size 的值为 middle\n<Button type=\"danger\" onClick={() => {setSize(\"small\")}}>Danger</Button> //点击时改变 size 的值为 small\n````\n\n效果如下：\n\n{% asset_img size.jpg  size%}\n\n# icon\n\nicon 是可选参数，类型是 string。\n\n````typescript\nconst Button: React.FunctionComponent<Props> = (props) => {\n\tconst { type, ...rest } = props;\n\tconst icon = props.icon && <Icon name={props.icon}></Icon>;//使用 Icon 组件，name 匹配 icon 库中的icon\n\tconst buttonClassName = classes(\"x-button\", type);\n\treturn (\n\t\t<Fragment>\n\t\t    <button className={buttonClassName} {...rest}>\n\t\t\t    {icon}\n\t\t    </button>\n\t\t</Fragment>\n\t);\n};\n````\n\n设置 icon 代码如下：\n\n````typescript\n<Button type=\"default\" icon=\"modify\">Default</Button>\n<Button type=\"primary\" icon=\"modify\">Primary</Button>\n<Button type=\"dashed\" icon=\"modify\">Dashed</Button>\n<Button type=\"danger\" icon=\"modify\">Danger</Button>\n````\n\n效果如下：\n\n{% asset_img icon.jpg  icon%}\n","source":"_posts/实现一个基于React的Button组件.md","raw":"---\ntitle: 实现一个基于React的Button组件\ndate: 2021-06-20 17:18:44\ntags: [\"React\", \"Button\"]\ncategories: [React, TypeScript]\n---\n\n# API\n\n在开始编写 [Button组件](https://wuwenxing0912.github.io/react-ui-lib/home.html) 之前，首先构思 Button 需要提供的 API，然后按照 API 的要求着手实现。API 具体如下：\n\n| API        | 说明                     | 默认值  | 类型                                           |\n| ---------- | ------------------------ | ------- | ---------------------------------------------- |\n| type       | button类型               | default | \"default\" \\| \"primary\" \\| \"dashed\" \\| \"danger\" |\n| className  | 自定义类名               | ---     | string                                         |\n| style      | 自定义样式               | ---     | React.CSSProperties                            |\n| disabled   | 按钮禁用状态             | false   | boolean                                        |\n| ghost      | 幽灵按钮，背景透明       | false   | boolean                                        |\n| size       | 按钮尺寸大小             | middle  | \"large\" \\| \"middle\" \\| \"small\"                 |\n| icon       | 自定义按钮图标           | ---     | string                                         |\n| onClick    | 点击按钮时的回调         | ---     | React.MouseEventHandler                        |\n| buttonType | 设置原生button的type属性 | button  | \"button\" \\|\"submit\" \\|\"reset\"                  |\n\n根据上述要求，那么就可以这样设计 Props ：\n\n````typescript\ninterface Props {\n\ttype?: \"default\" | \"primary\" | \"dashed\" | \"danger\";\n\tclassName?: string;\n\tstyle?: React.CSSProperties;\n\tdisabled?: boolean;\n\tghost?: boolean;\n\tsize?: \"large\" | \"middle\" | \"small\";\n\ticon?: string;\n\tonClick?: React.MouseEventHandler;\n\tbuttonType?: \"button\" | \"submit\" | \"reset\"\n}\n\nButton.defaultProps = {\n\ttype: \"default\",\n\tdisabled: false,\n\tghost: false,\n\tsize: \"middle\",\n\tbuttonType: \"button\"\n};\n````\n\n<!-- more -->\n\n# type\n\nbutton 共有4种类型分别为：default(默认按钮)、primary(主题按钮)、dashed(虚线按钮)和danger(危险按钮)。type 为可选参数，默认值为 default。每当传入 type 时，就相应的给 button 加上对应的类名，根据不同的类 button 的显示不同的样式。\n\n````typescript\nconst Button: React.FunctionComponent<Props> = (props) => {\n\tconst { type, ...rest } = props;\n\tconst buttonClassName = classes(\"x-button\", type); //classes 能够返回形如 x-button type 的类\n\treturn (\n\t\t<Fragment>\n\t\t    <button className={buttonClassName} {...rest}></button>\n\t\t</Fragment>\n\t);\n};\n````\n\n设置 button type 代码如下：\n\n````typescript\n<Button type=\"default\">Default</Button>\n<Button type=\"primary\">Primary</Button>\n<Button type=\"dashed\">Dashed</Button>\n<Button type=\"danger\">Danger</Button>\n````\n\n效果如下：\n\n{% asset_img type.jpg  type %}\n\n# disabled\n\ndisabled 是可选参数，类型是 boolean，默认值为 false。当设置为 true 时，给 button 加上 disabled 类名，此时 button 为禁用状态。\n\n````typescript\nconst Button: React.FunctionComponent<Props> = (props) => {\n\tconst { type, ...rest } = props;\n\tconst disabled = props.disabled ? \"disabled\" : undefined;//disabled 为 true 时，加上 disabled 类\n\tconst buttonClassName = classes(\"x-button\", type, disabled);\n\treturn (\n\t\t<Fragment>\n\t\t    <button className={buttonClassName} {...rest}></button>\n\t\t</Fragment>\n\t);\n};\n````\n\n设置 disabled 代码如下：\n\n````typescript\n<Button type=\"default\" disabled={true}>Default</Button>\n<Button type=\"primary\" disabled={true}>Primary</Button>\n<Button type=\"dashed\" disabled={true}>Dashed</Button>\n<Button type=\"danger\" disabled={true}>Danger</Button>\n````\n\n效果如下：\n\n{% asset_img disabled.jpg  disabled %}\n\n# ghost\n\nghost 是可选参数，类型是 boolean，默认值为 false。当设置为 true 时，给 button 加上 ghost 类名，此时 button 背景变为透明。\n\n````typescript\nconst Button: React.FunctionComponent<Props> = (props) => {\n\tconst { type, ...rest } = props;\n\tconst ghost = props.ghost ? \"ghost\" : undefined;\n\tconst buttonClassName = classes(\"x-button\", type, ghost);\n\treturn (\n\t\t<Fragment>\n\t\t    <button className={buttonClassName} {...rest}></button>\n\t\t</Fragment>\n\t);\n};\n````\n\n设置 ghost 代码如下：\n\n````typescript\n<Button type=\"default\" ghost={true}>Default</Button>\n<Button type=\"primary\" ghost={true}>Primary</Button>\n<Button type=\"dashed\" ghost={true}>Dashed</Button>\n<Button type=\"danger\" ghost={true}>Danger</Button>\n````\n\n效果如下：\n\n{% asset_img ghost.jpg  ghost%}\n\n# size\n\nsize 共有3种分别为：large(大)、middle(中)和small(小)。size为可选参数，默认值为 middle。每当传入 size 时，就相应的给 button 加上对应的类名，根据不同的类 button 的显示不同的样式。\n\n````typescript\nconst Button: React.FunctionComponent<Props> = (props) => {\n\tconst { type, ...rest } = props;\n\tconst size = props.size ? props.size : \"middle\";\n\tconst onClick = (e: React.MouseEvent) => {\n\t\tif (disabled) return e.preventDefault(); //当 disabled 为 true 时， 阻止点击事件。\n\t\tprops.onClick && props.onClick();\n\t};\n\tconst buttonClassName = classes(\"x-button\", type, size);\n\treturn (\n\t\t<Fragment>\n\t\t    <button className={buttonClassName} onClick={onClick} {...rest}></button>\n\t\t</Fragment>\n\t);\n};\n````\n\n设置 size 代码如下：\n\n````typescript\nconst [size, setSize] = useState(\"middle\"); //初始化 size 为 middle\n<Button type=\"default\" onClick={() => {setSize(\"large\")}}>Default</Button> //点击时改变 size 的值为 large\n<Button type=\"primary\" onClick={() => {setSize(\"middle\")}}>Primary</Button> //点击时改变 size 的值为 middle\n<Button type=\"dashed\" onClick={() => {setSize(\"middle\")}}>Dashed</Button> //点击时改变 size 的值为 middle\n<Button type=\"danger\" onClick={() => {setSize(\"small\")}}>Danger</Button> //点击时改变 size 的值为 small\n````\n\n效果如下：\n\n{% asset_img size.jpg  size%}\n\n# icon\n\nicon 是可选参数，类型是 string。\n\n````typescript\nconst Button: React.FunctionComponent<Props> = (props) => {\n\tconst { type, ...rest } = props;\n\tconst icon = props.icon && <Icon name={props.icon}></Icon>;//使用 Icon 组件，name 匹配 icon 库中的icon\n\tconst buttonClassName = classes(\"x-button\", type);\n\treturn (\n\t\t<Fragment>\n\t\t    <button className={buttonClassName} {...rest}>\n\t\t\t    {icon}\n\t\t    </button>\n\t\t</Fragment>\n\t);\n};\n````\n\n设置 icon 代码如下：\n\n````typescript\n<Button type=\"default\" icon=\"modify\">Default</Button>\n<Button type=\"primary\" icon=\"modify\">Primary</Button>\n<Button type=\"dashed\" icon=\"modify\">Dashed</Button>\n<Button type=\"danger\" icon=\"modify\">Danger</Button>\n````\n\n效果如下：\n\n{% asset_img icon.jpg  icon%}\n","slug":"实现一个基于React的Button组件","published":1,"updated":"2021-07-26T09:52:04.998Z","_id":"ckq51faol00003ku000qn0kzr","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h1><p>在开始编写 <a href=\"https://wuwenxing0912.github.io/react-ui-lib/home.html\">Button组件</a> 之前，首先构思 Button 需要提供的 API，然后按照 API 的要求着手实现。API 具体如下：</p>\n<table>\n<thead>\n<tr>\n<th>API</th>\n<th>说明</th>\n<th>默认值</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>type</td>\n<td>button类型</td>\n<td>default</td>\n<td>“default” | “primary” | “dashed” | “danger”</td>\n</tr>\n<tr>\n<td>className</td>\n<td>自定义类名</td>\n<td>—</td>\n<td>string</td>\n</tr>\n<tr>\n<td>style</td>\n<td>自定义样式</td>\n<td>—</td>\n<td>React.CSSProperties</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>按钮禁用状态</td>\n<td>false</td>\n<td>boolean</td>\n</tr>\n<tr>\n<td>ghost</td>\n<td>幽灵按钮，背景透明</td>\n<td>false</td>\n<td>boolean</td>\n</tr>\n<tr>\n<td>size</td>\n<td>按钮尺寸大小</td>\n<td>middle</td>\n<td>“large” | “middle” | “small”</td>\n</tr>\n<tr>\n<td>icon</td>\n<td>自定义按钮图标</td>\n<td>—</td>\n<td>string</td>\n</tr>\n<tr>\n<td>onClick</td>\n<td>点击按钮时的回调</td>\n<td>—</td>\n<td>React.MouseEventHandler</td>\n</tr>\n<tr>\n<td>buttonType</td>\n<td>设置原生button的type属性</td>\n<td>button</td>\n<td>“button” |”submit” |”reset”</td>\n</tr>\n</tbody></table>\n<p>根据上述要求，那么就可以这样设计 Props ：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Props &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">type</span>?: <span class=\"string\">&quot;default&quot;</span> | <span class=\"string\">&quot;primary&quot;</span> | <span class=\"string\">&quot;dashed&quot;</span> | <span class=\"string\">&quot;danger&quot;</span>;</span><br><span class=\"line\">\tclassName?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\tstyle?: React.CSSProperties;</span><br><span class=\"line\">\tdisabled?: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">\tghost?: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">\tsize?: <span class=\"string\">&quot;large&quot;</span> | <span class=\"string\">&quot;middle&quot;</span> | <span class=\"string\">&quot;small&quot;</span>;</span><br><span class=\"line\">\ticon?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\tonClick?: React.MouseEventHandler;</span><br><span class=\"line\">\tbuttonType?: <span class=\"string\">&quot;button&quot;</span> | <span class=\"string\">&quot;submit&quot;</span> | <span class=\"string\">&quot;reset&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Button.defaultProps = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">type</span>: <span class=\"string\">&quot;default&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">disabled</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"attr\">ghost</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"attr\">size</span>: <span class=\"string\">&quot;middle&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">buttonType</span>: <span class=\"string\">&quot;button&quot;</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h1 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h1><p>button 共有4种类型分别为：default(默认按钮)、primary(主题按钮)、dashed(虚线按钮)和danger(危险按钮)。type 为可选参数，默认值为 default。每当传入 type 时，就相应的给 button 加上对应的类名，根据不同的类 button 的显示不同的样式。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Button: React.FunctionComponent&lt;Props&gt; = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> &#123; <span class=\"keyword\">type</span>, ...rest &#125; = props;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> buttonClassName = classes(<span class=\"string\">&quot;x-button&quot;</span>, <span class=\"keyword\">type</span>); <span class=\"comment\">//classes 能够返回形如 x-button type 的类</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;buttonClassName&#125;</span> &#123;<span class=\"attr\">...rest</span>&#125;&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\">\t);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>设置 button type 代码如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Button <span class=\"keyword\">type</span>=<span class=\"string\">&quot;default&quot;</span>&gt;Default&lt;/Button&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span>&gt;</span>Primary<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;dashed&quot;</span>&gt;</span>Dashed<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;danger&quot;</span>&gt;</span>Danger<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<img src=\"/2021/06/20/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8EReact%E7%9A%84Button%E7%BB%84%E4%BB%B6/type.jpg\" class title=\"type\">\n\n<h1 id=\"disabled\"><a href=\"#disabled\" class=\"headerlink\" title=\"disabled\"></a>disabled</h1><p>disabled 是可选参数，类型是 boolean，默认值为 false。当设置为 true 时，给 button 加上 disabled 类名，此时 button 为禁用状态。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Button: React.FunctionComponent&lt;Props&gt; = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> &#123; <span class=\"keyword\">type</span>, ...rest &#125; = props;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> disabled = props.disabled ? <span class=\"string\">&quot;disabled&quot;</span> : <span class=\"literal\">undefined</span>;<span class=\"comment\">//disabled 为 true 时，加上 disabled 类</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> buttonClassName = classes(<span class=\"string\">&quot;x-button&quot;</span>, <span class=\"keyword\">type</span>, disabled);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;buttonClassName&#125;</span> &#123;<span class=\"attr\">...rest</span>&#125;&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\">\t);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>设置 disabled 代码如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Button <span class=\"keyword\">type</span>=<span class=\"string\">&quot;default&quot;</span> disabled=&#123;<span class=\"literal\">true</span>&#125;&gt;Default&lt;/Button&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> <span class=\"attr\">disabled</span>=<span class=\"string\">&#123;true&#125;</span>&gt;</span>Primary<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;dashed&quot;</span> <span class=\"attr\">disabled</span>=<span class=\"string\">&#123;true&#125;</span>&gt;</span>Dashed<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;danger&quot;</span> <span class=\"attr\">disabled</span>=<span class=\"string\">&#123;true&#125;</span>&gt;</span>Danger<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<img src=\"/2021/06/20/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8EReact%E7%9A%84Button%E7%BB%84%E4%BB%B6/disabled.jpg\" class title=\"disabled\">\n\n<h1 id=\"ghost\"><a href=\"#ghost\" class=\"headerlink\" title=\"ghost\"></a>ghost</h1><p>ghost 是可选参数，类型是 boolean，默认值为 false。当设置为 true 时，给 button 加上 ghost 类名，此时 button 背景变为透明。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Button: React.FunctionComponent&lt;Props&gt; = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> &#123; <span class=\"keyword\">type</span>, ...rest &#125; = props;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> ghost = props.ghost ? <span class=\"string\">&quot;ghost&quot;</span> : <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> buttonClassName = classes(<span class=\"string\">&quot;x-button&quot;</span>, <span class=\"keyword\">type</span>, ghost);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;buttonClassName&#125;</span> &#123;<span class=\"attr\">...rest</span>&#125;&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\">\t);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>设置 ghost 代码如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Button <span class=\"keyword\">type</span>=<span class=\"string\">&quot;default&quot;</span> ghost=&#123;<span class=\"literal\">true</span>&#125;&gt;Default&lt;/Button&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> <span class=\"attr\">ghost</span>=<span class=\"string\">&#123;true&#125;</span>&gt;</span>Primary<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;dashed&quot;</span> <span class=\"attr\">ghost</span>=<span class=\"string\">&#123;true&#125;</span>&gt;</span>Dashed<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;danger&quot;</span> <span class=\"attr\">ghost</span>=<span class=\"string\">&#123;true&#125;</span>&gt;</span>Danger<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<img src=\"/2021/06/20/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8EReact%E7%9A%84Button%E7%BB%84%E4%BB%B6/ghost.jpg\" class title=\"ghost\">\n\n<h1 id=\"size\"><a href=\"#size\" class=\"headerlink\" title=\"size\"></a>size</h1><p>size 共有3种分别为：large(大)、middle(中)和small(小)。size为可选参数，默认值为 middle。每当传入 size 时，就相应的给 button 加上对应的类名，根据不同的类 button 的显示不同的样式。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Button: React.FunctionComponent&lt;Props&gt; = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> &#123; <span class=\"keyword\">type</span>, ...rest &#125; = props;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> size = props.size ? props.size : <span class=\"string\">&quot;middle&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> onClick = <span class=\"function\">(<span class=\"params\">e: React.MouseEvent</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (disabled) <span class=\"keyword\">return</span> e.preventDefault(); <span class=\"comment\">//当 disabled 为 true 时， 阻止点击事件。</span></span><br><span class=\"line\">\t\tprops.onClick &amp;&amp; props.onClick();</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> buttonClassName = classes(<span class=\"string\">&quot;x-button&quot;</span>, <span class=\"keyword\">type</span>, size);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;buttonClassName&#125;</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;onClick&#125;</span> &#123;<span class=\"attr\">...rest</span>&#125;&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\">\t);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>设置 size 代码如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [size, setSize] = useState(<span class=\"string\">&quot;middle&quot;</span>); <span class=\"comment\">//初始化 size 为 middle</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;default&quot;</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;setSize(&quot;large&quot;)&#125;&#125;&gt;Default<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span> <span class=\"comment\">//点击时改变 size 的值为 large</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;setSize(&quot;middle&quot;)&#125;&#125;&gt;Primary<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span> <span class=\"comment\">//点击时改变 size 的值为 middle</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;dashed&quot;</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;setSize(&quot;middle&quot;)&#125;&#125;&gt;Dashed<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span> <span class=\"comment\">//点击时改变 size 的值为 middle</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;danger&quot;</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;setSize(&quot;small&quot;)&#125;&#125;&gt;Danger<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span> <span class=\"comment\">//点击时改变 size 的值为 small</span></span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<img src=\"/2021/06/20/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8EReact%E7%9A%84Button%E7%BB%84%E4%BB%B6/size.jpg\" class title=\"size\">\n\n<h1 id=\"icon\"><a href=\"#icon\" class=\"headerlink\" title=\"icon\"></a>icon</h1><p>icon 是可选参数，类型是 string。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Button: React.FunctionComponent&lt;Props&gt; = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> &#123; <span class=\"keyword\">type</span>, ...rest &#125; = props;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> icon = props.icon &amp;&amp; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Icon</span> <span class=\"attr\">name</span>=<span class=\"string\">&#123;props.icon&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Icon</span>&gt;</span></span>;<span class=\"comment\">//使用 Icon 组件，name 匹配 icon 库中的icon</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> buttonClassName = classes(<span class=\"string\">&quot;x-button&quot;</span>, <span class=\"keyword\">type</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;buttonClassName&#125;</span> &#123;<span class=\"attr\">...rest</span>&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t    &#123;icon&#125;</span></span><br><span class=\"line\"><span class=\"xml\">\t\t    <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\">\t);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>设置 icon 代码如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Button <span class=\"keyword\">type</span>=<span class=\"string\">&quot;default&quot;</span> icon=<span class=\"string\">&quot;modify&quot;</span>&gt;Default&lt;/Button&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> <span class=\"attr\">icon</span>=<span class=\"string\">&quot;modify&quot;</span>&gt;</span>Primary<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;dashed&quot;</span> <span class=\"attr\">icon</span>=<span class=\"string\">&quot;modify&quot;</span>&gt;</span>Dashed<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;danger&quot;</span> <span class=\"attr\">icon</span>=<span class=\"string\">&quot;modify&quot;</span>&gt;</span>Danger<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<img src=\"/2021/06/20/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8EReact%E7%9A%84Button%E7%BB%84%E4%BB%B6/icon.jpg\" class title=\"icon\">\n","site":{"data":{}},"excerpt":"<h1 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h1><p>在开始编写 <a href=\"https://wuwenxing0912.github.io/react-ui-lib/home.html\">Button组件</a> 之前，首先构思 Button 需要提供的 API，然后按照 API 的要求着手实现。API 具体如下：</p>\n<table>\n<thead>\n<tr>\n<th>API</th>\n<th>说明</th>\n<th>默认值</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>type</td>\n<td>button类型</td>\n<td>default</td>\n<td>“default” | “primary” | “dashed” | “danger”</td>\n</tr>\n<tr>\n<td>className</td>\n<td>自定义类名</td>\n<td>—</td>\n<td>string</td>\n</tr>\n<tr>\n<td>style</td>\n<td>自定义样式</td>\n<td>—</td>\n<td>React.CSSProperties</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>按钮禁用状态</td>\n<td>false</td>\n<td>boolean</td>\n</tr>\n<tr>\n<td>ghost</td>\n<td>幽灵按钮，背景透明</td>\n<td>false</td>\n<td>boolean</td>\n</tr>\n<tr>\n<td>size</td>\n<td>按钮尺寸大小</td>\n<td>middle</td>\n<td>“large” | “middle” | “small”</td>\n</tr>\n<tr>\n<td>icon</td>\n<td>自定义按钮图标</td>\n<td>—</td>\n<td>string</td>\n</tr>\n<tr>\n<td>onClick</td>\n<td>点击按钮时的回调</td>\n<td>—</td>\n<td>React.MouseEventHandler</td>\n</tr>\n<tr>\n<td>buttonType</td>\n<td>设置原生button的type属性</td>\n<td>button</td>\n<td>“button” |”submit” |”reset”</td>\n</tr>\n</tbody></table>\n<p>根据上述要求，那么就可以这样设计 Props ：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Props &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">type</span>?: <span class=\"string\">&quot;default&quot;</span> | <span class=\"string\">&quot;primary&quot;</span> | <span class=\"string\">&quot;dashed&quot;</span> | <span class=\"string\">&quot;danger&quot;</span>;</span><br><span class=\"line\">\tclassName?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\tstyle?: React.CSSProperties;</span><br><span class=\"line\">\tdisabled?: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">\tghost?: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">\tsize?: <span class=\"string\">&quot;large&quot;</span> | <span class=\"string\">&quot;middle&quot;</span> | <span class=\"string\">&quot;small&quot;</span>;</span><br><span class=\"line\">\ticon?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\tonClick?: React.MouseEventHandler;</span><br><span class=\"line\">\tbuttonType?: <span class=\"string\">&quot;button&quot;</span> | <span class=\"string\">&quot;submit&quot;</span> | <span class=\"string\">&quot;reset&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Button.defaultProps = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">type</span>: <span class=\"string\">&quot;default&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">disabled</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"attr\">ghost</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"attr\">size</span>: <span class=\"string\">&quot;middle&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">buttonType</span>: <span class=\"string\">&quot;button&quot;</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","more":"<h1 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h1><p>button 共有4种类型分别为：default(默认按钮)、primary(主题按钮)、dashed(虚线按钮)和danger(危险按钮)。type 为可选参数，默认值为 default。每当传入 type 时，就相应的给 button 加上对应的类名，根据不同的类 button 的显示不同的样式。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Button: React.FunctionComponent&lt;Props&gt; = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> &#123; <span class=\"keyword\">type</span>, ...rest &#125; = props;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> buttonClassName = classes(<span class=\"string\">&quot;x-button&quot;</span>, <span class=\"keyword\">type</span>); <span class=\"comment\">//classes 能够返回形如 x-button type 的类</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;buttonClassName&#125;</span> &#123;<span class=\"attr\">...rest</span>&#125;&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\">\t);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>设置 button type 代码如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Button <span class=\"keyword\">type</span>=<span class=\"string\">&quot;default&quot;</span>&gt;Default&lt;/Button&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span>&gt;</span>Primary<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;dashed&quot;</span>&gt;</span>Dashed<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;danger&quot;</span>&gt;</span>Danger<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<img src=\"/2021/06/20/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8EReact%E7%9A%84Button%E7%BB%84%E4%BB%B6/type.jpg\" class title=\"type\">\n\n<h1 id=\"disabled\"><a href=\"#disabled\" class=\"headerlink\" title=\"disabled\"></a>disabled</h1><p>disabled 是可选参数，类型是 boolean，默认值为 false。当设置为 true 时，给 button 加上 disabled 类名，此时 button 为禁用状态。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Button: React.FunctionComponent&lt;Props&gt; = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> &#123; <span class=\"keyword\">type</span>, ...rest &#125; = props;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> disabled = props.disabled ? <span class=\"string\">&quot;disabled&quot;</span> : <span class=\"literal\">undefined</span>;<span class=\"comment\">//disabled 为 true 时，加上 disabled 类</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> buttonClassName = classes(<span class=\"string\">&quot;x-button&quot;</span>, <span class=\"keyword\">type</span>, disabled);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;buttonClassName&#125;</span> &#123;<span class=\"attr\">...rest</span>&#125;&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\">\t);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>设置 disabled 代码如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Button <span class=\"keyword\">type</span>=<span class=\"string\">&quot;default&quot;</span> disabled=&#123;<span class=\"literal\">true</span>&#125;&gt;Default&lt;/Button&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> <span class=\"attr\">disabled</span>=<span class=\"string\">&#123;true&#125;</span>&gt;</span>Primary<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;dashed&quot;</span> <span class=\"attr\">disabled</span>=<span class=\"string\">&#123;true&#125;</span>&gt;</span>Dashed<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;danger&quot;</span> <span class=\"attr\">disabled</span>=<span class=\"string\">&#123;true&#125;</span>&gt;</span>Danger<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<img src=\"/2021/06/20/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8EReact%E7%9A%84Button%E7%BB%84%E4%BB%B6/disabled.jpg\" class title=\"disabled\">\n\n<h1 id=\"ghost\"><a href=\"#ghost\" class=\"headerlink\" title=\"ghost\"></a>ghost</h1><p>ghost 是可选参数，类型是 boolean，默认值为 false。当设置为 true 时，给 button 加上 ghost 类名，此时 button 背景变为透明。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Button: React.FunctionComponent&lt;Props&gt; = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> &#123; <span class=\"keyword\">type</span>, ...rest &#125; = props;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> ghost = props.ghost ? <span class=\"string\">&quot;ghost&quot;</span> : <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> buttonClassName = classes(<span class=\"string\">&quot;x-button&quot;</span>, <span class=\"keyword\">type</span>, ghost);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;buttonClassName&#125;</span> &#123;<span class=\"attr\">...rest</span>&#125;&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\">\t);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>设置 ghost 代码如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Button <span class=\"keyword\">type</span>=<span class=\"string\">&quot;default&quot;</span> ghost=&#123;<span class=\"literal\">true</span>&#125;&gt;Default&lt;/Button&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> <span class=\"attr\">ghost</span>=<span class=\"string\">&#123;true&#125;</span>&gt;</span>Primary<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;dashed&quot;</span> <span class=\"attr\">ghost</span>=<span class=\"string\">&#123;true&#125;</span>&gt;</span>Dashed<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;danger&quot;</span> <span class=\"attr\">ghost</span>=<span class=\"string\">&#123;true&#125;</span>&gt;</span>Danger<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<img src=\"/2021/06/20/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8EReact%E7%9A%84Button%E7%BB%84%E4%BB%B6/ghost.jpg\" class title=\"ghost\">\n\n<h1 id=\"size\"><a href=\"#size\" class=\"headerlink\" title=\"size\"></a>size</h1><p>size 共有3种分别为：large(大)、middle(中)和small(小)。size为可选参数，默认值为 middle。每当传入 size 时，就相应的给 button 加上对应的类名，根据不同的类 button 的显示不同的样式。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Button: React.FunctionComponent&lt;Props&gt; = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> &#123; <span class=\"keyword\">type</span>, ...rest &#125; = props;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> size = props.size ? props.size : <span class=\"string\">&quot;middle&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> onClick = <span class=\"function\">(<span class=\"params\">e: React.MouseEvent</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (disabled) <span class=\"keyword\">return</span> e.preventDefault(); <span class=\"comment\">//当 disabled 为 true 时， 阻止点击事件。</span></span><br><span class=\"line\">\t\tprops.onClick &amp;&amp; props.onClick();</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> buttonClassName = classes(<span class=\"string\">&quot;x-button&quot;</span>, <span class=\"keyword\">type</span>, size);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;buttonClassName&#125;</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;onClick&#125;</span> &#123;<span class=\"attr\">...rest</span>&#125;&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\">\t);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>设置 size 代码如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [size, setSize] = useState(<span class=\"string\">&quot;middle&quot;</span>); <span class=\"comment\">//初始化 size 为 middle</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;default&quot;</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;setSize(&quot;large&quot;)&#125;&#125;&gt;Default<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span> <span class=\"comment\">//点击时改变 size 的值为 large</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;setSize(&quot;middle&quot;)&#125;&#125;&gt;Primary<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span> <span class=\"comment\">//点击时改变 size 的值为 middle</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;dashed&quot;</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;setSize(&quot;middle&quot;)&#125;&#125;&gt;Dashed<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span> <span class=\"comment\">//点击时改变 size 的值为 middle</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;danger&quot;</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;setSize(&quot;small&quot;)&#125;&#125;&gt;Danger<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span> <span class=\"comment\">//点击时改变 size 的值为 small</span></span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<img src=\"/2021/06/20/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8EReact%E7%9A%84Button%E7%BB%84%E4%BB%B6/size.jpg\" class title=\"size\">\n\n<h1 id=\"icon\"><a href=\"#icon\" class=\"headerlink\" title=\"icon\"></a>icon</h1><p>icon 是可选参数，类型是 string。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Button: React.FunctionComponent&lt;Props&gt; = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> &#123; <span class=\"keyword\">type</span>, ...rest &#125; = props;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> icon = props.icon &amp;&amp; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Icon</span> <span class=\"attr\">name</span>=<span class=\"string\">&#123;props.icon&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Icon</span>&gt;</span></span>;<span class=\"comment\">//使用 Icon 组件，name 匹配 icon 库中的icon</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> buttonClassName = classes(<span class=\"string\">&quot;x-button&quot;</span>, <span class=\"keyword\">type</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;buttonClassName&#125;</span> &#123;<span class=\"attr\">...rest</span>&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t    &#123;icon&#125;</span></span><br><span class=\"line\"><span class=\"xml\">\t\t    <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\">\t);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>设置 icon 代码如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Button <span class=\"keyword\">type</span>=<span class=\"string\">&quot;default&quot;</span> icon=<span class=\"string\">&quot;modify&quot;</span>&gt;Default&lt;/Button&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> <span class=\"attr\">icon</span>=<span class=\"string\">&quot;modify&quot;</span>&gt;</span>Primary<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;dashed&quot;</span> <span class=\"attr\">icon</span>=<span class=\"string\">&quot;modify&quot;</span>&gt;</span>Dashed<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;danger&quot;</span> <span class=\"attr\">icon</span>=<span class=\"string\">&quot;modify&quot;</span>&gt;</span>Danger<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<img src=\"/2021/06/20/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8EReact%E7%9A%84Button%E7%BB%84%E4%BB%B6/icon.jpg\" class title=\"icon\">"},{"title":"实现一个基于React的Input组件","date":"2021-07-03T08:10:46.000Z","_content":"\n# API\n\n本次编写的 [Input组件](https://wuwenxing0912.github.io/react-ui-lib/home.html#/input) 没有完全实现原生的 input 输入框，部分 Input  API 如下：\n\n| API         | 说明                | 是否可选 | 默认值 | 类型                |\n| ----------- | ------------------- | -------- | ------ | ------------------- |\n| id          | 输入框的id          | 是       | ---    | string              |\n| placeholder | 输入框的placeholder | 是       | ---    | string              |\n| className   | 自定义类名          | 是       | ---    | string              |\n| style       | 自定义样式          | 是       | ---    | React.CSSProperties |\n| value       | 输入框的value       | 是       | ---    | string              |\n| disabled    | 输入框禁用状态      | 是       | false  | boolean             |\n| prefix      | 输入框前缀图标      | 是       | ---    | string              |\n| suffix      | 输入框后缀图标      | 是       | ---    | string              |\n| error       | 输入框后缀错误状态  | 是       | false  | boolean             |\n| addOnBefore | 输入框前缀标签      | 是       | ---    | string              |\n| addOnAfter  | 输入框后缀标签      | 是       | ---    | string              |\n\n根据上述要求，那么就可以这样设计 Props ：\n\n````typescript\ninterface Props extends React.InputHTMLAttributes<HTMLInputElement> {\n\tid?: string;\n\tplaceholder?: string;\n\tclassName?: string;\n\tstyle?: React.CSSProperties;\n\tvalue?: string;\n\tdisabled?: boolean;\n\tprefix?: string;\n\tsuffix?: string;\n\terror?: boolean;\n\taddOnBefore?: string;\n\taddOnAfter?: string;\n}\nInput.defaultProps = {\n\tdisabled: false,\n\terror: false,\n};\n````\n\n<!-- more -->\n\n# disabled\n\ndisabled 是可选参数，类型是 boolean，默认值为 false。当设置为 true 时，input 设置为 disabled，此时 input  为禁用状态。\n\n````typescript\nconst Input: React.FunctionComponent<Props> = (props) => {\n\tconst { disabled, ...rest } = props;\n\treturn <input className={classes(\"x-input\")} disabled={disabled} {...rest} />;\n};\n````\n\n设置 disabled 代码如下：\n\n````typescript\n<Input disabled={true} placeholder=\"disabled\"></Input>\n````\n\n效果如下：\n\n{% asset_img disabled.jpg  disabled %}\n\n\n\n# prefix & suffix\n\nprefix/suffix 是可选参数，类型是 string。当传入 prefix/suffix 时，给 Input 嵌入 Icon 组件，显示对应的图标。\n\n````typescript\nconst Input: React.FunctionComponent<Props> = (props) => {\n\tconst { prefix, suffix, ...rest } = props;\n\tconst prefixClassName = prefix && \"prefix\";\n\tconst suffixClassName = suffix && \"suffix\";\n     //classes 能够返回形如 x-input-wrapper prefix suffix 的类\n\tconst inputWrapperClassName = classes(\"x-input-wrapper\", prefixClassName, suffixClassName);\n\treturn (\n\t\t<span className={inputWrapperClassName}>\n\t\t\t{prefix ? (\n\t\t\t\t<span className=\"prefix-wrapper\">\n\t\t\t\t\t<Icon name={prefix} className=\"prefix-icon\" />\n\t\t\t\t</span>\n\t\t\t) : \"\"}\n\t\t\t<input className={classes(\"x-input\")} {...rest} />\n\t\t\t{suffix ? (\n\t\t\t\t<span className=\"suffix-wrapper\">\n\t\t\t\t\t<Icon name={suffix} className=\"suffix-icon\" />\n\t\t\t\t</span>\n\t\t\t) : \"\"}\n\t\t</span>\n\t);\n};\n````\n\n设置 prefix/suffix 代码如下：\n\n````typescript\n<Input prefix=\"username\" placeholder=\"username\"></Input>\n<Input suffix=\"password\" placeholder=\"password\"></Input>\n````\n\n效果如下：\n\n{% asset_img pre-suf.jpg  prefix/suffix %}\n\n# error\n\nerror 是可选参数，类型是 boolean，默认值为 false。当设置为 true 时，给 input 加上 error 类名。\n\n````typescript\nconst Input: React.FunctionComponent<Props> = (props) => {\n\tconst { error, ...rest } = props;\n\tconst errorClassName = error ? \"error\" : \"\";\n\treturn <input className={classes(\"x-input\", errorClassName)} {...rest} />;\n};\n````\n\n设置 error 代码如下：\n\n````typescript\n<Input error={true} placeholder=\"error\"></Input>\n````\n\n效果如下：\n\n{% asset_img error.jpg  error%}\n\n# before & after\n\nbefore/after 是可选参数，类型是 string。当传入 before/after  时，给 Input 添加前缀/后缀块。\n\n````typescript\nconst Input: React.FunctionComponent<Props> = (props) => {\n\tconst { addOnBefore, addOnAfter, ...rest } = props;\n\tconst addOnAfterClassName = addOnAfter ? \"after-text\" : \"\";\n\treturn (\n\t\t<span>\n\t\t\t{addOnBefore ? <span className=\"before-text\">{addOnBefore}</span> : \"\"}\n\t\t\t<input className={classes(\"x-input\", addOnAfterClassName)} {...rest} />\n\t\t\t{addOnAfter ? <span className=\"after-text\">{addOnAfter}</span> : \"\"}\n\t\t</span>\n\t);\n};\n````\n\n设置 before/after 代码如下：\n\n````typescript\n<Input addOnBefore=\"Before\" addOnAfter=\"After\" placeholder=\"placeholder\"></Input>\n<Input addOnBefore=\"Before\" placeholder=\"placeholder\"></Input>\n<Input addOnAfter=\"After\" placeholder=\"placeholder\"></Input>\n````\n\n效果如下：\n\n{% asset_img before-after.jpg  before/after %}\n","source":"_posts/实现一个基于React的Input组件.md","raw":"---\ntitle: 实现一个基于React的Input组件\ndate: 2021-07-03 16:10:46\ntags: [\"React\", \"Input\"]\ncategories: [React, TypeScript]\n---\n\n# API\n\n本次编写的 [Input组件](https://wuwenxing0912.github.io/react-ui-lib/home.html#/input) 没有完全实现原生的 input 输入框，部分 Input  API 如下：\n\n| API         | 说明                | 是否可选 | 默认值 | 类型                |\n| ----------- | ------------------- | -------- | ------ | ------------------- |\n| id          | 输入框的id          | 是       | ---    | string              |\n| placeholder | 输入框的placeholder | 是       | ---    | string              |\n| className   | 自定义类名          | 是       | ---    | string              |\n| style       | 自定义样式          | 是       | ---    | React.CSSProperties |\n| value       | 输入框的value       | 是       | ---    | string              |\n| disabled    | 输入框禁用状态      | 是       | false  | boolean             |\n| prefix      | 输入框前缀图标      | 是       | ---    | string              |\n| suffix      | 输入框后缀图标      | 是       | ---    | string              |\n| error       | 输入框后缀错误状态  | 是       | false  | boolean             |\n| addOnBefore | 输入框前缀标签      | 是       | ---    | string              |\n| addOnAfter  | 输入框后缀标签      | 是       | ---    | string              |\n\n根据上述要求，那么就可以这样设计 Props ：\n\n````typescript\ninterface Props extends React.InputHTMLAttributes<HTMLInputElement> {\n\tid?: string;\n\tplaceholder?: string;\n\tclassName?: string;\n\tstyle?: React.CSSProperties;\n\tvalue?: string;\n\tdisabled?: boolean;\n\tprefix?: string;\n\tsuffix?: string;\n\terror?: boolean;\n\taddOnBefore?: string;\n\taddOnAfter?: string;\n}\nInput.defaultProps = {\n\tdisabled: false,\n\terror: false,\n};\n````\n\n<!-- more -->\n\n# disabled\n\ndisabled 是可选参数，类型是 boolean，默认值为 false。当设置为 true 时，input 设置为 disabled，此时 input  为禁用状态。\n\n````typescript\nconst Input: React.FunctionComponent<Props> = (props) => {\n\tconst { disabled, ...rest } = props;\n\treturn <input className={classes(\"x-input\")} disabled={disabled} {...rest} />;\n};\n````\n\n设置 disabled 代码如下：\n\n````typescript\n<Input disabled={true} placeholder=\"disabled\"></Input>\n````\n\n效果如下：\n\n{% asset_img disabled.jpg  disabled %}\n\n\n\n# prefix & suffix\n\nprefix/suffix 是可选参数，类型是 string。当传入 prefix/suffix 时，给 Input 嵌入 Icon 组件，显示对应的图标。\n\n````typescript\nconst Input: React.FunctionComponent<Props> = (props) => {\n\tconst { prefix, suffix, ...rest } = props;\n\tconst prefixClassName = prefix && \"prefix\";\n\tconst suffixClassName = suffix && \"suffix\";\n     //classes 能够返回形如 x-input-wrapper prefix suffix 的类\n\tconst inputWrapperClassName = classes(\"x-input-wrapper\", prefixClassName, suffixClassName);\n\treturn (\n\t\t<span className={inputWrapperClassName}>\n\t\t\t{prefix ? (\n\t\t\t\t<span className=\"prefix-wrapper\">\n\t\t\t\t\t<Icon name={prefix} className=\"prefix-icon\" />\n\t\t\t\t</span>\n\t\t\t) : \"\"}\n\t\t\t<input className={classes(\"x-input\")} {...rest} />\n\t\t\t{suffix ? (\n\t\t\t\t<span className=\"suffix-wrapper\">\n\t\t\t\t\t<Icon name={suffix} className=\"suffix-icon\" />\n\t\t\t\t</span>\n\t\t\t) : \"\"}\n\t\t</span>\n\t);\n};\n````\n\n设置 prefix/suffix 代码如下：\n\n````typescript\n<Input prefix=\"username\" placeholder=\"username\"></Input>\n<Input suffix=\"password\" placeholder=\"password\"></Input>\n````\n\n效果如下：\n\n{% asset_img pre-suf.jpg  prefix/suffix %}\n\n# error\n\nerror 是可选参数，类型是 boolean，默认值为 false。当设置为 true 时，给 input 加上 error 类名。\n\n````typescript\nconst Input: React.FunctionComponent<Props> = (props) => {\n\tconst { error, ...rest } = props;\n\tconst errorClassName = error ? \"error\" : \"\";\n\treturn <input className={classes(\"x-input\", errorClassName)} {...rest} />;\n};\n````\n\n设置 error 代码如下：\n\n````typescript\n<Input error={true} placeholder=\"error\"></Input>\n````\n\n效果如下：\n\n{% asset_img error.jpg  error%}\n\n# before & after\n\nbefore/after 是可选参数，类型是 string。当传入 before/after  时，给 Input 添加前缀/后缀块。\n\n````typescript\nconst Input: React.FunctionComponent<Props> = (props) => {\n\tconst { addOnBefore, addOnAfter, ...rest } = props;\n\tconst addOnAfterClassName = addOnAfter ? \"after-text\" : \"\";\n\treturn (\n\t\t<span>\n\t\t\t{addOnBefore ? <span className=\"before-text\">{addOnBefore}</span> : \"\"}\n\t\t\t<input className={classes(\"x-input\", addOnAfterClassName)} {...rest} />\n\t\t\t{addOnAfter ? <span className=\"after-text\">{addOnAfter}</span> : \"\"}\n\t\t</span>\n\t);\n};\n````\n\n设置 before/after 代码如下：\n\n````typescript\n<Input addOnBefore=\"Before\" addOnAfter=\"After\" placeholder=\"placeholder\"></Input>\n<Input addOnBefore=\"Before\" placeholder=\"placeholder\"></Input>\n<Input addOnAfter=\"After\" placeholder=\"placeholder\"></Input>\n````\n\n效果如下：\n\n{% asset_img before-after.jpg  before/after %}\n","slug":"实现一个基于React的Input组件","published":1,"updated":"2021-07-26T09:51:58.271Z","_id":"ckqnkbxu1000054u0c1e85q9i","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h1><p>本次编写的 <a href=\"https://wuwenxing0912.github.io/react-ui-lib/home.html#/input\">Input组件</a> 没有完全实现原生的 input 输入框，部分 Input  API 如下：</p>\n<table>\n<thead>\n<tr>\n<th>API</th>\n<th>说明</th>\n<th>是否可选</th>\n<th>默认值</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id</td>\n<td>输入框的id</td>\n<td>是</td>\n<td>—</td>\n<td>string</td>\n</tr>\n<tr>\n<td>placeholder</td>\n<td>输入框的placeholder</td>\n<td>是</td>\n<td>—</td>\n<td>string</td>\n</tr>\n<tr>\n<td>className</td>\n<td>自定义类名</td>\n<td>是</td>\n<td>—</td>\n<td>string</td>\n</tr>\n<tr>\n<td>style</td>\n<td>自定义样式</td>\n<td>是</td>\n<td>—</td>\n<td>React.CSSProperties</td>\n</tr>\n<tr>\n<td>value</td>\n<td>输入框的value</td>\n<td>是</td>\n<td>—</td>\n<td>string</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>输入框禁用状态</td>\n<td>是</td>\n<td>false</td>\n<td>boolean</td>\n</tr>\n<tr>\n<td>prefix</td>\n<td>输入框前缀图标</td>\n<td>是</td>\n<td>—</td>\n<td>string</td>\n</tr>\n<tr>\n<td>suffix</td>\n<td>输入框后缀图标</td>\n<td>是</td>\n<td>—</td>\n<td>string</td>\n</tr>\n<tr>\n<td>error</td>\n<td>输入框后缀错误状态</td>\n<td>是</td>\n<td>false</td>\n<td>boolean</td>\n</tr>\n<tr>\n<td>addOnBefore</td>\n<td>输入框前缀标签</td>\n<td>是</td>\n<td>—</td>\n<td>string</td>\n</tr>\n<tr>\n<td>addOnAfter</td>\n<td>输入框后缀标签</td>\n<td>是</td>\n<td>—</td>\n<td>string</td>\n</tr>\n</tbody></table>\n<p>根据上述要求，那么就可以这样设计 Props ：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Props <span class=\"keyword\">extends</span> React.InputHTMLAttributes&lt;HTMLInputElement&gt; &#123;</span><br><span class=\"line\">\tid?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\tplaceholder?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\tclassName?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\tstyle?: React.CSSProperties;</span><br><span class=\"line\">\tvalue?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\tdisabled?: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">\tprefix?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\tsuffix?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\terror?: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">\taddOnBefore?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\taddOnAfter?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Input.defaultProps = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">disabled</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"attr\">error</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h1 id=\"disabled\"><a href=\"#disabled\" class=\"headerlink\" title=\"disabled\"></a>disabled</h1><p>disabled 是可选参数，类型是 boolean，默认值为 false。当设置为 true 时，input 设置为 disabled，此时 input  为禁用状态。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Input: React.FunctionComponent&lt;Props&gt; = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> &#123; disabled, ...rest &#125; = props;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;classes(</span>&quot;<span class=\"attr\">x-input</span>&quot;)&#125; <span class=\"attr\">disabled</span>=<span class=\"string\">&#123;disabled&#125;</span> &#123;<span class=\"attr\">...rest</span>&#125; /&gt;</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>设置 disabled 代码如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Input disabled=&#123;<span class=\"literal\">true</span>&#125; placeholder=<span class=\"string\">&quot;disabled&quot;</span>&gt;&lt;/Input&gt;</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<img src=\"/2021/07/03/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8EReact%E7%9A%84Input%E7%BB%84%E4%BB%B6/disabled.jpg\" class title=\"disabled\">\n\n\n\n<h1 id=\"prefix-amp-suffix\"><a href=\"#prefix-amp-suffix\" class=\"headerlink\" title=\"prefix &amp; suffix\"></a>prefix &amp; suffix</h1><p>prefix/suffix 是可选参数，类型是 string。当传入 prefix/suffix 时，给 Input 嵌入 Icon 组件，显示对应的图标。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Input: React.FunctionComponent&lt;Props&gt; = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> &#123; prefix, suffix, ...rest &#125; = props;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> prefixClassName = prefix &amp;&amp; <span class=\"string\">&quot;prefix&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> suffixClassName = suffix &amp;&amp; <span class=\"string\">&quot;suffix&quot;</span>;</span><br><span class=\"line\">     <span class=\"comment\">//classes 能够返回形如 x-input-wrapper prefix suffix 的类</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> inputWrapperClassName = classes(<span class=\"string\">&quot;x-input-wrapper&quot;</span>, prefixClassName, suffixClassName);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;inputWrapperClassName&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t&#123;prefix ? (</span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;prefix-wrapper&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">Icon</span> <span class=\"attr\">name</span>=<span class=\"string\">&#123;prefix&#125;</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;prefix-icon&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t) : &quot;&quot;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;classes(</span>&quot;<span class=\"attr\">x-input</span>&quot;)&#125; &#123;<span class=\"attr\">...rest</span>&#125; /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t&#123;suffix ? (</span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;suffix-wrapper&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">Icon</span> <span class=\"attr\">name</span>=<span class=\"string\">&#123;suffix&#125;</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;suffix-icon&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t) : &quot;&quot;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">\t);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>设置 prefix/suffix 代码如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Input prefix=<span class=\"string\">&quot;username&quot;</span> placeholder=<span class=\"string\">&quot;username&quot;</span>&gt;&lt;/Input&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Input</span> <span class=\"attr\">suffix</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Input</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<img src=\"/2021/07/03/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8EReact%E7%9A%84Input%E7%BB%84%E4%BB%B6/pre-suf.jpg\" class title=\"prefix&#x2F;suffix\">\n\n<h1 id=\"error\"><a href=\"#error\" class=\"headerlink\" title=\"error\"></a>error</h1><p>error 是可选参数，类型是 boolean，默认值为 false。当设置为 true 时，给 input 加上 error 类名。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Input: React.FunctionComponent&lt;Props&gt; = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> &#123; error, ...rest &#125; = props;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> errorClassName = error ? <span class=\"string\">&quot;error&quot;</span> : <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;classes(</span>&quot;<span class=\"attr\">x-input</span>&quot;, <span class=\"attr\">errorClassName</span>)&#125; &#123;<span class=\"attr\">...rest</span>&#125; /&gt;</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>设置 error 代码如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Input error=&#123;<span class=\"literal\">true</span>&#125; placeholder=<span class=\"string\">&quot;error&quot;</span>&gt;&lt;/Input&gt;</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<img src=\"/2021/07/03/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8EReact%E7%9A%84Input%E7%BB%84%E4%BB%B6/error.jpg\" class title=\"error\">\n\n<h1 id=\"before-amp-after\"><a href=\"#before-amp-after\" class=\"headerlink\" title=\"before &amp; after\"></a>before &amp; after</h1><p>before/after 是可选参数，类型是 string。当传入 before/after  时，给 Input 添加前缀/后缀块。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Input: React.FunctionComponent&lt;Props&gt; = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> &#123; addOnBefore, addOnAfter, ...rest &#125; = props;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> addOnAfterClassName = addOnAfter ? <span class=\"string\">&quot;after-text&quot;</span> : <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t&#123;addOnBefore ? <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;before-text&quot;</span>&gt;</span>&#123;addOnBefore&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> : &quot;&quot;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;classes(</span>&quot;<span class=\"attr\">x-input</span>&quot;, <span class=\"attr\">addOnAfterClassName</span>)&#125; &#123;<span class=\"attr\">...rest</span>&#125; /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t&#123;addOnAfter ? <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;after-text&quot;</span>&gt;</span>&#123;addOnAfter&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> : &quot;&quot;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">\t);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>设置 before/after 代码如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Input addOnBefore=<span class=\"string\">&quot;Before&quot;</span> addOnAfter=<span class=\"string\">&quot;After&quot;</span> placeholder=<span class=\"string\">&quot;placeholder&quot;</span>&gt;&lt;/Input&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Input</span> <span class=\"attr\">addOnBefore</span>=<span class=\"string\">&quot;Before&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;placeholder&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Input</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Input</span> <span class=\"attr\">addOnAfter</span>=<span class=\"string\">&quot;After&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;placeholder&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Input</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<img src=\"/2021/07/03/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8EReact%E7%9A%84Input%E7%BB%84%E4%BB%B6/before-after.jpg\" class title=\"before&#x2F;after\">\n","site":{"data":{}},"excerpt":"<h1 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h1><p>本次编写的 <a href=\"https://wuwenxing0912.github.io/react-ui-lib/home.html#/input\">Input组件</a> 没有完全实现原生的 input 输入框，部分 Input  API 如下：</p>\n<table>\n<thead>\n<tr>\n<th>API</th>\n<th>说明</th>\n<th>是否可选</th>\n<th>默认值</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id</td>\n<td>输入框的id</td>\n<td>是</td>\n<td>—</td>\n<td>string</td>\n</tr>\n<tr>\n<td>placeholder</td>\n<td>输入框的placeholder</td>\n<td>是</td>\n<td>—</td>\n<td>string</td>\n</tr>\n<tr>\n<td>className</td>\n<td>自定义类名</td>\n<td>是</td>\n<td>—</td>\n<td>string</td>\n</tr>\n<tr>\n<td>style</td>\n<td>自定义样式</td>\n<td>是</td>\n<td>—</td>\n<td>React.CSSProperties</td>\n</tr>\n<tr>\n<td>value</td>\n<td>输入框的value</td>\n<td>是</td>\n<td>—</td>\n<td>string</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>输入框禁用状态</td>\n<td>是</td>\n<td>false</td>\n<td>boolean</td>\n</tr>\n<tr>\n<td>prefix</td>\n<td>输入框前缀图标</td>\n<td>是</td>\n<td>—</td>\n<td>string</td>\n</tr>\n<tr>\n<td>suffix</td>\n<td>输入框后缀图标</td>\n<td>是</td>\n<td>—</td>\n<td>string</td>\n</tr>\n<tr>\n<td>error</td>\n<td>输入框后缀错误状态</td>\n<td>是</td>\n<td>false</td>\n<td>boolean</td>\n</tr>\n<tr>\n<td>addOnBefore</td>\n<td>输入框前缀标签</td>\n<td>是</td>\n<td>—</td>\n<td>string</td>\n</tr>\n<tr>\n<td>addOnAfter</td>\n<td>输入框后缀标签</td>\n<td>是</td>\n<td>—</td>\n<td>string</td>\n</tr>\n</tbody></table>\n<p>根据上述要求，那么就可以这样设计 Props ：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Props <span class=\"keyword\">extends</span> React.InputHTMLAttributes&lt;HTMLInputElement&gt; &#123;</span><br><span class=\"line\">\tid?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\tplaceholder?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\tclassName?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\tstyle?: React.CSSProperties;</span><br><span class=\"line\">\tvalue?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\tdisabled?: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">\tprefix?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\tsuffix?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\terror?: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">\taddOnBefore?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\taddOnAfter?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Input.defaultProps = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">disabled</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"attr\">error</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","more":"<h1 id=\"disabled\"><a href=\"#disabled\" class=\"headerlink\" title=\"disabled\"></a>disabled</h1><p>disabled 是可选参数，类型是 boolean，默认值为 false。当设置为 true 时，input 设置为 disabled，此时 input  为禁用状态。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Input: React.FunctionComponent&lt;Props&gt; = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> &#123; disabled, ...rest &#125; = props;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;classes(</span>&quot;<span class=\"attr\">x-input</span>&quot;)&#125; <span class=\"attr\">disabled</span>=<span class=\"string\">&#123;disabled&#125;</span> &#123;<span class=\"attr\">...rest</span>&#125; /&gt;</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>设置 disabled 代码如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Input disabled=&#123;<span class=\"literal\">true</span>&#125; placeholder=<span class=\"string\">&quot;disabled&quot;</span>&gt;&lt;/Input&gt;</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<img src=\"/2021/07/03/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8EReact%E7%9A%84Input%E7%BB%84%E4%BB%B6/disabled.jpg\" class title=\"disabled\">\n\n\n\n<h1 id=\"prefix-amp-suffix\"><a href=\"#prefix-amp-suffix\" class=\"headerlink\" title=\"prefix &amp; suffix\"></a>prefix &amp; suffix</h1><p>prefix/suffix 是可选参数，类型是 string。当传入 prefix/suffix 时，给 Input 嵌入 Icon 组件，显示对应的图标。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Input: React.FunctionComponent&lt;Props&gt; = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> &#123; prefix, suffix, ...rest &#125; = props;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> prefixClassName = prefix &amp;&amp; <span class=\"string\">&quot;prefix&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> suffixClassName = suffix &amp;&amp; <span class=\"string\">&quot;suffix&quot;</span>;</span><br><span class=\"line\">     <span class=\"comment\">//classes 能够返回形如 x-input-wrapper prefix suffix 的类</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> inputWrapperClassName = classes(<span class=\"string\">&quot;x-input-wrapper&quot;</span>, prefixClassName, suffixClassName);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;inputWrapperClassName&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t&#123;prefix ? (</span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;prefix-wrapper&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">Icon</span> <span class=\"attr\">name</span>=<span class=\"string\">&#123;prefix&#125;</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;prefix-icon&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t) : &quot;&quot;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;classes(</span>&quot;<span class=\"attr\">x-input</span>&quot;)&#125; &#123;<span class=\"attr\">...rest</span>&#125; /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t&#123;suffix ? (</span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;suffix-wrapper&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">Icon</span> <span class=\"attr\">name</span>=<span class=\"string\">&#123;suffix&#125;</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;suffix-icon&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t) : &quot;&quot;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">\t);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>设置 prefix/suffix 代码如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Input prefix=<span class=\"string\">&quot;username&quot;</span> placeholder=<span class=\"string\">&quot;username&quot;</span>&gt;&lt;/Input&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Input</span> <span class=\"attr\">suffix</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Input</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<img src=\"/2021/07/03/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8EReact%E7%9A%84Input%E7%BB%84%E4%BB%B6/pre-suf.jpg\" class title=\"prefix&#x2F;suffix\">\n\n<h1 id=\"error\"><a href=\"#error\" class=\"headerlink\" title=\"error\"></a>error</h1><p>error 是可选参数，类型是 boolean，默认值为 false。当设置为 true 时，给 input 加上 error 类名。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Input: React.FunctionComponent&lt;Props&gt; = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> &#123; error, ...rest &#125; = props;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> errorClassName = error ? <span class=\"string\">&quot;error&quot;</span> : <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;classes(</span>&quot;<span class=\"attr\">x-input</span>&quot;, <span class=\"attr\">errorClassName</span>)&#125; &#123;<span class=\"attr\">...rest</span>&#125; /&gt;</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>设置 error 代码如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Input error=&#123;<span class=\"literal\">true</span>&#125; placeholder=<span class=\"string\">&quot;error&quot;</span>&gt;&lt;/Input&gt;</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<img src=\"/2021/07/03/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8EReact%E7%9A%84Input%E7%BB%84%E4%BB%B6/error.jpg\" class title=\"error\">\n\n<h1 id=\"before-amp-after\"><a href=\"#before-amp-after\" class=\"headerlink\" title=\"before &amp; after\"></a>before &amp; after</h1><p>before/after 是可选参数，类型是 string。当传入 before/after  时，给 Input 添加前缀/后缀块。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Input: React.FunctionComponent&lt;Props&gt; = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> &#123; addOnBefore, addOnAfter, ...rest &#125; = props;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> addOnAfterClassName = addOnAfter ? <span class=\"string\">&quot;after-text&quot;</span> : <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t&#123;addOnBefore ? <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;before-text&quot;</span>&gt;</span>&#123;addOnBefore&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> : &quot;&quot;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;classes(</span>&quot;<span class=\"attr\">x-input</span>&quot;, <span class=\"attr\">addOnAfterClassName</span>)&#125; &#123;<span class=\"attr\">...rest</span>&#125; /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t&#123;addOnAfter ? <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;after-text&quot;</span>&gt;</span>&#123;addOnAfter&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> : &quot;&quot;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">\t);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>设置 before/after 代码如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Input addOnBefore=<span class=\"string\">&quot;Before&quot;</span> addOnAfter=<span class=\"string\">&quot;After&quot;</span> placeholder=<span class=\"string\">&quot;placeholder&quot;</span>&gt;&lt;/Input&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Input</span> <span class=\"attr\">addOnBefore</span>=<span class=\"string\">&quot;Before&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;placeholder&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Input</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Input</span> <span class=\"attr\">addOnAfter</span>=<span class=\"string\">&quot;After&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;placeholder&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Input</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<img src=\"/2021/07/03/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8EReact%E7%9A%84Input%E7%BB%84%E4%BB%B6/before-after.jpg\" class title=\"before&#x2F;after\">"},{"title":"实现一个基于React的Modal组件","date":"2021-07-12T10:45:46.000Z","_content":"\n# API\n\n[Modal 组件](https://wuwenxing0912.github.io/react-ui-lib/home.html#/modal)包含对话框和遮罩层。API 具体如下：\n\n| API               | 说明                      | 默认值   | 是否可选 | 类型                                           |\n| ----------------- | ------------------------- | -------- | -------- | ---------------------------------------------- |\n| visible           | Modal 是否可见            | ---      | 否       | boolean                                        |\n| onClose           | 关闭 Modal 回调函数       | ---      | 否       | React.MouseEventHandler                        |\n| onConfirm         | 确定 Modal 回调函数       | ---      | 否       | React.MouseEventHandler                        |\n| onClickMaskClose  | 是否点击遮罩层关闭 Modal  | false    | 是       | boolean                                        |\n| title             | Modal 标题                | \"对话框\" | 是       | string \\| ReactNode                            |\n| content           | Modal 内容                | ---      | 是       | string \\| ReactNode                            |\n| cancelText        | Modal 取消按钮 内容       | 取消     | 是       | string                                         |\n| confirmText       | Modal 确定按钮 内容       | 确定     | 是       | string                                         |\n| ancelButtonType   | Modal 取消按钮 类型       | default  | 是       | \"default\" \\| \"primary\" \\| \"dashed\" \\| \"danger\" |\n| confirmButtonType | Modal 确定按钮 类型       | primary  | 是       | \"default\" \\| \"primary\" \\| \"dashed\" \\| \"danger\" |\n| className         | 自定义 Modal 类名         | ---      | 是       | string                                         |\n| style             | 自定义 Modal外层容器 样式 | ---      | 是       | React.CSSProperties                            |\n\n根据上述要求，那么就可以这样设计 Props ：\n\n````typescript\ninterface Props {\n\tvisible: boolean;\n\tonClose: React.MouseEventHandler;\n\tonConfirm: React.MouseEventHandler;\n\tonClickMaskClose?: boolean;\n\ttitle?: string | ReactNode;\n\tcontent?: string | ReactNode;\n\tcancelText?: string;\n\tconfirmText?: string;\n\tcancelButtonType?: \"default\" | \"primary\" | \"dashed\" | \"danger\";\n\tconfirmButtonType?: \"default\" | \"primary\" | \"dashed\" | \"danger\";\n}\n\nModal.defaultProps = {\n\tonClickMaskClose: false,\n\ttitle: \"对话框\",\n\tcancelText: \"取消\",\n\tconfirmText: \"确定\",\n\tcancelButtonType: \"default\",\n\tconfirmButtonType: \"primary\",\n};\n````\n\n<!-- more -->\n\n# visible\n\nvisible是控制Modal显示/隐藏的参数，且visible必传参数，类型是boolean。\n\n# onClose & onConfirm\n\nonClose和onConfirm分别是关闭Modal的回调函数以及确定Modal的回调函数，类型均为React.MouseEventHandler，且为必传参数。\n\n# onClickMaskClose\n\nonClickMaskClose是可选参数，类型是boolean，默认值为false。当设置为true时，点击遮罩层时，Modal关闭。\n\n# title & content\n\ntitle和content分别是Modal的标题以及Modal的内容，类型均为string | ReactNode，为可选参数。title的默认值为 \"对话框\"。\n\n# cancelText & confirmText\n\ncancelText和confirmText分别是Modal取消按钮的内容以及Modal确定按钮的内容，类型均为string ，为可选参数，默认值分别为\"取消\"和\"确定\"。\n\n# cancelButtonType & confirmButtonType\n\ncancelButtonType和confirmButtonType分别是Modal取消按钮的类型以及Modal确定按钮的类型，类型均为 \"default\" | \"primary\" | \"dashed\" | \"danger\" ，为可选参数，默认值分别为\"default\"和\"primary\"。\n\n# 完整代码\n\n````typescript\nconst portal = props.visible ? (\n  <Fragment>\n    <div className={classes(\"x-modal-mask\")} onClick={onClickMaskClose}></div>\n    <div className={classes(\"x-modal\")}>\n      <header className={classes(\"x-modal-header\")}>\n        <div className={classes(\"x-modal-header-content\")}>{props.title}</div>\n        <div\n          className={classes(\"x-modal-icon-wrapper\")}\n          onClick={props.onClose}\n        >\n          <Icon name=\"close\" className={classes(\"x-modal-icon\")}></Icon>\n        </div>\n      </header>\n      <main className={classes(\"x-modal-main\")}>{props.content}</main>\n      <footer className={classes(\"x-modal-footer\")}>\n        <Button\n          type={props.cancelButtonType}\n          className={classes(\"x-modal-footer-button\")}\n          onClick={props.onClose}\n        >\n          {props.cancelText}\n        </Button>\n        <Button type={props.confirmButtonType} onClick={props.onConfirm}>\n          {props.confirmText}\n        </Button>\n      </footer>\n    </div>\n  </Fragment>\n) : null;\nreturn ReactDOM.createPortal(portal, document.body);\n};\n````\n\n","source":"_posts/实现一个基于React的Modal组件.md","raw":"---\ntitle: 实现一个基于React的Modal组件\ndate: 2021-07-12 18:45:46\ntags: [\"React\", \"Modal\"]\ncategories: [React, TypeScript]\n---\n\n# API\n\n[Modal 组件](https://wuwenxing0912.github.io/react-ui-lib/home.html#/modal)包含对话框和遮罩层。API 具体如下：\n\n| API               | 说明                      | 默认值   | 是否可选 | 类型                                           |\n| ----------------- | ------------------------- | -------- | -------- | ---------------------------------------------- |\n| visible           | Modal 是否可见            | ---      | 否       | boolean                                        |\n| onClose           | 关闭 Modal 回调函数       | ---      | 否       | React.MouseEventHandler                        |\n| onConfirm         | 确定 Modal 回调函数       | ---      | 否       | React.MouseEventHandler                        |\n| onClickMaskClose  | 是否点击遮罩层关闭 Modal  | false    | 是       | boolean                                        |\n| title             | Modal 标题                | \"对话框\" | 是       | string \\| ReactNode                            |\n| content           | Modal 内容                | ---      | 是       | string \\| ReactNode                            |\n| cancelText        | Modal 取消按钮 内容       | 取消     | 是       | string                                         |\n| confirmText       | Modal 确定按钮 内容       | 确定     | 是       | string                                         |\n| ancelButtonType   | Modal 取消按钮 类型       | default  | 是       | \"default\" \\| \"primary\" \\| \"dashed\" \\| \"danger\" |\n| confirmButtonType | Modal 确定按钮 类型       | primary  | 是       | \"default\" \\| \"primary\" \\| \"dashed\" \\| \"danger\" |\n| className         | 自定义 Modal 类名         | ---      | 是       | string                                         |\n| style             | 自定义 Modal外层容器 样式 | ---      | 是       | React.CSSProperties                            |\n\n根据上述要求，那么就可以这样设计 Props ：\n\n````typescript\ninterface Props {\n\tvisible: boolean;\n\tonClose: React.MouseEventHandler;\n\tonConfirm: React.MouseEventHandler;\n\tonClickMaskClose?: boolean;\n\ttitle?: string | ReactNode;\n\tcontent?: string | ReactNode;\n\tcancelText?: string;\n\tconfirmText?: string;\n\tcancelButtonType?: \"default\" | \"primary\" | \"dashed\" | \"danger\";\n\tconfirmButtonType?: \"default\" | \"primary\" | \"dashed\" | \"danger\";\n}\n\nModal.defaultProps = {\n\tonClickMaskClose: false,\n\ttitle: \"对话框\",\n\tcancelText: \"取消\",\n\tconfirmText: \"确定\",\n\tcancelButtonType: \"default\",\n\tconfirmButtonType: \"primary\",\n};\n````\n\n<!-- more -->\n\n# visible\n\nvisible是控制Modal显示/隐藏的参数，且visible必传参数，类型是boolean。\n\n# onClose & onConfirm\n\nonClose和onConfirm分别是关闭Modal的回调函数以及确定Modal的回调函数，类型均为React.MouseEventHandler，且为必传参数。\n\n# onClickMaskClose\n\nonClickMaskClose是可选参数，类型是boolean，默认值为false。当设置为true时，点击遮罩层时，Modal关闭。\n\n# title & content\n\ntitle和content分别是Modal的标题以及Modal的内容，类型均为string | ReactNode，为可选参数。title的默认值为 \"对话框\"。\n\n# cancelText & confirmText\n\ncancelText和confirmText分别是Modal取消按钮的内容以及Modal确定按钮的内容，类型均为string ，为可选参数，默认值分别为\"取消\"和\"确定\"。\n\n# cancelButtonType & confirmButtonType\n\ncancelButtonType和confirmButtonType分别是Modal取消按钮的类型以及Modal确定按钮的类型，类型均为 \"default\" | \"primary\" | \"dashed\" | \"danger\" ，为可选参数，默认值分别为\"default\"和\"primary\"。\n\n# 完整代码\n\n````typescript\nconst portal = props.visible ? (\n  <Fragment>\n    <div className={classes(\"x-modal-mask\")} onClick={onClickMaskClose}></div>\n    <div className={classes(\"x-modal\")}>\n      <header className={classes(\"x-modal-header\")}>\n        <div className={classes(\"x-modal-header-content\")}>{props.title}</div>\n        <div\n          className={classes(\"x-modal-icon-wrapper\")}\n          onClick={props.onClose}\n        >\n          <Icon name=\"close\" className={classes(\"x-modal-icon\")}></Icon>\n        </div>\n      </header>\n      <main className={classes(\"x-modal-main\")}>{props.content}</main>\n      <footer className={classes(\"x-modal-footer\")}>\n        <Button\n          type={props.cancelButtonType}\n          className={classes(\"x-modal-footer-button\")}\n          onClick={props.onClose}\n        >\n          {props.cancelText}\n        </Button>\n        <Button type={props.confirmButtonType} onClick={props.onConfirm}>\n          {props.confirmText}\n        </Button>\n      </footer>\n    </div>\n  </Fragment>\n) : null;\nreturn ReactDOM.createPortal(portal, document.body);\n};\n````\n\n","slug":"实现一个基于React的Modal组件","published":1,"updated":"2021-07-26T09:51:52.281Z","_id":"ckr0ios520000icu039zral2i","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h1><p><a href=\"https://wuwenxing0912.github.io/react-ui-lib/home.html#/modal\">Modal 组件</a>包含对话框和遮罩层。API 具体如下：</p>\n<table>\n<thead>\n<tr>\n<th>API</th>\n<th>说明</th>\n<th>默认值</th>\n<th>是否可选</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>visible</td>\n<td>Modal 是否可见</td>\n<td>—</td>\n<td>否</td>\n<td>boolean</td>\n</tr>\n<tr>\n<td>onClose</td>\n<td>关闭 Modal 回调函数</td>\n<td>—</td>\n<td>否</td>\n<td>React.MouseEventHandler</td>\n</tr>\n<tr>\n<td>onConfirm</td>\n<td>确定 Modal 回调函数</td>\n<td>—</td>\n<td>否</td>\n<td>React.MouseEventHandler</td>\n</tr>\n<tr>\n<td>onClickMaskClose</td>\n<td>是否点击遮罩层关闭 Modal</td>\n<td>false</td>\n<td>是</td>\n<td>boolean</td>\n</tr>\n<tr>\n<td>title</td>\n<td>Modal 标题</td>\n<td>“对话框”</td>\n<td>是</td>\n<td>string | ReactNode</td>\n</tr>\n<tr>\n<td>content</td>\n<td>Modal 内容</td>\n<td>—</td>\n<td>是</td>\n<td>string | ReactNode</td>\n</tr>\n<tr>\n<td>cancelText</td>\n<td>Modal 取消按钮 内容</td>\n<td>取消</td>\n<td>是</td>\n<td>string</td>\n</tr>\n<tr>\n<td>confirmText</td>\n<td>Modal 确定按钮 内容</td>\n<td>确定</td>\n<td>是</td>\n<td>string</td>\n</tr>\n<tr>\n<td>ancelButtonType</td>\n<td>Modal 取消按钮 类型</td>\n<td>default</td>\n<td>是</td>\n<td>“default” | “primary” | “dashed” | “danger”</td>\n</tr>\n<tr>\n<td>confirmButtonType</td>\n<td>Modal 确定按钮 类型</td>\n<td>primary</td>\n<td>是</td>\n<td>“default” | “primary” | “dashed” | “danger”</td>\n</tr>\n<tr>\n<td>className</td>\n<td>自定义 Modal 类名</td>\n<td>—</td>\n<td>是</td>\n<td>string</td>\n</tr>\n<tr>\n<td>style</td>\n<td>自定义 Modal外层容器 样式</td>\n<td>—</td>\n<td>是</td>\n<td>React.CSSProperties</td>\n</tr>\n</tbody></table>\n<p>根据上述要求，那么就可以这样设计 Props ：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Props &#123;</span><br><span class=\"line\">\t<span class=\"attr\">visible</span>: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">\tonClose: React.MouseEventHandler;</span><br><span class=\"line\">\tonConfirm: React.MouseEventHandler;</span><br><span class=\"line\">\tonClickMaskClose?: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">\ttitle?: <span class=\"built_in\">string</span> | ReactNode;</span><br><span class=\"line\">\tcontent?: <span class=\"built_in\">string</span> | ReactNode;</span><br><span class=\"line\">\tcancelText?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\tconfirmText?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\tcancelButtonType?: <span class=\"string\">&quot;default&quot;</span> | <span class=\"string\">&quot;primary&quot;</span> | <span class=\"string\">&quot;dashed&quot;</span> | <span class=\"string\">&quot;danger&quot;</span>;</span><br><span class=\"line\">\tconfirmButtonType?: <span class=\"string\">&quot;default&quot;</span> | <span class=\"string\">&quot;primary&quot;</span> | <span class=\"string\">&quot;dashed&quot;</span> | <span class=\"string\">&quot;danger&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Modal.defaultProps = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">onClickMaskClose</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"attr\">title</span>: <span class=\"string\">&quot;对话框&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">cancelText</span>: <span class=\"string\">&quot;取消&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">confirmText</span>: <span class=\"string\">&quot;确定&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">cancelButtonType</span>: <span class=\"string\">&quot;default&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">confirmButtonType</span>: <span class=\"string\">&quot;primary&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h1 id=\"visible\"><a href=\"#visible\" class=\"headerlink\" title=\"visible\"></a>visible</h1><p>visible是控制Modal显示/隐藏的参数，且visible必传参数，类型是boolean。</p>\n<h1 id=\"onClose-amp-onConfirm\"><a href=\"#onClose-amp-onConfirm\" class=\"headerlink\" title=\"onClose &amp; onConfirm\"></a>onClose &amp; onConfirm</h1><p>onClose和onConfirm分别是关闭Modal的回调函数以及确定Modal的回调函数，类型均为React.MouseEventHandler，且为必传参数。</p>\n<h1 id=\"onClickMaskClose\"><a href=\"#onClickMaskClose\" class=\"headerlink\" title=\"onClickMaskClose\"></a>onClickMaskClose</h1><p>onClickMaskClose是可选参数，类型是boolean，默认值为false。当设置为true时，点击遮罩层时，Modal关闭。</p>\n<h1 id=\"title-amp-content\"><a href=\"#title-amp-content\" class=\"headerlink\" title=\"title &amp; content\"></a>title &amp; content</h1><p>title和content分别是Modal的标题以及Modal的内容，类型均为string | ReactNode，为可选参数。title的默认值为 “对话框”。</p>\n<h1 id=\"cancelText-amp-confirmText\"><a href=\"#cancelText-amp-confirmText\" class=\"headerlink\" title=\"cancelText &amp; confirmText\"></a>cancelText &amp; confirmText</h1><p>cancelText和confirmText分别是Modal取消按钮的内容以及Modal确定按钮的内容，类型均为string ，为可选参数，默认值分别为”取消”和”确定”。</p>\n<h1 id=\"cancelButtonType-amp-confirmButtonType\"><a href=\"#cancelButtonType-amp-confirmButtonType\" class=\"headerlink\" title=\"cancelButtonType &amp; confirmButtonType\"></a>cancelButtonType &amp; confirmButtonType</h1><p>cancelButtonType和confirmButtonType分别是Modal取消按钮的类型以及Modal确定按钮的类型，类型均为 “default” | “primary” | “dashed” | “danger” ，为可选参数，默认值分别为”default”和”primary”。</p>\n<h1 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h1><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> portal = props.visible ? (</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;classes(</span>&quot;<span class=\"attr\">x-modal-mask</span>&quot;)&#125; <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;onClickMaskClose&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;classes(</span>&quot;<span class=\"attr\">x-modal</span>&quot;)&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;classes(</span>&quot;<span class=\"attr\">x-modal-header</span>&quot;)&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;classes(</span>&quot;<span class=\"attr\">x-modal-header-content</span>&quot;)&#125;&gt;</span>&#123;props.title&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          <span class=\"attr\">className</span>=<span class=\"string\">&#123;classes(</span>&quot;<span class=\"attr\">x-modal-icon-wrapper</span>&quot;)&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;props.onClose&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">        &gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;<span class=\"name\">Icon</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;close&quot;</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;classes(</span>&quot;<span class=\"attr\">x-modal-icon</span>&quot;)&#125;&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Icon</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">main</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;classes(</span>&quot;<span class=\"attr\">x-modal-main</span>&quot;)&#125;&gt;</span>&#123;props.content&#125;<span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">footer</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;classes(</span>&quot;<span class=\"attr\">x-modal-footer</span>&quot;)&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          <span class=\"attr\">type</span>=<span class=\"string\">&#123;props.cancelButtonType&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          <span class=\"attr\">className</span>=<span class=\"string\">&#123;classes(</span>&quot;<span class=\"attr\">x-modal-footer-button</span>&quot;)&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;props.onClose&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">        &gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">          &#123;props.cancelText&#125;</span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&#123;props.confirmButtonType&#125;</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;props.onConfirm&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">          &#123;props.confirmText&#125;</span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\">) : <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">return</span> ReactDOM.createPortal(portal, <span class=\"built_in\">document</span>.body);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h1 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h1><p><a href=\"https://wuwenxing0912.github.io/react-ui-lib/home.html#/modal\">Modal 组件</a>包含对话框和遮罩层。API 具体如下：</p>\n<table>\n<thead>\n<tr>\n<th>API</th>\n<th>说明</th>\n<th>默认值</th>\n<th>是否可选</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>visible</td>\n<td>Modal 是否可见</td>\n<td>—</td>\n<td>否</td>\n<td>boolean</td>\n</tr>\n<tr>\n<td>onClose</td>\n<td>关闭 Modal 回调函数</td>\n<td>—</td>\n<td>否</td>\n<td>React.MouseEventHandler</td>\n</tr>\n<tr>\n<td>onConfirm</td>\n<td>确定 Modal 回调函数</td>\n<td>—</td>\n<td>否</td>\n<td>React.MouseEventHandler</td>\n</tr>\n<tr>\n<td>onClickMaskClose</td>\n<td>是否点击遮罩层关闭 Modal</td>\n<td>false</td>\n<td>是</td>\n<td>boolean</td>\n</tr>\n<tr>\n<td>title</td>\n<td>Modal 标题</td>\n<td>“对话框”</td>\n<td>是</td>\n<td>string | ReactNode</td>\n</tr>\n<tr>\n<td>content</td>\n<td>Modal 内容</td>\n<td>—</td>\n<td>是</td>\n<td>string | ReactNode</td>\n</tr>\n<tr>\n<td>cancelText</td>\n<td>Modal 取消按钮 内容</td>\n<td>取消</td>\n<td>是</td>\n<td>string</td>\n</tr>\n<tr>\n<td>confirmText</td>\n<td>Modal 确定按钮 内容</td>\n<td>确定</td>\n<td>是</td>\n<td>string</td>\n</tr>\n<tr>\n<td>ancelButtonType</td>\n<td>Modal 取消按钮 类型</td>\n<td>default</td>\n<td>是</td>\n<td>“default” | “primary” | “dashed” | “danger”</td>\n</tr>\n<tr>\n<td>confirmButtonType</td>\n<td>Modal 确定按钮 类型</td>\n<td>primary</td>\n<td>是</td>\n<td>“default” | “primary” | “dashed” | “danger”</td>\n</tr>\n<tr>\n<td>className</td>\n<td>自定义 Modal 类名</td>\n<td>—</td>\n<td>是</td>\n<td>string</td>\n</tr>\n<tr>\n<td>style</td>\n<td>自定义 Modal外层容器 样式</td>\n<td>—</td>\n<td>是</td>\n<td>React.CSSProperties</td>\n</tr>\n</tbody></table>\n<p>根据上述要求，那么就可以这样设计 Props ：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Props &#123;</span><br><span class=\"line\">\t<span class=\"attr\">visible</span>: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">\tonClose: React.MouseEventHandler;</span><br><span class=\"line\">\tonConfirm: React.MouseEventHandler;</span><br><span class=\"line\">\tonClickMaskClose?: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">\ttitle?: <span class=\"built_in\">string</span> | ReactNode;</span><br><span class=\"line\">\tcontent?: <span class=\"built_in\">string</span> | ReactNode;</span><br><span class=\"line\">\tcancelText?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\tconfirmText?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">\tcancelButtonType?: <span class=\"string\">&quot;default&quot;</span> | <span class=\"string\">&quot;primary&quot;</span> | <span class=\"string\">&quot;dashed&quot;</span> | <span class=\"string\">&quot;danger&quot;</span>;</span><br><span class=\"line\">\tconfirmButtonType?: <span class=\"string\">&quot;default&quot;</span> | <span class=\"string\">&quot;primary&quot;</span> | <span class=\"string\">&quot;dashed&quot;</span> | <span class=\"string\">&quot;danger&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Modal.defaultProps = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">onClickMaskClose</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t<span class=\"attr\">title</span>: <span class=\"string\">&quot;对话框&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">cancelText</span>: <span class=\"string\">&quot;取消&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">confirmText</span>: <span class=\"string\">&quot;确定&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">cancelButtonType</span>: <span class=\"string\">&quot;default&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">confirmButtonType</span>: <span class=\"string\">&quot;primary&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","more":"<h1 id=\"visible\"><a href=\"#visible\" class=\"headerlink\" title=\"visible\"></a>visible</h1><p>visible是控制Modal显示/隐藏的参数，且visible必传参数，类型是boolean。</p>\n<h1 id=\"onClose-amp-onConfirm\"><a href=\"#onClose-amp-onConfirm\" class=\"headerlink\" title=\"onClose &amp; onConfirm\"></a>onClose &amp; onConfirm</h1><p>onClose和onConfirm分别是关闭Modal的回调函数以及确定Modal的回调函数，类型均为React.MouseEventHandler，且为必传参数。</p>\n<h1 id=\"onClickMaskClose\"><a href=\"#onClickMaskClose\" class=\"headerlink\" title=\"onClickMaskClose\"></a>onClickMaskClose</h1><p>onClickMaskClose是可选参数，类型是boolean，默认值为false。当设置为true时，点击遮罩层时，Modal关闭。</p>\n<h1 id=\"title-amp-content\"><a href=\"#title-amp-content\" class=\"headerlink\" title=\"title &amp; content\"></a>title &amp; content</h1><p>title和content分别是Modal的标题以及Modal的内容，类型均为string | ReactNode，为可选参数。title的默认值为 “对话框”。</p>\n<h1 id=\"cancelText-amp-confirmText\"><a href=\"#cancelText-amp-confirmText\" class=\"headerlink\" title=\"cancelText &amp; confirmText\"></a>cancelText &amp; confirmText</h1><p>cancelText和confirmText分别是Modal取消按钮的内容以及Modal确定按钮的内容，类型均为string ，为可选参数，默认值分别为”取消”和”确定”。</p>\n<h1 id=\"cancelButtonType-amp-confirmButtonType\"><a href=\"#cancelButtonType-amp-confirmButtonType\" class=\"headerlink\" title=\"cancelButtonType &amp; confirmButtonType\"></a>cancelButtonType &amp; confirmButtonType</h1><p>cancelButtonType和confirmButtonType分别是Modal取消按钮的类型以及Modal确定按钮的类型，类型均为 “default” | “primary” | “dashed” | “danger” ，为可选参数，默认值分别为”default”和”primary”。</p>\n<h1 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h1><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> portal = props.visible ? (</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;classes(</span>&quot;<span class=\"attr\">x-modal-mask</span>&quot;)&#125; <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;onClickMaskClose&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;classes(</span>&quot;<span class=\"attr\">x-modal</span>&quot;)&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;classes(</span>&quot;<span class=\"attr\">x-modal-header</span>&quot;)&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;classes(</span>&quot;<span class=\"attr\">x-modal-header-content</span>&quot;)&#125;&gt;</span>&#123;props.title&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          <span class=\"attr\">className</span>=<span class=\"string\">&#123;classes(</span>&quot;<span class=\"attr\">x-modal-icon-wrapper</span>&quot;)&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;props.onClose&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">        &gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;<span class=\"name\">Icon</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;close&quot;</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;classes(</span>&quot;<span class=\"attr\">x-modal-icon</span>&quot;)&#125;&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Icon</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">main</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;classes(</span>&quot;<span class=\"attr\">x-modal-main</span>&quot;)&#125;&gt;</span>&#123;props.content&#125;<span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">footer</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;classes(</span>&quot;<span class=\"attr\">x-modal-footer</span>&quot;)&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          <span class=\"attr\">type</span>=<span class=\"string\">&#123;props.cancelButtonType&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          <span class=\"attr\">className</span>=<span class=\"string\">&#123;classes(</span>&quot;<span class=\"attr\">x-modal-footer-button</span>&quot;)&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;props.onClose&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">        &gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">          &#123;props.cancelText&#125;</span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">type</span>=<span class=\"string\">&#123;props.confirmButtonType&#125;</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;props.onConfirm&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">          &#123;props.confirmText&#125;</span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\">) : <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">return</span> ReactDOM.createPortal(portal, <span class=\"built_in\">document</span>.body);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"手写系列之三：Promise","date":"2021-07-15T05:01:09.000Z","_content":"\n# Promises/A+\n\n[Promises/A+](https://promisesaplus.com/) 是 *JavaScript Promise 规范*。以下给出部分规范内容，其余部分在测试代码中说明。\n\n````markdown\n2.1 Promise状态\n\n一个promise必须处于三种状态之一： pending、fulfilled、rejected\n\n2.1.1 当promise处于pending时\n\n- 2.1.1.1 promise可以转为fulfilled或rejected状态\n\n2.1.2 当promise处于fulfilled时\n\n- 2.1.2.1 promise不能转为任何其他状态\n- 2.1.2.2 必须有一个值，且此值不能改变\n\n2.1.3 当promise处于rejected时\n\n- 2.1.3.1 promise不能转为任何其他状态\n- 2.1.3.2 必须有一个reason，且此reason不能改变\n````\n\n\n\n# 测试代码\n\n根据规范内容编写出如下测试代码，依据测试代码完成[满足Promise要求的代码](https://github.com/wuwenxing0912/hand-writing/blob/master/promise/src/index.ts)即可。\n\n<!-- more -->\n\n````typescript\nimport * as chai from \"chai\";\nimport * as sinon from \"sinon\";\nimport * as sinonChai from \"sinon-chai\";\nimport Promise from \"../src/index\";\n\nchai.use(sinonChai);\n\nconst assert = chai.assert;\n\n/**\n * mocha 是JavaScript测试框架\n * chai 是断言库\n * sinon 辅助测试工具\n */\n\ndescribe(\"Promise\", () => {\n  it(\"Promise 是一个类\", () => {\n    assert.isFunction(Promise);\n    assert.isObject(Promise.prototype);\n  });\n\n  it(\"如果 new Promise() 接收的不是一个函数报错\", () => {\n    assert.throw(() => {\n      //@ts-ignore\n      //添加上述语句，typescript会忽略不符合逻辑的代码\n      new Promise();\n    });\n  });\n\n  it(\"new Promise(fn) 生成一个对象，对象有then方法\", () => {\n    const fn = () => {};\n    const obj = new Promise(fn);\n    assert.isObject(obj);\n    assert.isFunction(obj.then);\n  });\n\n  it(\"new Promise(fn) 中的 fn 立即执行\", () => {\n    let fn = sinon.fake();\n    new Promise(fn);\n    assert.isTrue(fn.called);\n  });\n\n  it(\"new Promise(fn) 中的 fn 执行的时候接收 resolve 和 reject两个函数作为参数\", done => {\n    new Promise((resolve, reject) => {\n      assert.isFunction(resolve);\n      assert.isFunction(reject);\n      done();\n    });\n  });\n\n  it(\"pormise.then(success) 会在 resolve 被调用的时候执行\", done => {\n    let success = sinon.fake();\n    const promise = new Promise((resolve, reject) => {\n      assert.isFalse(success.called);\n      resolve();\n      setTimeout(() => {\n        assert.isTrue(success.called);\n        done();\n      });\n    });\n    //@ts-ignore\n    promise.then(success);\n  });\n\n  it(\"pormise.then(null, reject) 会在 reject 被调用的时候执行\", done => {\n    let fail = sinon.fake();\n    const promise = new Promise((resolve, reject) => {\n      assert.isFalse(fail.called);\n      reject();\n      setTimeout(() => {\n        assert.isTrue(fail.called);\n        done();\n      }, 0);\n    });\n    //@ts-ignore\n    promise.then(null, fail);\n  });\n\n  it(\"2.2.1.1 如果 onFulfilled不是函数，必须忽略\", () => {\n    const promise = new Promise((resolve, reject) => {\n      resolve();\n    });\n    promise.then(null);\n  });\n\n  it(\"2.2.1.2 如果 onRejected不是函数，必须忽略\", () => {\n    const promise = new Promise((resolve, reject) => {\n      reject();\n    });\n    promise.then(null, null);\n  });\n\n  it(\"2.2.2 onFulfilled 是函数\", done => {\n    const success = sinon.fake();\n    const promise = new Promise((resolve, reject) => {\n      resolve(\"xxx\");//resolve传入参数 \"xxx\"\n      resolve(\"xxxxx\");\n      setTimeout(() => {\n        assert(promise.state === \"fulfilled\");\n        assert(success.calledWith(\"xxx\"));//success 被调用时的参数为 \"xxx\"\n        assert.isTrue(success.calledOnce);\n        done();\n      }, 0);\n    });\n    promise.then(success);\n  });\n\n  it(\"2.2.3 onRejected 是函数\", done => {\n    const fail = sinon.fake();\n    const promise = new Promise((resolve, reject) => {\n      reject(\"xxx\");\n      reject(\"xxxxx\");\n      setTimeout(() => {\n        assert(promise.state === \"rejected\");\n        assert(fail.calledWith(\"xxx\"));\n        assert.isTrue(fail.calledOnce);\n        done();\n      }, 0);\n    });\n    promise.then(null, fail);\n  });\n\n  it(\"2.2.4.1 在我的代码执行完之前，不得调用 then 后面的俩函数\", done => {\n    const success = sinon.fake();\n    const promise = new Promise((resolve, reject) => {\n      resolve();\n    });\n    promise.then(success);\n    assert(promise.state === \"pending\");\n    assert.isFalse(success.called);\n    setTimeout(() => {\n      assert(promise.state === \"fulfilled\");\n      assert.isTrue(success.called);\n      done();\n    }, 0);\n  });\n\n  it(\"2.2.4.2 在我的代码执行完之前，不得调用 then 后面的俩函数 失败回调\", done => {\n    const fail = sinon.fake();\n    const promise = new Promise((resolve, reject) => {\n      reject();\n    });\n    promise.then(null, fail);\n    assert(promise.state === \"pending\");\n    assert.isFalse(fail.called);\n    setTimeout(() => {\n      assert(promise.state === \"rejected\");\n      assert.isTrue(fail.called);\n      done();\n    }, 0);\n  });\n\n  it(\"2.2.5.1 onFulfilled和onRejected必须被当做函数调用 with no this value\", done => {\n    const promise = new Promise((resolve, reject) => {\n      resolve();\n    });\n    promise.then(function() {\n      \"use strict\";\n      assert(this === undefined);\n      done();\n    });\n  });\n\n  it(\"2.2.5.2 onFulfilled和onRejected必须被当做函数调用 with no this value, 失败回调\", done => {\n    const promise = new Promise((resolve, reject) => {\n      reject();\n    });\n    promise.then(null, function() {\n      \"use strict\";\n      assert(this === undefined);\n      done();\n    });\n  });\n\n  it(\"2.2.6.1 then可以在同一个promise里被多次调用\", done => {\n    const callbacks = [sinon.fake(), sinon.fake(), sinon.fake()];\n    const promise = new Promise((resolve, reject) => {\n      resolve();\n    });\n    promise.then(callbacks[0]);\n    promise.then(callbacks[1]);\n    promise.then(callbacks[2]);\n\n    setTimeout(() => {\n      assert.isTrue(callbacks[0].called);\n      assert.isTrue(callbacks[1].called);\n      assert.isTrue(callbacks[2].called);\n      assert(callbacks[1].calledAfter(callbacks[0]));\n      assert(callbacks[2].calledAfter(callbacks[1]));\n      done();\n    }, 0);\n  });\n\n  it(\"2.2.6.2 then可以在同一个promise里被多次调用, 失败回调\", done => {\n    const callbacks = [sinon.fake(), sinon.fake(), sinon.fake()];\n    const promise = new Promise((resolve, reject) => {\n      reject();\n    });\n    promise.then(null, callbacks[0]);\n    promise.then(null, callbacks[1]);\n    promise.then(null, callbacks[2]);\n\n    setTimeout(() => {\n      assert.isTrue(callbacks[0].called);\n      assert.isTrue(callbacks[1].called);\n      assert.isTrue(callbacks[2].called);\n      assert(callbacks[1].calledAfter(callbacks[0]));\n      assert(callbacks[2].calledAfter(callbacks[1]));\n      done();\n    }, 0);\n  });\n});\n````\n\n# 实现过程\n\n- [ ] new Promise(fn) 生成一个对象，对象有then方法;\n- [ ] new Promise(fn) 中的 fn 立即执行;\n\n````typescript\nclass MyPromise {\t\n  constructor(fn) {\n    if (typeof fn !== \"function\") {\n      throw new Error(\"Promise 只接收函数作为参数\");\n    }\n    fn();\n  }\n  then() {}\n}\n````\n\n- [ ] new Promise(fn) 中的 fn 执行的时候接收 resolve 和 reject两个函数作为参数\n\n````typescript\nclass MyPromise {\t\n  constructor(fn) {\n    if (typeof fn !== \"function\") {\n      throw new Error(\"Promise 只接收函数作为参数\");\n    }\n    fn(()=>{}, ()=>{});\n  }\n  then() {}\n}\n````\n\n- [ ] pormise.then(success) 会在 resolve 被调用的时候执行\n- [ ] pormise.then(null, reject) 会在 reject 被调用的时候执行\n\n````typescript\nclass MyPromise {\n  success = null;\n  fail = null;\n  resolve() {\n    setTimeout(() => {\n      this.success();\n    }, 0);\n  }\n  reject() {\n    setTimeout(() => {\n      this.fail();\n    }, 0);\n  }\n\n  constructor(fn) {\n    if (typeof fn !== \"function\") {\n      throw new Error(\"Promise 只接收函数作为参数\");\n    }\n    fn(this.resolve.bind(this), this.reject.bind(this));\n  }\n    \n  then(success, fail) {\n    this.success = success;\n    this.fail = fail;\n  }\n}\n````\n\n- 2.2.1.1 如果 onFulfilled不是函数，必须忽略\n\n- 2.2.1.2 如果 onRejected不是函数，必须忽略\n\n  ````typescript\n  class MyPromise {\n    success = null;\n    fail = null;\n    resolve() {\n      setTimeout(() => {      \n        if(typeof this.success === \"function\"){\n          this.success();\n        }\n      }, 0);\n    }\n    reject() {\n      setTimeout(() => {\n        if(typeof this.fail === \"function\"){\n          this.fail();\n        }      \n      }, 0);\n    }\n  \n    constructor(fn) {\n      if (typeof fn !== \"function\") {\n        throw new Error(\"Promise 只接收函数作为参数\");\n      }\n      fn(this.resolve.bind(this), this.reject.bind(this));\n    }\n      \n    then(success?, fail?) {\n      if(typeof success === \"function\"){\n          this.success = success;\n      }\n      if(typeof fail === \"function\"){\n          this.fail = fail;\n      } \n    }\n  }\n  ````\n\n- 2.2.2 onFulfilled 是函数\n\n- 2.2.3 onRejected 是函数\n\n  ````typescript\n  class MyPromise {\n    success = null;\n    fail = null;\n    state = \"pending\";\n    resolve(result) {\n      setTimeout(() => {\n        if (this.state !== \"pending\") return;\n        this.state = \"fulfilled\";\n        if(typeof this.success === \"function\"){\n          this.success(result);\n        }\n      }, 0);\n    }\n    reject(reason) {\n      setTimeout(() => {\n        if (this.state !== \"pending\") return;\n        this.state = \"rejected\";\n        if(typeof this.fail === \"function\"){\n          this.fail(reason);\n        }      \n      }, 0);\n    }\n  \n    constructor(fn) {\n      if (typeof fn !== \"function\") {\n        throw new Error(\"Promise 只接收函数作为参数\");\n      }\n      fn(this.resolve.bind(this), this.reject.bind(this));\n    }\n      \n    then(success?, fail?) {\n      if(typeof success === \"function\"){\n          this.success = success;\n      }\n      if(typeof fail === \"function\"){\n          this.fail = fail;\n      } \n    }\n  }\n  ````\n\n- 2.2.5.1 onFulfilled和onRejected必须被当做函数调用 with no this value\n\n- 2.2.5.2 onFulfilled和onRejected必须被当做函数调用 with no this value, 失败回调\n\n  ````typescript\n  class MyPromise {\n    success = null;\n    fail = null;\n    state = \"pending\";\n    resolve(result) {\n      setTimeout(() => {\n        if (this.state !== \"pending\") return;\n        this.state = \"fulfilled\";\n        if(typeof this.success === \"function\"){\n          this.success.call(undefined, result);\n        }\n      }, 0);\n    }\n    reject(reason) {\n      setTimeout(() => {\n        if (this.state !== \"pending\") return;\n        this.state = \"rejected\";\n        if(typeof this.fail === \"function\"){\n          this.fail.call(undefined, reason);\n        }      \n      }, 0);\n    }\n  \n    constructor(fn) {\n      if (typeof fn !== \"function\") {\n        throw new Error(\"Promise 只接收函数作为参数\");\n      }\n      fn(this.resolve.bind(this), this.reject.bind(this));\n    }\n      \n    then(success?, fail?) {\n      if(typeof success === \"function\"){\n          this.success = success;\n      }\n      if(typeof fail === \"function\"){\n          this.fail = fail;\n      } \n    }\n  }\n  ````\n\n- 2.2.6.1 then可以在同一个promise里被多次调用\n\n- 2.2.6.2 then可以在同一个promise里被多次调用, 失败回调\n\n  ````typescript\n  class MyPromise {\n    callbacks = [];\n    state = \"pending\";\n    resolve(result) {\n      setTimeout(() => {\n        if (this.state !== \"pending\") return;\n        this.state = \"fulfilled\";\n        this.callbacks.forEach(handle => {\n          if (typeof handle[0] === \"function\") {\n            handle[0].call(undefined, result);\n          }\n        });\n      }, 0);\n    }\n    reject(reason) {\n      setTimeout(() => {\n        if (this.state !== \"pending\") return;\n        this.state = \"rejected\";\n        this.callbacks.forEach(handle => {\n          if (typeof handle[1] === \"function\") {\n            handle[1].call(undefined, reason);\n          }\n        });\n      }, 0);\n    }\n  \n    constructor(fn) {\n      if (typeof fn !== \"function\") {\n        throw new Error(\"Promise 只接收函数作为参数\");\n      }\n      fn(this.resolve.bind(this), this.reject.bind(this));\n    }\n      \n    then(success?, fail?) {\n      const handle = [];\n      if (typeof success === \"function\") {\n        handle[0] = success;\n      }\n      if (typeof fail === \"function\") {\n        handle[1] = fail;\n      }\n      this.callbacks.push(handle);\n    }\n  }\n  ````\n\n  \n\n","source":"_posts/手写系列之三：Promise.md","raw":"---\ntitle: 手写系列之三：Promise\ndate: 2021-07-15 13:01:09\ntags: [\"Promise\", \"手写系列\"]\ncategories: JavaScript\n---\n\n# Promises/A+\n\n[Promises/A+](https://promisesaplus.com/) 是 *JavaScript Promise 规范*。以下给出部分规范内容，其余部分在测试代码中说明。\n\n````markdown\n2.1 Promise状态\n\n一个promise必须处于三种状态之一： pending、fulfilled、rejected\n\n2.1.1 当promise处于pending时\n\n- 2.1.1.1 promise可以转为fulfilled或rejected状态\n\n2.1.2 当promise处于fulfilled时\n\n- 2.1.2.1 promise不能转为任何其他状态\n- 2.1.2.2 必须有一个值，且此值不能改变\n\n2.1.3 当promise处于rejected时\n\n- 2.1.3.1 promise不能转为任何其他状态\n- 2.1.3.2 必须有一个reason，且此reason不能改变\n````\n\n\n\n# 测试代码\n\n根据规范内容编写出如下测试代码，依据测试代码完成[满足Promise要求的代码](https://github.com/wuwenxing0912/hand-writing/blob/master/promise/src/index.ts)即可。\n\n<!-- more -->\n\n````typescript\nimport * as chai from \"chai\";\nimport * as sinon from \"sinon\";\nimport * as sinonChai from \"sinon-chai\";\nimport Promise from \"../src/index\";\n\nchai.use(sinonChai);\n\nconst assert = chai.assert;\n\n/**\n * mocha 是JavaScript测试框架\n * chai 是断言库\n * sinon 辅助测试工具\n */\n\ndescribe(\"Promise\", () => {\n  it(\"Promise 是一个类\", () => {\n    assert.isFunction(Promise);\n    assert.isObject(Promise.prototype);\n  });\n\n  it(\"如果 new Promise() 接收的不是一个函数报错\", () => {\n    assert.throw(() => {\n      //@ts-ignore\n      //添加上述语句，typescript会忽略不符合逻辑的代码\n      new Promise();\n    });\n  });\n\n  it(\"new Promise(fn) 生成一个对象，对象有then方法\", () => {\n    const fn = () => {};\n    const obj = new Promise(fn);\n    assert.isObject(obj);\n    assert.isFunction(obj.then);\n  });\n\n  it(\"new Promise(fn) 中的 fn 立即执行\", () => {\n    let fn = sinon.fake();\n    new Promise(fn);\n    assert.isTrue(fn.called);\n  });\n\n  it(\"new Promise(fn) 中的 fn 执行的时候接收 resolve 和 reject两个函数作为参数\", done => {\n    new Promise((resolve, reject) => {\n      assert.isFunction(resolve);\n      assert.isFunction(reject);\n      done();\n    });\n  });\n\n  it(\"pormise.then(success) 会在 resolve 被调用的时候执行\", done => {\n    let success = sinon.fake();\n    const promise = new Promise((resolve, reject) => {\n      assert.isFalse(success.called);\n      resolve();\n      setTimeout(() => {\n        assert.isTrue(success.called);\n        done();\n      });\n    });\n    //@ts-ignore\n    promise.then(success);\n  });\n\n  it(\"pormise.then(null, reject) 会在 reject 被调用的时候执行\", done => {\n    let fail = sinon.fake();\n    const promise = new Promise((resolve, reject) => {\n      assert.isFalse(fail.called);\n      reject();\n      setTimeout(() => {\n        assert.isTrue(fail.called);\n        done();\n      }, 0);\n    });\n    //@ts-ignore\n    promise.then(null, fail);\n  });\n\n  it(\"2.2.1.1 如果 onFulfilled不是函数，必须忽略\", () => {\n    const promise = new Promise((resolve, reject) => {\n      resolve();\n    });\n    promise.then(null);\n  });\n\n  it(\"2.2.1.2 如果 onRejected不是函数，必须忽略\", () => {\n    const promise = new Promise((resolve, reject) => {\n      reject();\n    });\n    promise.then(null, null);\n  });\n\n  it(\"2.2.2 onFulfilled 是函数\", done => {\n    const success = sinon.fake();\n    const promise = new Promise((resolve, reject) => {\n      resolve(\"xxx\");//resolve传入参数 \"xxx\"\n      resolve(\"xxxxx\");\n      setTimeout(() => {\n        assert(promise.state === \"fulfilled\");\n        assert(success.calledWith(\"xxx\"));//success 被调用时的参数为 \"xxx\"\n        assert.isTrue(success.calledOnce);\n        done();\n      }, 0);\n    });\n    promise.then(success);\n  });\n\n  it(\"2.2.3 onRejected 是函数\", done => {\n    const fail = sinon.fake();\n    const promise = new Promise((resolve, reject) => {\n      reject(\"xxx\");\n      reject(\"xxxxx\");\n      setTimeout(() => {\n        assert(promise.state === \"rejected\");\n        assert(fail.calledWith(\"xxx\"));\n        assert.isTrue(fail.calledOnce);\n        done();\n      }, 0);\n    });\n    promise.then(null, fail);\n  });\n\n  it(\"2.2.4.1 在我的代码执行完之前，不得调用 then 后面的俩函数\", done => {\n    const success = sinon.fake();\n    const promise = new Promise((resolve, reject) => {\n      resolve();\n    });\n    promise.then(success);\n    assert(promise.state === \"pending\");\n    assert.isFalse(success.called);\n    setTimeout(() => {\n      assert(promise.state === \"fulfilled\");\n      assert.isTrue(success.called);\n      done();\n    }, 0);\n  });\n\n  it(\"2.2.4.2 在我的代码执行完之前，不得调用 then 后面的俩函数 失败回调\", done => {\n    const fail = sinon.fake();\n    const promise = new Promise((resolve, reject) => {\n      reject();\n    });\n    promise.then(null, fail);\n    assert(promise.state === \"pending\");\n    assert.isFalse(fail.called);\n    setTimeout(() => {\n      assert(promise.state === \"rejected\");\n      assert.isTrue(fail.called);\n      done();\n    }, 0);\n  });\n\n  it(\"2.2.5.1 onFulfilled和onRejected必须被当做函数调用 with no this value\", done => {\n    const promise = new Promise((resolve, reject) => {\n      resolve();\n    });\n    promise.then(function() {\n      \"use strict\";\n      assert(this === undefined);\n      done();\n    });\n  });\n\n  it(\"2.2.5.2 onFulfilled和onRejected必须被当做函数调用 with no this value, 失败回调\", done => {\n    const promise = new Promise((resolve, reject) => {\n      reject();\n    });\n    promise.then(null, function() {\n      \"use strict\";\n      assert(this === undefined);\n      done();\n    });\n  });\n\n  it(\"2.2.6.1 then可以在同一个promise里被多次调用\", done => {\n    const callbacks = [sinon.fake(), sinon.fake(), sinon.fake()];\n    const promise = new Promise((resolve, reject) => {\n      resolve();\n    });\n    promise.then(callbacks[0]);\n    promise.then(callbacks[1]);\n    promise.then(callbacks[2]);\n\n    setTimeout(() => {\n      assert.isTrue(callbacks[0].called);\n      assert.isTrue(callbacks[1].called);\n      assert.isTrue(callbacks[2].called);\n      assert(callbacks[1].calledAfter(callbacks[0]));\n      assert(callbacks[2].calledAfter(callbacks[1]));\n      done();\n    }, 0);\n  });\n\n  it(\"2.2.6.2 then可以在同一个promise里被多次调用, 失败回调\", done => {\n    const callbacks = [sinon.fake(), sinon.fake(), sinon.fake()];\n    const promise = new Promise((resolve, reject) => {\n      reject();\n    });\n    promise.then(null, callbacks[0]);\n    promise.then(null, callbacks[1]);\n    promise.then(null, callbacks[2]);\n\n    setTimeout(() => {\n      assert.isTrue(callbacks[0].called);\n      assert.isTrue(callbacks[1].called);\n      assert.isTrue(callbacks[2].called);\n      assert(callbacks[1].calledAfter(callbacks[0]));\n      assert(callbacks[2].calledAfter(callbacks[1]));\n      done();\n    }, 0);\n  });\n});\n````\n\n# 实现过程\n\n- [ ] new Promise(fn) 生成一个对象，对象有then方法;\n- [ ] new Promise(fn) 中的 fn 立即执行;\n\n````typescript\nclass MyPromise {\t\n  constructor(fn) {\n    if (typeof fn !== \"function\") {\n      throw new Error(\"Promise 只接收函数作为参数\");\n    }\n    fn();\n  }\n  then() {}\n}\n````\n\n- [ ] new Promise(fn) 中的 fn 执行的时候接收 resolve 和 reject两个函数作为参数\n\n````typescript\nclass MyPromise {\t\n  constructor(fn) {\n    if (typeof fn !== \"function\") {\n      throw new Error(\"Promise 只接收函数作为参数\");\n    }\n    fn(()=>{}, ()=>{});\n  }\n  then() {}\n}\n````\n\n- [ ] pormise.then(success) 会在 resolve 被调用的时候执行\n- [ ] pormise.then(null, reject) 会在 reject 被调用的时候执行\n\n````typescript\nclass MyPromise {\n  success = null;\n  fail = null;\n  resolve() {\n    setTimeout(() => {\n      this.success();\n    }, 0);\n  }\n  reject() {\n    setTimeout(() => {\n      this.fail();\n    }, 0);\n  }\n\n  constructor(fn) {\n    if (typeof fn !== \"function\") {\n      throw new Error(\"Promise 只接收函数作为参数\");\n    }\n    fn(this.resolve.bind(this), this.reject.bind(this));\n  }\n    \n  then(success, fail) {\n    this.success = success;\n    this.fail = fail;\n  }\n}\n````\n\n- 2.2.1.1 如果 onFulfilled不是函数，必须忽略\n\n- 2.2.1.2 如果 onRejected不是函数，必须忽略\n\n  ````typescript\n  class MyPromise {\n    success = null;\n    fail = null;\n    resolve() {\n      setTimeout(() => {      \n        if(typeof this.success === \"function\"){\n          this.success();\n        }\n      }, 0);\n    }\n    reject() {\n      setTimeout(() => {\n        if(typeof this.fail === \"function\"){\n          this.fail();\n        }      \n      }, 0);\n    }\n  \n    constructor(fn) {\n      if (typeof fn !== \"function\") {\n        throw new Error(\"Promise 只接收函数作为参数\");\n      }\n      fn(this.resolve.bind(this), this.reject.bind(this));\n    }\n      \n    then(success?, fail?) {\n      if(typeof success === \"function\"){\n          this.success = success;\n      }\n      if(typeof fail === \"function\"){\n          this.fail = fail;\n      } \n    }\n  }\n  ````\n\n- 2.2.2 onFulfilled 是函数\n\n- 2.2.3 onRejected 是函数\n\n  ````typescript\n  class MyPromise {\n    success = null;\n    fail = null;\n    state = \"pending\";\n    resolve(result) {\n      setTimeout(() => {\n        if (this.state !== \"pending\") return;\n        this.state = \"fulfilled\";\n        if(typeof this.success === \"function\"){\n          this.success(result);\n        }\n      }, 0);\n    }\n    reject(reason) {\n      setTimeout(() => {\n        if (this.state !== \"pending\") return;\n        this.state = \"rejected\";\n        if(typeof this.fail === \"function\"){\n          this.fail(reason);\n        }      \n      }, 0);\n    }\n  \n    constructor(fn) {\n      if (typeof fn !== \"function\") {\n        throw new Error(\"Promise 只接收函数作为参数\");\n      }\n      fn(this.resolve.bind(this), this.reject.bind(this));\n    }\n      \n    then(success?, fail?) {\n      if(typeof success === \"function\"){\n          this.success = success;\n      }\n      if(typeof fail === \"function\"){\n          this.fail = fail;\n      } \n    }\n  }\n  ````\n\n- 2.2.5.1 onFulfilled和onRejected必须被当做函数调用 with no this value\n\n- 2.2.5.2 onFulfilled和onRejected必须被当做函数调用 with no this value, 失败回调\n\n  ````typescript\n  class MyPromise {\n    success = null;\n    fail = null;\n    state = \"pending\";\n    resolve(result) {\n      setTimeout(() => {\n        if (this.state !== \"pending\") return;\n        this.state = \"fulfilled\";\n        if(typeof this.success === \"function\"){\n          this.success.call(undefined, result);\n        }\n      }, 0);\n    }\n    reject(reason) {\n      setTimeout(() => {\n        if (this.state !== \"pending\") return;\n        this.state = \"rejected\";\n        if(typeof this.fail === \"function\"){\n          this.fail.call(undefined, reason);\n        }      \n      }, 0);\n    }\n  \n    constructor(fn) {\n      if (typeof fn !== \"function\") {\n        throw new Error(\"Promise 只接收函数作为参数\");\n      }\n      fn(this.resolve.bind(this), this.reject.bind(this));\n    }\n      \n    then(success?, fail?) {\n      if(typeof success === \"function\"){\n          this.success = success;\n      }\n      if(typeof fail === \"function\"){\n          this.fail = fail;\n      } \n    }\n  }\n  ````\n\n- 2.2.6.1 then可以在同一个promise里被多次调用\n\n- 2.2.6.2 then可以在同一个promise里被多次调用, 失败回调\n\n  ````typescript\n  class MyPromise {\n    callbacks = [];\n    state = \"pending\";\n    resolve(result) {\n      setTimeout(() => {\n        if (this.state !== \"pending\") return;\n        this.state = \"fulfilled\";\n        this.callbacks.forEach(handle => {\n          if (typeof handle[0] === \"function\") {\n            handle[0].call(undefined, result);\n          }\n        });\n      }, 0);\n    }\n    reject(reason) {\n      setTimeout(() => {\n        if (this.state !== \"pending\") return;\n        this.state = \"rejected\";\n        this.callbacks.forEach(handle => {\n          if (typeof handle[1] === \"function\") {\n            handle[1].call(undefined, reason);\n          }\n        });\n      }, 0);\n    }\n  \n    constructor(fn) {\n      if (typeof fn !== \"function\") {\n        throw new Error(\"Promise 只接收函数作为参数\");\n      }\n      fn(this.resolve.bind(this), this.reject.bind(this));\n    }\n      \n    then(success?, fail?) {\n      const handle = [];\n      if (typeof success === \"function\") {\n        handle[0] = success;\n      }\n      if (typeof fail === \"function\") {\n        handle[1] = fail;\n      }\n      this.callbacks.push(handle);\n    }\n  }\n  ````\n\n  \n\n","slug":"手写系列之三：Promise","published":1,"updated":"2021-07-15T08:46:01.745Z","_id":"ckr4ixmaw0000ycu0buu0huul","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Promises-A\"><a href=\"#Promises-A\" class=\"headerlink\" title=\"Promises/A+\"></a>Promises/A+</h1><p><a href=\"https://promisesaplus.com/\">Promises/A+</a> 是 <em>JavaScript Promise 规范</em>。以下给出部分规范内容，其余部分在测试代码中说明。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.1 Promise状态</span><br><span class=\"line\"></span><br><span class=\"line\">一个promise必须处于三种状态之一： pending、fulfilled、rejected</span><br><span class=\"line\"></span><br><span class=\"line\">2.1.1 当promise处于pending时</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 2.1.1.1 promise可以转为fulfilled或rejected状态</span><br><span class=\"line\"></span><br><span class=\"line\">2.1.2 当promise处于fulfilled时</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 2.1.2.1 promise不能转为任何其他状态</span><br><span class=\"line\"><span class=\"bullet\">-</span> 2.1.2.2 必须有一个值，且此值不能改变</span><br><span class=\"line\"></span><br><span class=\"line\">2.1.3 当promise处于rejected时</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 2.1.3.1 promise不能转为任何其他状态</span><br><span class=\"line\"><span class=\"bullet\">-</span> 2.1.3.2 必须有一个reason，且此reason不能改变</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h1><p>根据规范内容编写出如下测试代码，依据测试代码完成<a href=\"https://github.com/wuwenxing0912/hand-writing/blob/master/promise/src/index.ts\">满足Promise要求的代码</a>即可。</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> chai <span class=\"keyword\">from</span> <span class=\"string\">&quot;chai&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> sinon <span class=\"keyword\">from</span> <span class=\"string\">&quot;sinon&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> sinonChai <span class=\"keyword\">from</span> <span class=\"string\">&quot;sinon-chai&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"built_in\">Promise</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;../src/index&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">chai.use(sinonChai);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> assert = chai.assert;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * mocha 是JavaScript测试框架</span></span><br><span class=\"line\"><span class=\"comment\"> * chai 是断言库</span></span><br><span class=\"line\"><span class=\"comment\"> * sinon 辅助测试工具</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">&quot;Promise&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  it(<span class=\"string\">&quot;Promise 是一个类&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    assert.isFunction(<span class=\"built_in\">Promise</span>);</span><br><span class=\"line\">    assert.isObject(<span class=\"built_in\">Promise</span>.prototype);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">&quot;如果 new Promise() 接收的不是一个函数报错&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    assert.throw(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//@ts-ignore</span></span><br><span class=\"line\">      <span class=\"comment\">//添加上述语句，typescript会忽略不符合逻辑的代码</span></span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">&quot;new Promise(fn) 生成一个对象，对象有then方法&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fn = <span class=\"function\">() =&gt;</span> &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(fn);</span><br><span class=\"line\">    assert.isObject(obj);</span><br><span class=\"line\">    assert.isFunction(obj.then);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">&quot;new Promise(fn) 中的 fn 立即执行&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fn = sinon.fake();</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(fn);</span><br><span class=\"line\">    assert.isTrue(fn.called);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">&quot;new Promise(fn) 中的 fn 执行的时候接收 resolve 和 reject两个函数作为参数&quot;</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      assert.isFunction(resolve);</span><br><span class=\"line\">      assert.isFunction(reject);</span><br><span class=\"line\">      done();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">&quot;pormise.then(success) 会在 resolve 被调用的时候执行&quot;</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> success = sinon.fake();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      assert.isFalse(success.called);</span><br><span class=\"line\">      resolve();</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        assert.isTrue(success.called);</span><br><span class=\"line\">        done();</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">//@ts-ignore</span></span><br><span class=\"line\">    promise.then(success);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">&quot;pormise.then(null, reject) 会在 reject 被调用的时候执行&quot;</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fail = sinon.fake();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      assert.isFalse(fail.called);</span><br><span class=\"line\">      reject();</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        assert.isTrue(fail.called);</span><br><span class=\"line\">        done();</span><br><span class=\"line\">      &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">//@ts-ignore</span></span><br><span class=\"line\">    promise.then(<span class=\"literal\">null</span>, fail);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">&quot;2.2.1.1 如果 onFulfilled不是函数，必须忽略&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      resolve();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    promise.then(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">&quot;2.2.1.2 如果 onRejected不是函数，必须忽略&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      reject();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    promise.then(<span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">&quot;2.2.2 onFulfilled 是函数&quot;</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> success = sinon.fake();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      resolve(<span class=\"string\">&quot;xxx&quot;</span>);<span class=\"comment\">//resolve传入参数 &quot;xxx&quot;</span></span><br><span class=\"line\">      resolve(<span class=\"string\">&quot;xxxxx&quot;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        assert(promise.state === <span class=\"string\">&quot;fulfilled&quot;</span>);</span><br><span class=\"line\">        assert(success.calledWith(<span class=\"string\">&quot;xxx&quot;</span>));<span class=\"comment\">//success 被调用时的参数为 &quot;xxx&quot;</span></span><br><span class=\"line\">        assert.isTrue(success.calledOnce);</span><br><span class=\"line\">        done();</span><br><span class=\"line\">      &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    promise.then(success);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">&quot;2.2.3 onRejected 是函数&quot;</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fail = sinon.fake();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      reject(<span class=\"string\">&quot;xxx&quot;</span>);</span><br><span class=\"line\">      reject(<span class=\"string\">&quot;xxxxx&quot;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        assert(promise.state === <span class=\"string\">&quot;rejected&quot;</span>);</span><br><span class=\"line\">        assert(fail.calledWith(<span class=\"string\">&quot;xxx&quot;</span>));</span><br><span class=\"line\">        assert.isTrue(fail.calledOnce);</span><br><span class=\"line\">        done();</span><br><span class=\"line\">      &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    promise.then(<span class=\"literal\">null</span>, fail);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">&quot;2.2.4.1 在我的代码执行完之前，不得调用 then 后面的俩函数&quot;</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> success = sinon.fake();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      resolve();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    promise.then(success);</span><br><span class=\"line\">    assert(promise.state === <span class=\"string\">&quot;pending&quot;</span>);</span><br><span class=\"line\">    assert.isFalse(success.called);</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      assert(promise.state === <span class=\"string\">&quot;fulfilled&quot;</span>);</span><br><span class=\"line\">      assert.isTrue(success.called);</span><br><span class=\"line\">      done();</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">&quot;2.2.4.2 在我的代码执行完之前，不得调用 then 后面的俩函数 失败回调&quot;</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fail = sinon.fake();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      reject();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    promise.then(<span class=\"literal\">null</span>, fail);</span><br><span class=\"line\">    assert(promise.state === <span class=\"string\">&quot;pending&quot;</span>);</span><br><span class=\"line\">    assert.isFalse(fail.called);</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      assert(promise.state === <span class=\"string\">&quot;rejected&quot;</span>);</span><br><span class=\"line\">      assert.isTrue(fail.called);</span><br><span class=\"line\">      done();</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">&quot;2.2.5.1 onFulfilled和onRejected必须被当做函数调用 with no this value&quot;</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      resolve();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    promise.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">      &quot;use strict&quot;</span>;</span><br><span class=\"line\">      assert(<span class=\"built_in\">this</span> === <span class=\"literal\">undefined</span>);</span><br><span class=\"line\">      done();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">&quot;2.2.5.2 onFulfilled和onRejected必须被当做函数调用 with no this value, 失败回调&quot;</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      reject();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    promise.then(<span class=\"literal\">null</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">      &quot;use strict&quot;</span>;</span><br><span class=\"line\">      assert(<span class=\"built_in\">this</span> === <span class=\"literal\">undefined</span>);</span><br><span class=\"line\">      done();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">&quot;2.2.6.1 then可以在同一个promise里被多次调用&quot;</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> callbacks = [sinon.fake(), sinon.fake(), sinon.fake()];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      resolve();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    promise.then(callbacks[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    promise.then(callbacks[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    promise.then(callbacks[<span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      assert.isTrue(callbacks[<span class=\"number\">0</span>].called);</span><br><span class=\"line\">      assert.isTrue(callbacks[<span class=\"number\">1</span>].called);</span><br><span class=\"line\">      assert.isTrue(callbacks[<span class=\"number\">2</span>].called);</span><br><span class=\"line\">      assert(callbacks[<span class=\"number\">1</span>].calledAfter(callbacks[<span class=\"number\">0</span>]));</span><br><span class=\"line\">      assert(callbacks[<span class=\"number\">2</span>].calledAfter(callbacks[<span class=\"number\">1</span>]));</span><br><span class=\"line\">      done();</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">&quot;2.2.6.2 then可以在同一个promise里被多次调用, 失败回调&quot;</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> callbacks = [sinon.fake(), sinon.fake(), sinon.fake()];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      reject();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    promise.then(<span class=\"literal\">null</span>, callbacks[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    promise.then(<span class=\"literal\">null</span>, callbacks[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    promise.then(<span class=\"literal\">null</span>, callbacks[<span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      assert.isTrue(callbacks[<span class=\"number\">0</span>].called);</span><br><span class=\"line\">      assert.isTrue(callbacks[<span class=\"number\">1</span>].called);</span><br><span class=\"line\">      assert.isTrue(callbacks[<span class=\"number\">2</span>].called);</span><br><span class=\"line\">      assert(callbacks[<span class=\"number\">1</span>].calledAfter(callbacks[<span class=\"number\">0</span>]));</span><br><span class=\"line\">      assert(callbacks[<span class=\"number\">2</span>].calledAfter(callbacks[<span class=\"number\">1</span>]));</span><br><span class=\"line\">      done();</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"实现过程\"><a href=\"#实现过程\" class=\"headerlink\" title=\"实现过程\"></a>实现过程</h1><ul>\n<li><input disabled type=\"checkbox\"> new Promise(fn) 生成一个对象，对象有then方法;</li>\n<li><input disabled type=\"checkbox\"> new Promise(fn) 中的 fn 立即执行;</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;\t</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">fn</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;Promise 只接收函数作为参数&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fn();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">then</span>(<span class=\"params\"></span>)</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><input disabled type=\"checkbox\"> new Promise(fn) 中的 fn 执行的时候接收 resolve 和 reject两个函数作为参数</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;\t</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">fn</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;Promise 只接收函数作为参数&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fn(<span class=\"function\">()=&gt;</span>&#123;&#125;, <span class=\"function\">()=&gt;</span>&#123;&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">then</span>(<span class=\"params\"></span>)</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><input disabled type=\"checkbox\"> pormise.then(success) 会在 resolve 被调用的时候执行</li>\n<li><input disabled type=\"checkbox\"> pormise.then(null, reject) 会在 reject 被调用的时候执行</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;</span><br><span class=\"line\">  success = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  fail = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">resolve</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.success();</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">reject</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.fail();</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">fn</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;Promise 只接收函数作为参数&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fn(<span class=\"built_in\">this</span>.resolve.bind(<span class=\"built_in\">this</span>), <span class=\"built_in\">this</span>.reject.bind(<span class=\"built_in\">this</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">then</span>(<span class=\"params\">success, fail</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.success = success;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.fail = fail;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>2.2.1.1 如果 onFulfilled不是函数，必须忽略</p>\n</li>\n<li><p>2.2.1.2 如果 onRejected不是函数，必须忽略</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;</span><br><span class=\"line\">  success = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  fail = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">resolve</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;      </span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"built_in\">this</span>.success === <span class=\"string\">&quot;function&quot;</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.success();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">reject</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"built_in\">this</span>.fail === <span class=\"string\">&quot;function&quot;</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.fail();</span><br><span class=\"line\">      &#125;      </span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">fn</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;Promise 只接收函数作为参数&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fn(<span class=\"built_in\">this</span>.resolve.bind(<span class=\"built_in\">this</span>), <span class=\"built_in\">this</span>.reject.bind(<span class=\"built_in\">this</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">then</span>(<span class=\"params\">success?, fail?</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> success === <span class=\"string\">&quot;function&quot;</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.success = success;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> fail === <span class=\"string\">&quot;function&quot;</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.fail = fail;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>2.2.2 onFulfilled 是函数</p>\n</li>\n<li><p>2.2.3 onRejected 是函数</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;</span><br><span class=\"line\">  success = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  fail = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  state = <span class=\"string\">&quot;pending&quot;</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">resolve</span>(<span class=\"params\">result</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.state !== <span class=\"string\">&quot;pending&quot;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.state = <span class=\"string\">&quot;fulfilled&quot;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"built_in\">this</span>.success === <span class=\"string\">&quot;function&quot;</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.success(result);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">reject</span>(<span class=\"params\">reason</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.state !== <span class=\"string\">&quot;pending&quot;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.state = <span class=\"string\">&quot;rejected&quot;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"built_in\">this</span>.fail === <span class=\"string\">&quot;function&quot;</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.fail(reason);</span><br><span class=\"line\">      &#125;      </span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">fn</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;Promise 只接收函数作为参数&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fn(<span class=\"built_in\">this</span>.resolve.bind(<span class=\"built_in\">this</span>), <span class=\"built_in\">this</span>.reject.bind(<span class=\"built_in\">this</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">then</span>(<span class=\"params\">success?, fail?</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> success === <span class=\"string\">&quot;function&quot;</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.success = success;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> fail === <span class=\"string\">&quot;function&quot;</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.fail = fail;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>2.2.5.1 onFulfilled和onRejected必须被当做函数调用 with no this value</p>\n</li>\n<li><p>2.2.5.2 onFulfilled和onRejected必须被当做函数调用 with no this value, 失败回调</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;</span><br><span class=\"line\">  success = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  fail = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  state = <span class=\"string\">&quot;pending&quot;</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">resolve</span>(<span class=\"params\">result</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.state !== <span class=\"string\">&quot;pending&quot;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.state = <span class=\"string\">&quot;fulfilled&quot;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"built_in\">this</span>.success === <span class=\"string\">&quot;function&quot;</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.success.call(<span class=\"literal\">undefined</span>, result);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">reject</span>(<span class=\"params\">reason</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.state !== <span class=\"string\">&quot;pending&quot;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.state = <span class=\"string\">&quot;rejected&quot;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"built_in\">this</span>.fail === <span class=\"string\">&quot;function&quot;</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.fail.call(<span class=\"literal\">undefined</span>, reason);</span><br><span class=\"line\">      &#125;      </span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">fn</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;Promise 只接收函数作为参数&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fn(<span class=\"built_in\">this</span>.resolve.bind(<span class=\"built_in\">this</span>), <span class=\"built_in\">this</span>.reject.bind(<span class=\"built_in\">this</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">then</span>(<span class=\"params\">success?, fail?</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> success === <span class=\"string\">&quot;function&quot;</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.success = success;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> fail === <span class=\"string\">&quot;function&quot;</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.fail = fail;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>2.2.6.1 then可以在同一个promise里被多次调用</p>\n</li>\n<li><p>2.2.6.2 then可以在同一个promise里被多次调用, 失败回调</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;</span><br><span class=\"line\">  callbacks = [];</span><br><span class=\"line\">  state = <span class=\"string\">&quot;pending&quot;</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">resolve</span>(<span class=\"params\">result</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.state !== <span class=\"string\">&quot;pending&quot;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.state = <span class=\"string\">&quot;fulfilled&quot;</span>;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.callbacks.forEach(<span class=\"function\"><span class=\"params\">handle</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> handle[<span class=\"number\">0</span>] === <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">          handle[<span class=\"number\">0</span>].call(<span class=\"literal\">undefined</span>, result);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">reject</span>(<span class=\"params\">reason</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.state !== <span class=\"string\">&quot;pending&quot;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.state = <span class=\"string\">&quot;rejected&quot;</span>;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.callbacks.forEach(<span class=\"function\"><span class=\"params\">handle</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> handle[<span class=\"number\">1</span>] === <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">          handle[<span class=\"number\">1</span>].call(<span class=\"literal\">undefined</span>, reason);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">fn</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;Promise 只接收函数作为参数&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fn(<span class=\"built_in\">this</span>.resolve.bind(<span class=\"built_in\">this</span>), <span class=\"built_in\">this</span>.reject.bind(<span class=\"built_in\">this</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">then</span>(<span class=\"params\">success?, fail?</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> handle = [];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> success === <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">      handle[<span class=\"number\">0</span>] = success;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fail === <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">      handle[<span class=\"number\">1</span>] = fail;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.callbacks.push(handle);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"Promises-A\"><a href=\"#Promises-A\" class=\"headerlink\" title=\"Promises/A+\"></a>Promises/A+</h1><p><a href=\"https://promisesaplus.com/\">Promises/A+</a> 是 <em>JavaScript Promise 规范</em>。以下给出部分规范内容，其余部分在测试代码中说明。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.1 Promise状态</span><br><span class=\"line\"></span><br><span class=\"line\">一个promise必须处于三种状态之一： pending、fulfilled、rejected</span><br><span class=\"line\"></span><br><span class=\"line\">2.1.1 当promise处于pending时</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 2.1.1.1 promise可以转为fulfilled或rejected状态</span><br><span class=\"line\"></span><br><span class=\"line\">2.1.2 当promise处于fulfilled时</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 2.1.2.1 promise不能转为任何其他状态</span><br><span class=\"line\"><span class=\"bullet\">-</span> 2.1.2.2 必须有一个值，且此值不能改变</span><br><span class=\"line\"></span><br><span class=\"line\">2.1.3 当promise处于rejected时</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 2.1.3.1 promise不能转为任何其他状态</span><br><span class=\"line\"><span class=\"bullet\">-</span> 2.1.3.2 必须有一个reason，且此reason不能改变</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h1><p>根据规范内容编写出如下测试代码，依据测试代码完成<a href=\"https://github.com/wuwenxing0912/hand-writing/blob/master/promise/src/index.ts\">满足Promise要求的代码</a>即可。</p>","more":"<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> chai <span class=\"keyword\">from</span> <span class=\"string\">&quot;chai&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> sinon <span class=\"keyword\">from</span> <span class=\"string\">&quot;sinon&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> sinonChai <span class=\"keyword\">from</span> <span class=\"string\">&quot;sinon-chai&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"built_in\">Promise</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;../src/index&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">chai.use(sinonChai);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> assert = chai.assert;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * mocha 是JavaScript测试框架</span></span><br><span class=\"line\"><span class=\"comment\"> * chai 是断言库</span></span><br><span class=\"line\"><span class=\"comment\"> * sinon 辅助测试工具</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">&quot;Promise&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  it(<span class=\"string\">&quot;Promise 是一个类&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    assert.isFunction(<span class=\"built_in\">Promise</span>);</span><br><span class=\"line\">    assert.isObject(<span class=\"built_in\">Promise</span>.prototype);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">&quot;如果 new Promise() 接收的不是一个函数报错&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    assert.throw(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//@ts-ignore</span></span><br><span class=\"line\">      <span class=\"comment\">//添加上述语句，typescript会忽略不符合逻辑的代码</span></span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">&quot;new Promise(fn) 生成一个对象，对象有then方法&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fn = <span class=\"function\">() =&gt;</span> &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(fn);</span><br><span class=\"line\">    assert.isObject(obj);</span><br><span class=\"line\">    assert.isFunction(obj.then);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">&quot;new Promise(fn) 中的 fn 立即执行&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fn = sinon.fake();</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(fn);</span><br><span class=\"line\">    assert.isTrue(fn.called);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">&quot;new Promise(fn) 中的 fn 执行的时候接收 resolve 和 reject两个函数作为参数&quot;</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      assert.isFunction(resolve);</span><br><span class=\"line\">      assert.isFunction(reject);</span><br><span class=\"line\">      done();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">&quot;pormise.then(success) 会在 resolve 被调用的时候执行&quot;</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> success = sinon.fake();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      assert.isFalse(success.called);</span><br><span class=\"line\">      resolve();</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        assert.isTrue(success.called);</span><br><span class=\"line\">        done();</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">//@ts-ignore</span></span><br><span class=\"line\">    promise.then(success);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">&quot;pormise.then(null, reject) 会在 reject 被调用的时候执行&quot;</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fail = sinon.fake();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      assert.isFalse(fail.called);</span><br><span class=\"line\">      reject();</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        assert.isTrue(fail.called);</span><br><span class=\"line\">        done();</span><br><span class=\"line\">      &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">//@ts-ignore</span></span><br><span class=\"line\">    promise.then(<span class=\"literal\">null</span>, fail);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">&quot;2.2.1.1 如果 onFulfilled不是函数，必须忽略&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      resolve();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    promise.then(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">&quot;2.2.1.2 如果 onRejected不是函数，必须忽略&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      reject();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    promise.then(<span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">&quot;2.2.2 onFulfilled 是函数&quot;</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> success = sinon.fake();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      resolve(<span class=\"string\">&quot;xxx&quot;</span>);<span class=\"comment\">//resolve传入参数 &quot;xxx&quot;</span></span><br><span class=\"line\">      resolve(<span class=\"string\">&quot;xxxxx&quot;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        assert(promise.state === <span class=\"string\">&quot;fulfilled&quot;</span>);</span><br><span class=\"line\">        assert(success.calledWith(<span class=\"string\">&quot;xxx&quot;</span>));<span class=\"comment\">//success 被调用时的参数为 &quot;xxx&quot;</span></span><br><span class=\"line\">        assert.isTrue(success.calledOnce);</span><br><span class=\"line\">        done();</span><br><span class=\"line\">      &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    promise.then(success);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">&quot;2.2.3 onRejected 是函数&quot;</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fail = sinon.fake();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      reject(<span class=\"string\">&quot;xxx&quot;</span>);</span><br><span class=\"line\">      reject(<span class=\"string\">&quot;xxxxx&quot;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        assert(promise.state === <span class=\"string\">&quot;rejected&quot;</span>);</span><br><span class=\"line\">        assert(fail.calledWith(<span class=\"string\">&quot;xxx&quot;</span>));</span><br><span class=\"line\">        assert.isTrue(fail.calledOnce);</span><br><span class=\"line\">        done();</span><br><span class=\"line\">      &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    promise.then(<span class=\"literal\">null</span>, fail);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">&quot;2.2.4.1 在我的代码执行完之前，不得调用 then 后面的俩函数&quot;</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> success = sinon.fake();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      resolve();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    promise.then(success);</span><br><span class=\"line\">    assert(promise.state === <span class=\"string\">&quot;pending&quot;</span>);</span><br><span class=\"line\">    assert.isFalse(success.called);</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      assert(promise.state === <span class=\"string\">&quot;fulfilled&quot;</span>);</span><br><span class=\"line\">      assert.isTrue(success.called);</span><br><span class=\"line\">      done();</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">&quot;2.2.4.2 在我的代码执行完之前，不得调用 then 后面的俩函数 失败回调&quot;</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fail = sinon.fake();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      reject();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    promise.then(<span class=\"literal\">null</span>, fail);</span><br><span class=\"line\">    assert(promise.state === <span class=\"string\">&quot;pending&quot;</span>);</span><br><span class=\"line\">    assert.isFalse(fail.called);</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      assert(promise.state === <span class=\"string\">&quot;rejected&quot;</span>);</span><br><span class=\"line\">      assert.isTrue(fail.called);</span><br><span class=\"line\">      done();</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">&quot;2.2.5.1 onFulfilled和onRejected必须被当做函数调用 with no this value&quot;</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      resolve();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    promise.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">      &quot;use strict&quot;</span>;</span><br><span class=\"line\">      assert(<span class=\"built_in\">this</span> === <span class=\"literal\">undefined</span>);</span><br><span class=\"line\">      done();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">&quot;2.2.5.2 onFulfilled和onRejected必须被当做函数调用 with no this value, 失败回调&quot;</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      reject();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    promise.then(<span class=\"literal\">null</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">      &quot;use strict&quot;</span>;</span><br><span class=\"line\">      assert(<span class=\"built_in\">this</span> === <span class=\"literal\">undefined</span>);</span><br><span class=\"line\">      done();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">&quot;2.2.6.1 then可以在同一个promise里被多次调用&quot;</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> callbacks = [sinon.fake(), sinon.fake(), sinon.fake()];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      resolve();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    promise.then(callbacks[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    promise.then(callbacks[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    promise.then(callbacks[<span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      assert.isTrue(callbacks[<span class=\"number\">0</span>].called);</span><br><span class=\"line\">      assert.isTrue(callbacks[<span class=\"number\">1</span>].called);</span><br><span class=\"line\">      assert.isTrue(callbacks[<span class=\"number\">2</span>].called);</span><br><span class=\"line\">      assert(callbacks[<span class=\"number\">1</span>].calledAfter(callbacks[<span class=\"number\">0</span>]));</span><br><span class=\"line\">      assert(callbacks[<span class=\"number\">2</span>].calledAfter(callbacks[<span class=\"number\">1</span>]));</span><br><span class=\"line\">      done();</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">&quot;2.2.6.2 then可以在同一个promise里被多次调用, 失败回调&quot;</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> callbacks = [sinon.fake(), sinon.fake(), sinon.fake()];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      reject();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    promise.then(<span class=\"literal\">null</span>, callbacks[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    promise.then(<span class=\"literal\">null</span>, callbacks[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    promise.then(<span class=\"literal\">null</span>, callbacks[<span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      assert.isTrue(callbacks[<span class=\"number\">0</span>].called);</span><br><span class=\"line\">      assert.isTrue(callbacks[<span class=\"number\">1</span>].called);</span><br><span class=\"line\">      assert.isTrue(callbacks[<span class=\"number\">2</span>].called);</span><br><span class=\"line\">      assert(callbacks[<span class=\"number\">1</span>].calledAfter(callbacks[<span class=\"number\">0</span>]));</span><br><span class=\"line\">      assert(callbacks[<span class=\"number\">2</span>].calledAfter(callbacks[<span class=\"number\">1</span>]));</span><br><span class=\"line\">      done();</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"实现过程\"><a href=\"#实现过程\" class=\"headerlink\" title=\"实现过程\"></a>实现过程</h1><ul>\n<li><input disabled type=\"checkbox\"> new Promise(fn) 生成一个对象，对象有then方法;</li>\n<li><input disabled type=\"checkbox\"> new Promise(fn) 中的 fn 立即执行;</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;\t</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">fn</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;Promise 只接收函数作为参数&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fn();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">then</span>(<span class=\"params\"></span>)</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><input disabled type=\"checkbox\"> new Promise(fn) 中的 fn 执行的时候接收 resolve 和 reject两个函数作为参数</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;\t</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">fn</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;Promise 只接收函数作为参数&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fn(<span class=\"function\">()=&gt;</span>&#123;&#125;, <span class=\"function\">()=&gt;</span>&#123;&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">then</span>(<span class=\"params\"></span>)</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><input disabled type=\"checkbox\"> pormise.then(success) 会在 resolve 被调用的时候执行</li>\n<li><input disabled type=\"checkbox\"> pormise.then(null, reject) 会在 reject 被调用的时候执行</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;</span><br><span class=\"line\">  success = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  fail = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">resolve</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.success();</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">reject</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.fail();</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">fn</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;Promise 只接收函数作为参数&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fn(<span class=\"built_in\">this</span>.resolve.bind(<span class=\"built_in\">this</span>), <span class=\"built_in\">this</span>.reject.bind(<span class=\"built_in\">this</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">then</span>(<span class=\"params\">success, fail</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.success = success;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.fail = fail;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>2.2.1.1 如果 onFulfilled不是函数，必须忽略</p>\n</li>\n<li><p>2.2.1.2 如果 onRejected不是函数，必须忽略</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;</span><br><span class=\"line\">  success = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  fail = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">resolve</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;      </span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"built_in\">this</span>.success === <span class=\"string\">&quot;function&quot;</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.success();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">reject</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"built_in\">this</span>.fail === <span class=\"string\">&quot;function&quot;</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.fail();</span><br><span class=\"line\">      &#125;      </span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">fn</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;Promise 只接收函数作为参数&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fn(<span class=\"built_in\">this</span>.resolve.bind(<span class=\"built_in\">this</span>), <span class=\"built_in\">this</span>.reject.bind(<span class=\"built_in\">this</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">then</span>(<span class=\"params\">success?, fail?</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> success === <span class=\"string\">&quot;function&quot;</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.success = success;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> fail === <span class=\"string\">&quot;function&quot;</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.fail = fail;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>2.2.2 onFulfilled 是函数</p>\n</li>\n<li><p>2.2.3 onRejected 是函数</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;</span><br><span class=\"line\">  success = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  fail = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  state = <span class=\"string\">&quot;pending&quot;</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">resolve</span>(<span class=\"params\">result</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.state !== <span class=\"string\">&quot;pending&quot;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.state = <span class=\"string\">&quot;fulfilled&quot;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"built_in\">this</span>.success === <span class=\"string\">&quot;function&quot;</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.success(result);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">reject</span>(<span class=\"params\">reason</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.state !== <span class=\"string\">&quot;pending&quot;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.state = <span class=\"string\">&quot;rejected&quot;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"built_in\">this</span>.fail === <span class=\"string\">&quot;function&quot;</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.fail(reason);</span><br><span class=\"line\">      &#125;      </span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">fn</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;Promise 只接收函数作为参数&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fn(<span class=\"built_in\">this</span>.resolve.bind(<span class=\"built_in\">this</span>), <span class=\"built_in\">this</span>.reject.bind(<span class=\"built_in\">this</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">then</span>(<span class=\"params\">success?, fail?</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> success === <span class=\"string\">&quot;function&quot;</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.success = success;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> fail === <span class=\"string\">&quot;function&quot;</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.fail = fail;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>2.2.5.1 onFulfilled和onRejected必须被当做函数调用 with no this value</p>\n</li>\n<li><p>2.2.5.2 onFulfilled和onRejected必须被当做函数调用 with no this value, 失败回调</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;</span><br><span class=\"line\">  success = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  fail = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  state = <span class=\"string\">&quot;pending&quot;</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">resolve</span>(<span class=\"params\">result</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.state !== <span class=\"string\">&quot;pending&quot;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.state = <span class=\"string\">&quot;fulfilled&quot;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"built_in\">this</span>.success === <span class=\"string\">&quot;function&quot;</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.success.call(<span class=\"literal\">undefined</span>, result);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">reject</span>(<span class=\"params\">reason</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.state !== <span class=\"string\">&quot;pending&quot;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.state = <span class=\"string\">&quot;rejected&quot;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"built_in\">this</span>.fail === <span class=\"string\">&quot;function&quot;</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.fail.call(<span class=\"literal\">undefined</span>, reason);</span><br><span class=\"line\">      &#125;      </span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">fn</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;Promise 只接收函数作为参数&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fn(<span class=\"built_in\">this</span>.resolve.bind(<span class=\"built_in\">this</span>), <span class=\"built_in\">this</span>.reject.bind(<span class=\"built_in\">this</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">then</span>(<span class=\"params\">success?, fail?</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> success === <span class=\"string\">&quot;function&quot;</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.success = success;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> fail === <span class=\"string\">&quot;function&quot;</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.fail = fail;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>2.2.6.1 then可以在同一个promise里被多次调用</p>\n</li>\n<li><p>2.2.6.2 then可以在同一个promise里被多次调用, 失败回调</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;</span><br><span class=\"line\">  callbacks = [];</span><br><span class=\"line\">  state = <span class=\"string\">&quot;pending&quot;</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">resolve</span>(<span class=\"params\">result</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.state !== <span class=\"string\">&quot;pending&quot;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.state = <span class=\"string\">&quot;fulfilled&quot;</span>;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.callbacks.forEach(<span class=\"function\"><span class=\"params\">handle</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> handle[<span class=\"number\">0</span>] === <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">          handle[<span class=\"number\">0</span>].call(<span class=\"literal\">undefined</span>, result);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">reject</span>(<span class=\"params\">reason</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.state !== <span class=\"string\">&quot;pending&quot;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.state = <span class=\"string\">&quot;rejected&quot;</span>;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.callbacks.forEach(<span class=\"function\"><span class=\"params\">handle</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> handle[<span class=\"number\">1</span>] === <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">          handle[<span class=\"number\">1</span>].call(<span class=\"literal\">undefined</span>, reason);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">fn</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;Promise 只接收函数作为参数&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fn(<span class=\"built_in\">this</span>.resolve.bind(<span class=\"built_in\">this</span>), <span class=\"built_in\">this</span>.reject.bind(<span class=\"built_in\">this</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">then</span>(<span class=\"params\">success?, fail?</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> handle = [];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> success === <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">      handle[<span class=\"number\">0</span>] = success;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fail === <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">      handle[<span class=\"number\">1</span>] = fail;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.callbacks.push(handle);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>"},{"title":"手写系列之四：bind","date":"2021-07-20T12:31:59.000Z","_content":"\n# bind\n\n根据[MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind) bind的定义：`bind()` 方法创建一个新的函数，在 `bind()` 被调用时，这个新函数的 `this` 被指定为 `bind()` 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。用代码说明一下上述的定义：\n\n````javascript\nconst person1 = {\n  name: \"AA\",\n  getName: function() {\n    return this.name;\n  }\n};\n\nconst person2 = {\n  name: \"BB\",\n  getName: function() {\n    return this.name;\n  }\n};\n\n//使用bind时，会创建新函数且返回它，第一个参数作为新函数的this\nconst p1 = person1.getName.bind(person2);\n\nperson1.getName(); //\"AA\"\np1(); //\"BB\"\n````\n\n接下来就开始着手用代码模拟bind。\n\n# 测试代码\n\n和上一篇文章一样，首先给上测试代码，依据测试代码完成[模拟bind](https://github.com/wuwenxing0912/hand-writing/tree/master/bind)。\n\n<!-- more -->\n\n````typescript\nimport * as chai from \"chai\";\nimport bind from \"../src/index\";\n\nconst assert = chai.assert;\n\ndescribe(\"bind\", () => {\n  it(\"1.bind 是函数\", () => {\n    //@ts-ignore\n    Function.prototype.bind2 = bind;\n    //@ts-ignore\n    assert.isFunction(Function.prototype.bind2);\n  });\n\n  it(\"2.能够绑定 this\", () => {\n    //@ts-ignore\n    Function.prototype.bind2 = bind;\n    const f1 = function () {\n      return this;\n    };\n    //@ts-ignore\n    const f2 = f1.bind2({ name: \"bind\" });\n    assert.equal(f2().name, \"bind\");\n});\n\n  it(\"3.绑定 this, 接收参数 p1, p2\", () => {\n    //@ts-ignore\n    Function.prototype.bind2 = bind;\n    const f1 = function (p1, p2) {\n      return [this, p1, p2];\n    };\n    //@ts-ignore\n    const f2 = f1.bind2({ name: \"bind\" }, \"x\", \"y\");\n    assert.equal(f2()[0].name, \"bind\");\n    assert.equal(f2()[1], \"x\");\n    assert.equal(f2()[2], \"y\");\n  });\n\n  it(\"4.绑定 this, 首先接收参数 p1, 后接收参数p2\", () => {\n    //@ts-ignore\n    Function.prototype.bind2 = bind;\n    const f1 = function (p1, p2) {\n      return [this, p1, p2];\n    };\n    //@ts-ignore\n    const f2 = f1.bind2({ name: \"bind\" }, \"x\");\n    assert.equal(f2(\"y\")[0].name, \"bind\");\n    assert.equal(f2(\"y\")[1], \"x\");\n    assert.equal(f2(\"y\")[2], \"y\");\n  });\n\n  it(\"5.能够使用 new\", () => {\n    //@ts-ignore\n    Function.prototype.bind2 = bind;\n    const f1 = function (p1, p2) {\n      this.p1 = p1;\n      this.p2 = p2;\n    };\n    //@ts-ignore\n    const f2 = f1.bind2(undefined, \"x\", \"y\");\n    const obj = new f2();\n    assert.equal(obj.p1, \"x\");\n    assert.equal(obj.p2, \"y\");\n  });\n\n  it(\"6.new 的时候绑定了 p1, p2，并且在 f1 的 prototype 上添加方法\", () => {\n    //@ts-ignore\n    Function.prototype.bind2 = bind;\n    const f1 = function (p1, p2) {\n      this.p1 = p1;\n      this.p2 = p2;\n    };\n    f1.prototype.method = function () {};\n    //@ts-ignore\n    const f2 = f1.bind2(undefined, \"x\", \"y\");\n    const obj = new f2();\n    assert.equal(obj.p1, \"x\");\n    assert.equal(obj.p2, \"y\");\n    assert.isTrue(f1.prototype.isPrototypeOf(obj));\n    assert.isFunction(obj.method);\n  });\n});\n````\n\n# 实现过程\n\n- 1.bind 是函数\n\n  ````typescript\n  function bind() {}\n  ````\n\n- 2.能够绑定 this\n\n  ````typescript\n  function bind(asThis, ...args) {\n    const fn = this;\n    if (typeof fn !== \"function\") {\n      throw new Error(\"请使用函数调用bind\");\n    }\n    return function (...args2) {\n      return fn.call(asThis, ...args, ...args2);\n    };\n  }\n  ````\n\n- 3.绑定 this, 接收参数 p1, p2\n\n  ````typescript\n  function bind(asThis, ...args) {\n    const fn = this;\n    if (typeof fn !== \"function\") {\n      throw new Error(\"请使用函数调用bind\");\n    }\n    return function (...args2) {\n      return fn.call(asThis, ...args, ...args2);\n    };\n  }\n  ````\n\n- 4.绑定 this, 首先接收参数 p1, 后接收参数p2\n\n  ````typescript\n  function bind(asThis, ...args) {\n    const fn = this;\n    if (typeof fn !== \"function\") {\n      throw new Error(\"请使用函数调用bind\");\n    }\n    return function (...args2) {\n      return fn.call(asThis, ...args, ...args2);\n    };\n  }\n  ````\n\n- 5.能够使用 new\n\n  ````typescript\n  function bind(asThis, ...args) {\n    const fn = this;\n    if (typeof fn !== \"function\") {\n      throw new Error(\"请使用函数调用bind\");\n    }\n    return function result(...args2) {\n      return fn.call(this instanceof result ? this : asThis, ...args, ...args2);\n    };\n  }\n  ````\n\n- 6.new 的时候绑定了 p1, p2，并且在 f1 的 prototype 上添加 sayHi\n\n  ````typescript\n  function bind(asThis, ...args) {\n    const fn = this;\n    if (typeof fn !== \"function\") {\n      throw new Error(\"请使用函数调用bind\");\n    }\n    function result(...args2) {\n      return fn.call(this instanceof result ? this : asThis, ...args, ...args2);\n    }\n    result.prototype = Object.create(fn.prototype);\n    return result;\n  }\n  ````\n\n  \n","source":"_posts/手写系列之四：bind.md","raw":"---\ntitle: 手写系列之四：bind\ndate: 2021-07-20 20:31:59\ntags: [\"bind\", \"手写系列\"]\ncategories: JavaScript\n---\n\n# bind\n\n根据[MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind) bind的定义：`bind()` 方法创建一个新的函数，在 `bind()` 被调用时，这个新函数的 `this` 被指定为 `bind()` 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。用代码说明一下上述的定义：\n\n````javascript\nconst person1 = {\n  name: \"AA\",\n  getName: function() {\n    return this.name;\n  }\n};\n\nconst person2 = {\n  name: \"BB\",\n  getName: function() {\n    return this.name;\n  }\n};\n\n//使用bind时，会创建新函数且返回它，第一个参数作为新函数的this\nconst p1 = person1.getName.bind(person2);\n\nperson1.getName(); //\"AA\"\np1(); //\"BB\"\n````\n\n接下来就开始着手用代码模拟bind。\n\n# 测试代码\n\n和上一篇文章一样，首先给上测试代码，依据测试代码完成[模拟bind](https://github.com/wuwenxing0912/hand-writing/tree/master/bind)。\n\n<!-- more -->\n\n````typescript\nimport * as chai from \"chai\";\nimport bind from \"../src/index\";\n\nconst assert = chai.assert;\n\ndescribe(\"bind\", () => {\n  it(\"1.bind 是函数\", () => {\n    //@ts-ignore\n    Function.prototype.bind2 = bind;\n    //@ts-ignore\n    assert.isFunction(Function.prototype.bind2);\n  });\n\n  it(\"2.能够绑定 this\", () => {\n    //@ts-ignore\n    Function.prototype.bind2 = bind;\n    const f1 = function () {\n      return this;\n    };\n    //@ts-ignore\n    const f2 = f1.bind2({ name: \"bind\" });\n    assert.equal(f2().name, \"bind\");\n});\n\n  it(\"3.绑定 this, 接收参数 p1, p2\", () => {\n    //@ts-ignore\n    Function.prototype.bind2 = bind;\n    const f1 = function (p1, p2) {\n      return [this, p1, p2];\n    };\n    //@ts-ignore\n    const f2 = f1.bind2({ name: \"bind\" }, \"x\", \"y\");\n    assert.equal(f2()[0].name, \"bind\");\n    assert.equal(f2()[1], \"x\");\n    assert.equal(f2()[2], \"y\");\n  });\n\n  it(\"4.绑定 this, 首先接收参数 p1, 后接收参数p2\", () => {\n    //@ts-ignore\n    Function.prototype.bind2 = bind;\n    const f1 = function (p1, p2) {\n      return [this, p1, p2];\n    };\n    //@ts-ignore\n    const f2 = f1.bind2({ name: \"bind\" }, \"x\");\n    assert.equal(f2(\"y\")[0].name, \"bind\");\n    assert.equal(f2(\"y\")[1], \"x\");\n    assert.equal(f2(\"y\")[2], \"y\");\n  });\n\n  it(\"5.能够使用 new\", () => {\n    //@ts-ignore\n    Function.prototype.bind2 = bind;\n    const f1 = function (p1, p2) {\n      this.p1 = p1;\n      this.p2 = p2;\n    };\n    //@ts-ignore\n    const f2 = f1.bind2(undefined, \"x\", \"y\");\n    const obj = new f2();\n    assert.equal(obj.p1, \"x\");\n    assert.equal(obj.p2, \"y\");\n  });\n\n  it(\"6.new 的时候绑定了 p1, p2，并且在 f1 的 prototype 上添加方法\", () => {\n    //@ts-ignore\n    Function.prototype.bind2 = bind;\n    const f1 = function (p1, p2) {\n      this.p1 = p1;\n      this.p2 = p2;\n    };\n    f1.prototype.method = function () {};\n    //@ts-ignore\n    const f2 = f1.bind2(undefined, \"x\", \"y\");\n    const obj = new f2();\n    assert.equal(obj.p1, \"x\");\n    assert.equal(obj.p2, \"y\");\n    assert.isTrue(f1.prototype.isPrototypeOf(obj));\n    assert.isFunction(obj.method);\n  });\n});\n````\n\n# 实现过程\n\n- 1.bind 是函数\n\n  ````typescript\n  function bind() {}\n  ````\n\n- 2.能够绑定 this\n\n  ````typescript\n  function bind(asThis, ...args) {\n    const fn = this;\n    if (typeof fn !== \"function\") {\n      throw new Error(\"请使用函数调用bind\");\n    }\n    return function (...args2) {\n      return fn.call(asThis, ...args, ...args2);\n    };\n  }\n  ````\n\n- 3.绑定 this, 接收参数 p1, p2\n\n  ````typescript\n  function bind(asThis, ...args) {\n    const fn = this;\n    if (typeof fn !== \"function\") {\n      throw new Error(\"请使用函数调用bind\");\n    }\n    return function (...args2) {\n      return fn.call(asThis, ...args, ...args2);\n    };\n  }\n  ````\n\n- 4.绑定 this, 首先接收参数 p1, 后接收参数p2\n\n  ````typescript\n  function bind(asThis, ...args) {\n    const fn = this;\n    if (typeof fn !== \"function\") {\n      throw new Error(\"请使用函数调用bind\");\n    }\n    return function (...args2) {\n      return fn.call(asThis, ...args, ...args2);\n    };\n  }\n  ````\n\n- 5.能够使用 new\n\n  ````typescript\n  function bind(asThis, ...args) {\n    const fn = this;\n    if (typeof fn !== \"function\") {\n      throw new Error(\"请使用函数调用bind\");\n    }\n    return function result(...args2) {\n      return fn.call(this instanceof result ? this : asThis, ...args, ...args2);\n    };\n  }\n  ````\n\n- 6.new 的时候绑定了 p1, p2，并且在 f1 的 prototype 上添加 sayHi\n\n  ````typescript\n  function bind(asThis, ...args) {\n    const fn = this;\n    if (typeof fn !== \"function\") {\n      throw new Error(\"请使用函数调用bind\");\n    }\n    function result(...args2) {\n      return fn.call(this instanceof result ? this : asThis, ...args, ...args2);\n    }\n    result.prototype = Object.create(fn.prototype);\n    return result;\n  }\n  ````\n\n  \n","slug":"手写系列之四：bind","published":1,"updated":"2021-07-20T15:38:47.232Z","_id":"ckrc1duer00009ku097od0y6s","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h1><p>根据<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\">MDN</a> bind的定义：<code>bind()</code> 方法创建一个新的函数，在 <code>bind()</code> 被调用时，这个新函数的 <code>this</code> 被指定为 <code>bind()</code> 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。用代码说明一下上述的定义：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person1 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;AA&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">getName</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> person2 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;BB&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">getName</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用bind时，会创建新函数且返回它，第一个参数作为新函数的this</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> p1 = person1.getName.bind(person2);</span><br><span class=\"line\"></span><br><span class=\"line\">person1.getName(); <span class=\"comment\">//&quot;AA&quot;</span></span><br><span class=\"line\">p1(); <span class=\"comment\">//&quot;BB&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>接下来就开始着手用代码模拟bind。</p>\n<h1 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h1><p>和上一篇文章一样，首先给上测试代码，依据测试代码完成<a href=\"https://github.com/wuwenxing0912/hand-writing/tree/master/bind\">模拟bind</a>。</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> chai <span class=\"keyword\">from</span> <span class=\"string\">&quot;chai&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> bind <span class=\"keyword\">from</span> <span class=\"string\">&quot;../src/index&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> assert = chai.assert;</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">&quot;bind&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  it(<span class=\"string\">&quot;1.bind 是函数&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//@ts-ignore</span></span><br><span class=\"line\">    <span class=\"built_in\">Function</span>.prototype.bind2 = bind;</span><br><span class=\"line\">    <span class=\"comment\">//@ts-ignore</span></span><br><span class=\"line\">    assert.isFunction(<span class=\"built_in\">Function</span>.prototype.bind2);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">&quot;2.能够绑定 this&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//@ts-ignore</span></span><br><span class=\"line\">    <span class=\"built_in\">Function</span>.prototype.bind2 = bind;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> f1 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">//@ts-ignore</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> f2 = f1.bind2(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;bind&quot;</span> &#125;);</span><br><span class=\"line\">    assert.equal(f2().name, <span class=\"string\">&quot;bind&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">&quot;3.绑定 this, 接收参数 p1, p2&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//@ts-ignore</span></span><br><span class=\"line\">    <span class=\"built_in\">Function</span>.prototype.bind2 = bind;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> f1 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">p1, p2</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> [<span class=\"built_in\">this</span>, p1, p2];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">//@ts-ignore</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> f2 = f1.bind2(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;bind&quot;</span> &#125;, <span class=\"string\">&quot;x&quot;</span>, <span class=\"string\">&quot;y&quot;</span>);</span><br><span class=\"line\">    assert.equal(f2()[<span class=\"number\">0</span>].name, <span class=\"string\">&quot;bind&quot;</span>);</span><br><span class=\"line\">    assert.equal(f2()[<span class=\"number\">1</span>], <span class=\"string\">&quot;x&quot;</span>);</span><br><span class=\"line\">    assert.equal(f2()[<span class=\"number\">2</span>], <span class=\"string\">&quot;y&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">&quot;4.绑定 this, 首先接收参数 p1, 后接收参数p2&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//@ts-ignore</span></span><br><span class=\"line\">    <span class=\"built_in\">Function</span>.prototype.bind2 = bind;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> f1 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">p1, p2</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> [<span class=\"built_in\">this</span>, p1, p2];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">//@ts-ignore</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> f2 = f1.bind2(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;bind&quot;</span> &#125;, <span class=\"string\">&quot;x&quot;</span>);</span><br><span class=\"line\">    assert.equal(f2(<span class=\"string\">&quot;y&quot;</span>)[<span class=\"number\">0</span>].name, <span class=\"string\">&quot;bind&quot;</span>);</span><br><span class=\"line\">    assert.equal(f2(<span class=\"string\">&quot;y&quot;</span>)[<span class=\"number\">1</span>], <span class=\"string\">&quot;x&quot;</span>);</span><br><span class=\"line\">    assert.equal(f2(<span class=\"string\">&quot;y&quot;</span>)[<span class=\"number\">2</span>], <span class=\"string\">&quot;y&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">&quot;5.能够使用 new&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//@ts-ignore</span></span><br><span class=\"line\">    <span class=\"built_in\">Function</span>.prototype.bind2 = bind;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> f1 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">p1, p2</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.p1 = p1;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.p2 = p2;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">//@ts-ignore</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> f2 = f1.bind2(<span class=\"literal\">undefined</span>, <span class=\"string\">&quot;x&quot;</span>, <span class=\"string\">&quot;y&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> obj = <span class=\"keyword\">new</span> f2();</span><br><span class=\"line\">    assert.equal(obj.p1, <span class=\"string\">&quot;x&quot;</span>);</span><br><span class=\"line\">    assert.equal(obj.p2, <span class=\"string\">&quot;y&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">&quot;6.new 的时候绑定了 p1, p2，并且在 f1 的 prototype 上添加方法&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//@ts-ignore</span></span><br><span class=\"line\">    <span class=\"built_in\">Function</span>.prototype.bind2 = bind;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> f1 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">p1, p2</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.p1 = p1;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.p2 = p2;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    f1.prototype.method = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//@ts-ignore</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> f2 = f1.bind2(<span class=\"literal\">undefined</span>, <span class=\"string\">&quot;x&quot;</span>, <span class=\"string\">&quot;y&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> obj = <span class=\"keyword\">new</span> f2();</span><br><span class=\"line\">    assert.equal(obj.p1, <span class=\"string\">&quot;x&quot;</span>);</span><br><span class=\"line\">    assert.equal(obj.p2, <span class=\"string\">&quot;y&quot;</span>);</span><br><span class=\"line\">    assert.isTrue(f1.prototype.isPrototypeOf(obj));</span><br><span class=\"line\">    assert.isFunction(obj.method);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"实现过程\"><a href=\"#实现过程\" class=\"headerlink\" title=\"实现过程\"></a>实现过程</h1><ul>\n<li><p>1.bind 是函数</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bind</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>2.能够绑定 this</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bind</span>(<span class=\"params\">asThis, ...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fn = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;请使用函数调用bind&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fn.call(asThis, ...args, ...args2);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>3.绑定 this, 接收参数 p1, p2</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bind</span>(<span class=\"params\">asThis, ...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fn = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;请使用函数调用bind&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fn.call(asThis, ...args, ...args2);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>4.绑定 this, 首先接收参数 p1, 后接收参数p2</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bind</span>(<span class=\"params\">asThis, ...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fn = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;请使用函数调用bind&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fn.call(asThis, ...args, ...args2);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>5.能够使用 new</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bind</span>(<span class=\"params\">asThis, ...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fn = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;请使用函数调用bind&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">result</span>(<span class=\"params\">...args2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fn.call(<span class=\"built_in\">this</span> <span class=\"keyword\">instanceof</span> result ? <span class=\"built_in\">this</span> : asThis, ...args, ...args2);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>6.new 的时候绑定了 p1, p2，并且在 f1 的 prototype 上添加 sayHi</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bind</span>(<span class=\"params\">asThis, ...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fn = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;请使用函数调用bind&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">result</span>(<span class=\"params\">...args2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fn.call(<span class=\"built_in\">this</span> <span class=\"keyword\">instanceof</span> result ? <span class=\"built_in\">this</span> : asThis, ...args, ...args2);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  result.prototype = <span class=\"built_in\">Object</span>.create(fn.prototype);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h1><p>根据<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\">MDN</a> bind的定义：<code>bind()</code> 方法创建一个新的函数，在 <code>bind()</code> 被调用时，这个新函数的 <code>this</code> 被指定为 <code>bind()</code> 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。用代码说明一下上述的定义：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person1 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;AA&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">getName</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> person2 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;BB&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">getName</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用bind时，会创建新函数且返回它，第一个参数作为新函数的this</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> p1 = person1.getName.bind(person2);</span><br><span class=\"line\"></span><br><span class=\"line\">person1.getName(); <span class=\"comment\">//&quot;AA&quot;</span></span><br><span class=\"line\">p1(); <span class=\"comment\">//&quot;BB&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>接下来就开始着手用代码模拟bind。</p>\n<h1 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h1><p>和上一篇文章一样，首先给上测试代码，依据测试代码完成<a href=\"https://github.com/wuwenxing0912/hand-writing/tree/master/bind\">模拟bind</a>。</p>","more":"<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> chai <span class=\"keyword\">from</span> <span class=\"string\">&quot;chai&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> bind <span class=\"keyword\">from</span> <span class=\"string\">&quot;../src/index&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> assert = chai.assert;</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">&quot;bind&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  it(<span class=\"string\">&quot;1.bind 是函数&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//@ts-ignore</span></span><br><span class=\"line\">    <span class=\"built_in\">Function</span>.prototype.bind2 = bind;</span><br><span class=\"line\">    <span class=\"comment\">//@ts-ignore</span></span><br><span class=\"line\">    assert.isFunction(<span class=\"built_in\">Function</span>.prototype.bind2);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">&quot;2.能够绑定 this&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//@ts-ignore</span></span><br><span class=\"line\">    <span class=\"built_in\">Function</span>.prototype.bind2 = bind;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> f1 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">//@ts-ignore</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> f2 = f1.bind2(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;bind&quot;</span> &#125;);</span><br><span class=\"line\">    assert.equal(f2().name, <span class=\"string\">&quot;bind&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">&quot;3.绑定 this, 接收参数 p1, p2&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//@ts-ignore</span></span><br><span class=\"line\">    <span class=\"built_in\">Function</span>.prototype.bind2 = bind;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> f1 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">p1, p2</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> [<span class=\"built_in\">this</span>, p1, p2];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">//@ts-ignore</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> f2 = f1.bind2(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;bind&quot;</span> &#125;, <span class=\"string\">&quot;x&quot;</span>, <span class=\"string\">&quot;y&quot;</span>);</span><br><span class=\"line\">    assert.equal(f2()[<span class=\"number\">0</span>].name, <span class=\"string\">&quot;bind&quot;</span>);</span><br><span class=\"line\">    assert.equal(f2()[<span class=\"number\">1</span>], <span class=\"string\">&quot;x&quot;</span>);</span><br><span class=\"line\">    assert.equal(f2()[<span class=\"number\">2</span>], <span class=\"string\">&quot;y&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">&quot;4.绑定 this, 首先接收参数 p1, 后接收参数p2&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//@ts-ignore</span></span><br><span class=\"line\">    <span class=\"built_in\">Function</span>.prototype.bind2 = bind;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> f1 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">p1, p2</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> [<span class=\"built_in\">this</span>, p1, p2];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">//@ts-ignore</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> f2 = f1.bind2(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;bind&quot;</span> &#125;, <span class=\"string\">&quot;x&quot;</span>);</span><br><span class=\"line\">    assert.equal(f2(<span class=\"string\">&quot;y&quot;</span>)[<span class=\"number\">0</span>].name, <span class=\"string\">&quot;bind&quot;</span>);</span><br><span class=\"line\">    assert.equal(f2(<span class=\"string\">&quot;y&quot;</span>)[<span class=\"number\">1</span>], <span class=\"string\">&quot;x&quot;</span>);</span><br><span class=\"line\">    assert.equal(f2(<span class=\"string\">&quot;y&quot;</span>)[<span class=\"number\">2</span>], <span class=\"string\">&quot;y&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">&quot;5.能够使用 new&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//@ts-ignore</span></span><br><span class=\"line\">    <span class=\"built_in\">Function</span>.prototype.bind2 = bind;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> f1 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">p1, p2</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.p1 = p1;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.p2 = p2;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">//@ts-ignore</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> f2 = f1.bind2(<span class=\"literal\">undefined</span>, <span class=\"string\">&quot;x&quot;</span>, <span class=\"string\">&quot;y&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> obj = <span class=\"keyword\">new</span> f2();</span><br><span class=\"line\">    assert.equal(obj.p1, <span class=\"string\">&quot;x&quot;</span>);</span><br><span class=\"line\">    assert.equal(obj.p2, <span class=\"string\">&quot;y&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">&quot;6.new 的时候绑定了 p1, p2，并且在 f1 的 prototype 上添加方法&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//@ts-ignore</span></span><br><span class=\"line\">    <span class=\"built_in\">Function</span>.prototype.bind2 = bind;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> f1 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">p1, p2</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.p1 = p1;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.p2 = p2;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    f1.prototype.method = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//@ts-ignore</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> f2 = f1.bind2(<span class=\"literal\">undefined</span>, <span class=\"string\">&quot;x&quot;</span>, <span class=\"string\">&quot;y&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> obj = <span class=\"keyword\">new</span> f2();</span><br><span class=\"line\">    assert.equal(obj.p1, <span class=\"string\">&quot;x&quot;</span>);</span><br><span class=\"line\">    assert.equal(obj.p2, <span class=\"string\">&quot;y&quot;</span>);</span><br><span class=\"line\">    assert.isTrue(f1.prototype.isPrototypeOf(obj));</span><br><span class=\"line\">    assert.isFunction(obj.method);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"实现过程\"><a href=\"#实现过程\" class=\"headerlink\" title=\"实现过程\"></a>实现过程</h1><ul>\n<li><p>1.bind 是函数</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bind</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>2.能够绑定 this</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bind</span>(<span class=\"params\">asThis, ...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fn = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;请使用函数调用bind&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fn.call(asThis, ...args, ...args2);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>3.绑定 this, 接收参数 p1, p2</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bind</span>(<span class=\"params\">asThis, ...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fn = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;请使用函数调用bind&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fn.call(asThis, ...args, ...args2);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>4.绑定 this, 首先接收参数 p1, 后接收参数p2</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bind</span>(<span class=\"params\">asThis, ...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fn = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;请使用函数调用bind&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fn.call(asThis, ...args, ...args2);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>5.能够使用 new</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bind</span>(<span class=\"params\">asThis, ...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fn = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;请使用函数调用bind&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">result</span>(<span class=\"params\">...args2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fn.call(<span class=\"built_in\">this</span> <span class=\"keyword\">instanceof</span> result ? <span class=\"built_in\">this</span> : asThis, ...args, ...args2);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>6.new 的时候绑定了 p1, p2，并且在 f1 的 prototype 上添加 sayHi</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bind</span>(<span class=\"params\">asThis, ...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fn = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;请使用函数调用bind&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">result</span>(<span class=\"params\">...args2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fn.call(<span class=\"built_in\">this</span> <span class=\"keyword\">instanceof</span> result ? <span class=\"built_in\">this</span> : asThis, ...args, ...args2);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  result.prototype = <span class=\"built_in\">Object</span>.create(fn.prototype);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>"},{"title":"React生命周期","date":"2021-07-26T05:35:29.000Z","_content":"\n# 生命周期图解\n\nReact v16.3 之前的生命周期\n\n| 初始化阶段         | 运行中阶段                | 销毁阶段             |\n| ------------------ | ------------------------- | -------------------- |\n| constructor        | componentWillUpdate       | componentWillUnmount |\n| componentWillMount | render                    |                      |\n| render             | componentDidUpdate        |                      |\n| componentDidMount  | shouldComponentUpdate     |                      |\n|                    | componentWillReceiveProps |                      |\n\n{% asset_img old_lifecycle.jpg  旧生命周期图%}\n\n现在的生命周期\n\n| 初始化阶段               | 运行中阶段               | 销毁阶段             |\n| ------------------------ | ------------------------ | -------------------- |\n| constructor              | getDerivedStateFromProps | componentWillUnmount |\n| getDerivedStateFromProps | render                   |                      |\n| render                   | componentDidUpdate       |                      |\n| componentDidMount        | shouldComponentUpdate    |                      |\n|                          | getSnapshotBeforeUpdate  |                      |\n\n{% asset_img new_lifecycle.jpg  新生命周期图%}\n\nReact v16.3之前的`componentWillMount`更名为`UNSAFE_componentWillMount`、`componentWillUpdate`更名为`UNSAFE_componentWillUpdate`、`componentWillReceiveProps`更名为`UNSAFE_componentWillReceiveProps`。且这些生命周期方法标记为“过时的\"，这些方法仍然有效。\n\n\n\n# 生命周期函数\n\n下面代码是包含生命周期函数的[示例](https://codesandbox.io/s/practical-bush-gt5k6?file=/src/App.js)：\n\n<!-- more -->\n\n````javascript\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    console.log(\"创建 App\");\n    this.state = { count: 1 };\n    /* {this.setState({ count: 2 })} */\n  }\n\n  UNSAFE_componentWillMount() {\n    /* {this.setState({ count: 2 })} */\n    console.log(\"将要 mount App\");\n  }\n\n  componentDidMount() {\n    console.log(\"已经 mount App\");\n    // this.setState({ count: 2 });\n  }\n\n  UNSAFE_componentWillUpdate() {\n    // this.setState({ count: 2 });\n    console.log(\"将要 update App\");\n  }\n\n  componentDidUpdate() {\n    console.log(\"已经 update App\");\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log(\"shouldComponentUpdate\");\n    if (nextState.count < 3) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  componentWillUnmount() {\n    console.log(\"将要 unmount App\");\n  }\n\n  // static getDerivedStateFromProps() {\n  //   /**如果使用此方法，\n  //    * 那么这两个方法 UNSAFE_componentWillMount、UNSAFE_componentWillUpdate 不能同时使用\n  //    */\n  //   console.log(\"getDerivedStateFromProps\");\n  //   return null;\n  // }\n\n  onClick() {\n    console.log(\"click\");\n    this.setState({ count: this.state.count + 1 });\n  }\n\n  unmount() {\n    ReactDOM.unmountComponentAtNode(document.getElementById(\"root\"));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.count}\n        {/* {this.setState({ count: 2 })} */}\n        <br />\n        <button onClick={() => this.onClick()}>点击加1</button>\n        <button onClick={() => this.unmount()}>销毁组件</button>\n        {console.log(\"render App\")}\n      </div>\n    );\n  }\n}\n````\n\n\n\n## constructor\n\n如果不初始化 state 或不进行方法绑定，则不需要为 React 组件实现构造函数。在 React 组件挂载之前，会调用它的构造函数。在为 React.Component 子类实现构造函数时，应在其他语句之前前调用 `super(props)`。通常，在 React 中，构造函数仅用于以下两种情况：\n\n  1.通过给 `this.state` 赋值对象来初始化[内部 state](https://react.docschina.org/docs/state-and-lifecycle.html)。\n\n  2.为[事件处理函数](https://react.docschina.org/docs/handling-events.html)绑定实例。\n\n## componentDidMount\n\n`componentDidMount()` 会在组件挂载后立即调用，可以在 `componentDidMount()` 里直接调用 `setState()`。Ajax请求可以放在该生命周期内。\n\n## componentDidUpdate\n\n`componentDidUpdate()` 会在更新后会被立即调用。首次渲染不会执行此方法。\n\n## componentWillUnmount\n\n`componentWillUnmount()` 会在组件卸载及销毁之前直接调用。可以在此生命周期中清除定时器、取消网络请求等。\n\n## shouldComponentUpdate\n\n当 props 或 state 发生变化时，`shouldComponentUpdate()` 会在渲染执行之前被调用。返回值默认为 true。首次渲染或使用 `forceUpdate()` 时不会调用该方法。如果 `shouldComponentUpdate()` 返回 `false`，则不会调用 `UNSAFE_componentWillUpdate()`，`render()` 和 `componentDidUpdate()`。\n\n\n\n# 不能调用setState()方法的生命周期函数\n\n- `constructor`\n\n  在 `constructor()` 函数中不要调用 `setState()` 方法。如果在 `constructor()` 函数中调用 了`setState()` 方法，那么控制台会出现如下错误提示：`Can't call setState on a component that is not yet mounted.`。所以在组件挂载完成之前都不能调用`setState()` 方法。\n\n- `UNSAFE_componentWillMount/componentWillMount`\n\n- `render`\n\n  如果在`render`内调用`setState()` 方法，`setState()` 方法会触发`render`，而`render`又将触发`setState()` ，进而出现无限循环。\n\n- `UNSAFE_componentWillUpdate\\componentWillUpdate`\n\n  如果在`UNSAFE_componentWillUpdate\\componentWillUpdate`内调用`setState()` 方法，当state更新时将触发`UNSAFE_componentWillUpdate\\componentWillUpdate`，而`UNSAFE_componentWillUpdate\\componentWillUpdate`又将触发`setState()` ，进而出现无限循环。\n\n- `componentDidUpdate`\n\n  如果在`componentDidUpdate`内调用`setState()` 方法，当state更新时将触发`componentDidUpdate`，而`componentDidUpdate`又将触发`setState()` ，进而出现无限循环。\n\n","source":"_posts/React生命周期.md","raw":"---\ntitle: React生命周期\ndate: 2021-07-26 13:35:29\ntags: [\"React生命周期\"]\ncategories: React\n---\n\n# 生命周期图解\n\nReact v16.3 之前的生命周期\n\n| 初始化阶段         | 运行中阶段                | 销毁阶段             |\n| ------------------ | ------------------------- | -------------------- |\n| constructor        | componentWillUpdate       | componentWillUnmount |\n| componentWillMount | render                    |                      |\n| render             | componentDidUpdate        |                      |\n| componentDidMount  | shouldComponentUpdate     |                      |\n|                    | componentWillReceiveProps |                      |\n\n{% asset_img old_lifecycle.jpg  旧生命周期图%}\n\n现在的生命周期\n\n| 初始化阶段               | 运行中阶段               | 销毁阶段             |\n| ------------------------ | ------------------------ | -------------------- |\n| constructor              | getDerivedStateFromProps | componentWillUnmount |\n| getDerivedStateFromProps | render                   |                      |\n| render                   | componentDidUpdate       |                      |\n| componentDidMount        | shouldComponentUpdate    |                      |\n|                          | getSnapshotBeforeUpdate  |                      |\n\n{% asset_img new_lifecycle.jpg  新生命周期图%}\n\nReact v16.3之前的`componentWillMount`更名为`UNSAFE_componentWillMount`、`componentWillUpdate`更名为`UNSAFE_componentWillUpdate`、`componentWillReceiveProps`更名为`UNSAFE_componentWillReceiveProps`。且这些生命周期方法标记为“过时的\"，这些方法仍然有效。\n\n\n\n# 生命周期函数\n\n下面代码是包含生命周期函数的[示例](https://codesandbox.io/s/practical-bush-gt5k6?file=/src/App.js)：\n\n<!-- more -->\n\n````javascript\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    console.log(\"创建 App\");\n    this.state = { count: 1 };\n    /* {this.setState({ count: 2 })} */\n  }\n\n  UNSAFE_componentWillMount() {\n    /* {this.setState({ count: 2 })} */\n    console.log(\"将要 mount App\");\n  }\n\n  componentDidMount() {\n    console.log(\"已经 mount App\");\n    // this.setState({ count: 2 });\n  }\n\n  UNSAFE_componentWillUpdate() {\n    // this.setState({ count: 2 });\n    console.log(\"将要 update App\");\n  }\n\n  componentDidUpdate() {\n    console.log(\"已经 update App\");\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log(\"shouldComponentUpdate\");\n    if (nextState.count < 3) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  componentWillUnmount() {\n    console.log(\"将要 unmount App\");\n  }\n\n  // static getDerivedStateFromProps() {\n  //   /**如果使用此方法，\n  //    * 那么这两个方法 UNSAFE_componentWillMount、UNSAFE_componentWillUpdate 不能同时使用\n  //    */\n  //   console.log(\"getDerivedStateFromProps\");\n  //   return null;\n  // }\n\n  onClick() {\n    console.log(\"click\");\n    this.setState({ count: this.state.count + 1 });\n  }\n\n  unmount() {\n    ReactDOM.unmountComponentAtNode(document.getElementById(\"root\"));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.count}\n        {/* {this.setState({ count: 2 })} */}\n        <br />\n        <button onClick={() => this.onClick()}>点击加1</button>\n        <button onClick={() => this.unmount()}>销毁组件</button>\n        {console.log(\"render App\")}\n      </div>\n    );\n  }\n}\n````\n\n\n\n## constructor\n\n如果不初始化 state 或不进行方法绑定，则不需要为 React 组件实现构造函数。在 React 组件挂载之前，会调用它的构造函数。在为 React.Component 子类实现构造函数时，应在其他语句之前前调用 `super(props)`。通常，在 React 中，构造函数仅用于以下两种情况：\n\n  1.通过给 `this.state` 赋值对象来初始化[内部 state](https://react.docschina.org/docs/state-and-lifecycle.html)。\n\n  2.为[事件处理函数](https://react.docschina.org/docs/handling-events.html)绑定实例。\n\n## componentDidMount\n\n`componentDidMount()` 会在组件挂载后立即调用，可以在 `componentDidMount()` 里直接调用 `setState()`。Ajax请求可以放在该生命周期内。\n\n## componentDidUpdate\n\n`componentDidUpdate()` 会在更新后会被立即调用。首次渲染不会执行此方法。\n\n## componentWillUnmount\n\n`componentWillUnmount()` 会在组件卸载及销毁之前直接调用。可以在此生命周期中清除定时器、取消网络请求等。\n\n## shouldComponentUpdate\n\n当 props 或 state 发生变化时，`shouldComponentUpdate()` 会在渲染执行之前被调用。返回值默认为 true。首次渲染或使用 `forceUpdate()` 时不会调用该方法。如果 `shouldComponentUpdate()` 返回 `false`，则不会调用 `UNSAFE_componentWillUpdate()`，`render()` 和 `componentDidUpdate()`。\n\n\n\n# 不能调用setState()方法的生命周期函数\n\n- `constructor`\n\n  在 `constructor()` 函数中不要调用 `setState()` 方法。如果在 `constructor()` 函数中调用 了`setState()` 方法，那么控制台会出现如下错误提示：`Can't call setState on a component that is not yet mounted.`。所以在组件挂载完成之前都不能调用`setState()` 方法。\n\n- `UNSAFE_componentWillMount/componentWillMount`\n\n- `render`\n\n  如果在`render`内调用`setState()` 方法，`setState()` 方法会触发`render`，而`render`又将触发`setState()` ，进而出现无限循环。\n\n- `UNSAFE_componentWillUpdate\\componentWillUpdate`\n\n  如果在`UNSAFE_componentWillUpdate\\componentWillUpdate`内调用`setState()` 方法，当state更新时将触发`UNSAFE_componentWillUpdate\\componentWillUpdate`，而`UNSAFE_componentWillUpdate\\componentWillUpdate`又将触发`setState()` ，进而出现无限循环。\n\n- `componentDidUpdate`\n\n  如果在`componentDidUpdate`内调用`setState()` 方法，当state更新时将触发`componentDidUpdate`，而`componentDidUpdate`又将触发`setState()` ，进而出现无限循环。\n\n","slug":"React生命周期","published":1,"updated":"2021-07-26T09:32:08.112Z","_id":"ckrk75hk000009gu091msc7e8","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"生命周期图解\"><a href=\"#生命周期图解\" class=\"headerlink\" title=\"生命周期图解\"></a>生命周期图解</h1><p>React v16.3 之前的生命周期</p>\n<table>\n<thead>\n<tr>\n<th>初始化阶段</th>\n<th>运行中阶段</th>\n<th>销毁阶段</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>constructor</td>\n<td>componentWillUpdate</td>\n<td>componentWillUnmount</td>\n</tr>\n<tr>\n<td>componentWillMount</td>\n<td>render</td>\n<td></td>\n</tr>\n<tr>\n<td>render</td>\n<td>componentDidUpdate</td>\n<td></td>\n</tr>\n<tr>\n<td>componentDidMount</td>\n<td>shouldComponentUpdate</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>componentWillReceiveProps</td>\n<td></td>\n</tr>\n</tbody></table>\n<img src=\"/2021/07/26/React%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/old_lifecycle.jpg\" class title=\"旧生命周期图\">\n\n<p>现在的生命周期</p>\n<table>\n<thead>\n<tr>\n<th>初始化阶段</th>\n<th>运行中阶段</th>\n<th>销毁阶段</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>constructor</td>\n<td>getDerivedStateFromProps</td>\n<td>componentWillUnmount</td>\n</tr>\n<tr>\n<td>getDerivedStateFromProps</td>\n<td>render</td>\n<td></td>\n</tr>\n<tr>\n<td>render</td>\n<td>componentDidUpdate</td>\n<td></td>\n</tr>\n<tr>\n<td>componentDidMount</td>\n<td>shouldComponentUpdate</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>getSnapshotBeforeUpdate</td>\n<td></td>\n</tr>\n</tbody></table>\n<img src=\"/2021/07/26/React%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/new_lifecycle.jpg\" class title=\"新生命周期图\">\n\n<p>React v16.3之前的<code>componentWillMount</code>更名为<code>UNSAFE_componentWillMount</code>、<code>componentWillUpdate</code>更名为<code>UNSAFE_componentWillUpdate</code>、<code>componentWillReceiveProps</code>更名为<code>UNSAFE_componentWillReceiveProps</code>。且这些生命周期方法标记为“过时的”，这些方法仍然有效。</p>\n<h1 id=\"生命周期函数\"><a href=\"#生命周期函数\" class=\"headerlink\" title=\"生命周期函数\"></a>生命周期函数</h1><p>下面代码是包含生命周期函数的<a href=\"https://codesandbox.io/s/practical-bush-gt5k6?file=/src/App.js\">示例</a>：</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-dom&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">props</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(props);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;创建 App&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.state = &#123; <span class=\"attr\">count</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">    <span class=\"comment\">/* &#123;this.setState(&#123; count: 2 &#125;)&#125; */</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">UNSAFE_componentWillMount</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* &#123;this.setState(&#123; count: 2 &#125;)&#125; */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;将要 mount App&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">componentDidMount</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;已经 mount App&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// this.setState(&#123; count: 2 &#125;);</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">UNSAFE_componentWillUpdate</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// this.setState(&#123; count: 2 &#125;);</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;将要 update App&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">componentDidUpdate</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;已经 update App&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">shouldComponentUpdate</span>(<span class=\"params\">nextProps, nextState</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;shouldComponentUpdate&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextState.count &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">componentWillUnmount</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;将要 unmount App&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// static getDerivedStateFromProps() &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   /**如果使用此方法，</span></span><br><span class=\"line\">  <span class=\"comment\">//    * 那么这两个方法 UNSAFE_componentWillMount、UNSAFE_componentWillUpdate 不能同时使用</span></span><br><span class=\"line\">  <span class=\"comment\">//    */</span></span><br><span class=\"line\">  <span class=\"comment\">//   console.log(&quot;getDerivedStateFromProps&quot;);</span></span><br><span class=\"line\">  <span class=\"comment\">//   return null;</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">onClick</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;click&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.setState(&#123; <span class=\"attr\">count</span>: <span class=\"built_in\">this</span>.state.count + <span class=\"number\">1</span> &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">unmount</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    ReactDOM.unmountComponentAtNode(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;root&quot;</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        &#123;this.state.count&#125;</span></span><br><span class=\"line\"><span class=\"xml\">        &#123;/* &#123;this.setState(&#123; count: 2 &#125;)&#125; */&#125;</span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> this.onClick()&#125;&gt;点击加1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> this.unmount()&#125;&gt;销毁组件<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        &#123;console.log(&quot;render App&quot;)&#125;</span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"constructor-NaN\"><a href=\"#constructor-NaN\" class=\"headerlink\" title=\"constructor\"></a>constructor</h2><p>如果不初始化 state 或不进行方法绑定，则不需要为 React 组件实现构造函数。在 React 组件挂载之前，会调用它的构造函数。在为 React.Component 子类实现构造函数时，应在其他语句之前前调用 <code>super(props)</code>。通常，在 React 中，构造函数仅用于以下两种情况：</p>\n<p>  1.通过给 <code>this.state</code> 赋值对象来初始化<a href=\"https://react.docschina.org/docs/state-and-lifecycle.html\">内部 state</a>。</p>\n<p>  2.为<a href=\"https://react.docschina.org/docs/handling-events.html\">事件处理函数</a>绑定实例。</p>\n<h2 id=\"componentDidMount\"><a href=\"#componentDidMount\" class=\"headerlink\" title=\"componentDidMount\"></a>componentDidMount</h2><p><code>componentDidMount()</code> 会在组件挂载后立即调用，可以在 <code>componentDidMount()</code> 里直接调用 <code>setState()</code>。Ajax请求可以放在该生命周期内。</p>\n<h2 id=\"componentDidUpdate\"><a href=\"#componentDidUpdate\" class=\"headerlink\" title=\"componentDidUpdate\"></a>componentDidUpdate</h2><p><code>componentDidUpdate()</code> 会在更新后会被立即调用。首次渲染不会执行此方法。</p>\n<h2 id=\"componentWillUnmount\"><a href=\"#componentWillUnmount\" class=\"headerlink\" title=\"componentWillUnmount\"></a>componentWillUnmount</h2><p><code>componentWillUnmount()</code> 会在组件卸载及销毁之前直接调用。可以在此生命周期中清除定时器、取消网络请求等。</p>\n<h2 id=\"shouldComponentUpdate\"><a href=\"#shouldComponentUpdate\" class=\"headerlink\" title=\"shouldComponentUpdate\"></a>shouldComponentUpdate</h2><p>当 props 或 state 发生变化时，<code>shouldComponentUpdate()</code> 会在渲染执行之前被调用。返回值默认为 true。首次渲染或使用 <code>forceUpdate()</code> 时不会调用该方法。如果 <code>shouldComponentUpdate()</code> 返回 <code>false</code>，则不会调用 <code>UNSAFE_componentWillUpdate()</code>，<code>render()</code> 和 <code>componentDidUpdate()</code>。</p>\n<h1 id=\"不能调用setState-方法的生命周期函数\"><a href=\"#不能调用setState-方法的生命周期函数\" class=\"headerlink\" title=\"不能调用setState()方法的生命周期函数\"></a>不能调用setState()方法的生命周期函数</h1><ul>\n<li><p><code>constructor</code></p>\n<p>在 <code>constructor()</code> 函数中不要调用 <code>setState()</code> 方法。如果在 <code>constructor()</code> 函数中调用 了<code>setState()</code> 方法，那么控制台会出现如下错误提示：<code>Can&#39;t call setState on a component that is not yet mounted.</code>。所以在组件挂载完成之前都不能调用<code>setState()</code> 方法。</p>\n</li>\n<li><p><code>UNSAFE_componentWillMount/componentWillMount</code></p>\n</li>\n<li><p><code>render</code></p>\n<p>如果在<code>render</code>内调用<code>setState()</code> 方法，<code>setState()</code> 方法会触发<code>render</code>，而<code>render</code>又将触发<code>setState()</code> ，进而出现无限循环。</p>\n</li>\n<li><p><code>UNSAFE_componentWillUpdate\\componentWillUpdate</code></p>\n<p>如果在<code>UNSAFE_componentWillUpdate\\componentWillUpdate</code>内调用<code>setState()</code> 方法，当state更新时将触发<code>UNSAFE_componentWillUpdate\\componentWillUpdate</code>，而<code>UNSAFE_componentWillUpdate\\componentWillUpdate</code>又将触发<code>setState()</code> ，进而出现无限循环。</p>\n</li>\n<li><p><code>componentDidUpdate</code></p>\n<p>如果在<code>componentDidUpdate</code>内调用<code>setState()</code> 方法，当state更新时将触发<code>componentDidUpdate</code>，而<code>componentDidUpdate</code>又将触发<code>setState()</code> ，进而出现无限循环。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"生命周期图解\"><a href=\"#生命周期图解\" class=\"headerlink\" title=\"生命周期图解\"></a>生命周期图解</h1><p>React v16.3 之前的生命周期</p>\n<table>\n<thead>\n<tr>\n<th>初始化阶段</th>\n<th>运行中阶段</th>\n<th>销毁阶段</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>constructor</td>\n<td>componentWillUpdate</td>\n<td>componentWillUnmount</td>\n</tr>\n<tr>\n<td>componentWillMount</td>\n<td>render</td>\n<td></td>\n</tr>\n<tr>\n<td>render</td>\n<td>componentDidUpdate</td>\n<td></td>\n</tr>\n<tr>\n<td>componentDidMount</td>\n<td>shouldComponentUpdate</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>componentWillReceiveProps</td>\n<td></td>\n</tr>\n</tbody></table>\n<img src=\"/2021/07/26/React%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/old_lifecycle.jpg\" class title=\"旧生命周期图\">\n\n<p>现在的生命周期</p>\n<table>\n<thead>\n<tr>\n<th>初始化阶段</th>\n<th>运行中阶段</th>\n<th>销毁阶段</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>constructor</td>\n<td>getDerivedStateFromProps</td>\n<td>componentWillUnmount</td>\n</tr>\n<tr>\n<td>getDerivedStateFromProps</td>\n<td>render</td>\n<td></td>\n</tr>\n<tr>\n<td>render</td>\n<td>componentDidUpdate</td>\n<td></td>\n</tr>\n<tr>\n<td>componentDidMount</td>\n<td>shouldComponentUpdate</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>getSnapshotBeforeUpdate</td>\n<td></td>\n</tr>\n</tbody></table>\n<img src=\"/2021/07/26/React%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/new_lifecycle.jpg\" class title=\"新生命周期图\">\n\n<p>React v16.3之前的<code>componentWillMount</code>更名为<code>UNSAFE_componentWillMount</code>、<code>componentWillUpdate</code>更名为<code>UNSAFE_componentWillUpdate</code>、<code>componentWillReceiveProps</code>更名为<code>UNSAFE_componentWillReceiveProps</code>。且这些生命周期方法标记为“过时的”，这些方法仍然有效。</p>\n<h1 id=\"生命周期函数\"><a href=\"#生命周期函数\" class=\"headerlink\" title=\"生命周期函数\"></a>生命周期函数</h1><p>下面代码是包含生命周期函数的<a href=\"https://codesandbox.io/s/practical-bush-gt5k6?file=/src/App.js\">示例</a>：</p>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-dom&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">props</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(props);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;创建 App&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.state = &#123; <span class=\"attr\">count</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">    <span class=\"comment\">/* &#123;this.setState(&#123; count: 2 &#125;)&#125; */</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">UNSAFE_componentWillMount</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* &#123;this.setState(&#123; count: 2 &#125;)&#125; */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;将要 mount App&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">componentDidMount</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;已经 mount App&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// this.setState(&#123; count: 2 &#125;);</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">UNSAFE_componentWillUpdate</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// this.setState(&#123; count: 2 &#125;);</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;将要 update App&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">componentDidUpdate</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;已经 update App&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">shouldComponentUpdate</span>(<span class=\"params\">nextProps, nextState</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;shouldComponentUpdate&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextState.count &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">componentWillUnmount</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;将要 unmount App&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// static getDerivedStateFromProps() &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   /**如果使用此方法，</span></span><br><span class=\"line\">  <span class=\"comment\">//    * 那么这两个方法 UNSAFE_componentWillMount、UNSAFE_componentWillUpdate 不能同时使用</span></span><br><span class=\"line\">  <span class=\"comment\">//    */</span></span><br><span class=\"line\">  <span class=\"comment\">//   console.log(&quot;getDerivedStateFromProps&quot;);</span></span><br><span class=\"line\">  <span class=\"comment\">//   return null;</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">onClick</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;click&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.setState(&#123; <span class=\"attr\">count</span>: <span class=\"built_in\">this</span>.state.count + <span class=\"number\">1</span> &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">unmount</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    ReactDOM.unmountComponentAtNode(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;root&quot;</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        &#123;this.state.count&#125;</span></span><br><span class=\"line\"><span class=\"xml\">        &#123;/* &#123;this.setState(&#123; count: 2 &#125;)&#125; */&#125;</span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> this.onClick()&#125;&gt;点击加1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> this.unmount()&#125;&gt;销毁组件<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        &#123;console.log(&quot;render App&quot;)&#125;</span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"constructor-NaN\"><a href=\"#constructor-NaN\" class=\"headerlink\" title=\"constructor\"></a>constructor</h2><p>如果不初始化 state 或不进行方法绑定，则不需要为 React 组件实现构造函数。在 React 组件挂载之前，会调用它的构造函数。在为 React.Component 子类实现构造函数时，应在其他语句之前前调用 <code>super(props)</code>。通常，在 React 中，构造函数仅用于以下两种情况：</p>\n<p>  1.通过给 <code>this.state</code> 赋值对象来初始化<a href=\"https://react.docschina.org/docs/state-and-lifecycle.html\">内部 state</a>。</p>\n<p>  2.为<a href=\"https://react.docschina.org/docs/handling-events.html\">事件处理函数</a>绑定实例。</p>\n<h2 id=\"componentDidMount\"><a href=\"#componentDidMount\" class=\"headerlink\" title=\"componentDidMount\"></a>componentDidMount</h2><p><code>componentDidMount()</code> 会在组件挂载后立即调用，可以在 <code>componentDidMount()</code> 里直接调用 <code>setState()</code>。Ajax请求可以放在该生命周期内。</p>\n<h2 id=\"componentDidUpdate\"><a href=\"#componentDidUpdate\" class=\"headerlink\" title=\"componentDidUpdate\"></a>componentDidUpdate</h2><p><code>componentDidUpdate()</code> 会在更新后会被立即调用。首次渲染不会执行此方法。</p>\n<h2 id=\"componentWillUnmount\"><a href=\"#componentWillUnmount\" class=\"headerlink\" title=\"componentWillUnmount\"></a>componentWillUnmount</h2><p><code>componentWillUnmount()</code> 会在组件卸载及销毁之前直接调用。可以在此生命周期中清除定时器、取消网络请求等。</p>\n<h2 id=\"shouldComponentUpdate\"><a href=\"#shouldComponentUpdate\" class=\"headerlink\" title=\"shouldComponentUpdate\"></a>shouldComponentUpdate</h2><p>当 props 或 state 发生变化时，<code>shouldComponentUpdate()</code> 会在渲染执行之前被调用。返回值默认为 true。首次渲染或使用 <code>forceUpdate()</code> 时不会调用该方法。如果 <code>shouldComponentUpdate()</code> 返回 <code>false</code>，则不会调用 <code>UNSAFE_componentWillUpdate()</code>，<code>render()</code> 和 <code>componentDidUpdate()</code>。</p>\n<h1 id=\"不能调用setState-方法的生命周期函数\"><a href=\"#不能调用setState-方法的生命周期函数\" class=\"headerlink\" title=\"不能调用setState()方法的生命周期函数\"></a>不能调用setState()方法的生命周期函数</h1><ul>\n<li><p><code>constructor</code></p>\n<p>在 <code>constructor()</code> 函数中不要调用 <code>setState()</code> 方法。如果在 <code>constructor()</code> 函数中调用 了<code>setState()</code> 方法，那么控制台会出现如下错误提示：<code>Can&#39;t call setState on a component that is not yet mounted.</code>。所以在组件挂载完成之前都不能调用<code>setState()</code> 方法。</p>\n</li>\n<li><p><code>UNSAFE_componentWillMount/componentWillMount</code></p>\n</li>\n<li><p><code>render</code></p>\n<p>如果在<code>render</code>内调用<code>setState()</code> 方法，<code>setState()</code> 方法会触发<code>render</code>，而<code>render</code>又将触发<code>setState()</code> ，进而出现无限循环。</p>\n</li>\n<li><p><code>UNSAFE_componentWillUpdate\\componentWillUpdate</code></p>\n<p>如果在<code>UNSAFE_componentWillUpdate\\componentWillUpdate</code>内调用<code>setState()</code> 方法，当state更新时将触发<code>UNSAFE_componentWillUpdate\\componentWillUpdate</code>，而<code>UNSAFE_componentWillUpdate\\componentWillUpdate</code>又将触发<code>setState()</code> ，进而出现无限循环。</p>\n</li>\n<li><p><code>componentDidUpdate</code></p>\n<p>如果在<code>componentDidUpdate</code>内调用<code>setState()</code> 方法，当state更新时将触发<code>componentDidUpdate</code>，而<code>componentDidUpdate</code>又将触发<code>setState()</code> ，进而出现无限循环。</p>\n</li>\n</ul>"},{"layout":"react","title":"React Hooks","date":"2021-07-30T02:18:30.000Z","_content":"\n# React Hooks\n\nHook API 是React 自v16.8开始提供的，它使得函数组件也能实现与class组件相同的效果。\n\n## useState\n\n在v16.8之前，要想组件拥有自己的`state`就必须写成class组件：\n\n````javascript\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n  }\n  onClick = () => {\n    this.setState({\n      count: this.state.count + 1\n    });\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <p>点击次数:{this.state.count}</p>\n        <br />\n        <button onClick={() => this.onClick()}>点击</button>\n      </div>\n    );\n  }\n}\n````\n\n而在v16.8开始，React提供了 `useState`使得函数组件也可以拥有自己的`state`：\n\n````javascript\nconst App = () => {\n  const [count, setCount] = useState(0);\n  const onClick = () => {\n    setCount(count + 1);\n  };\n  return (\n    <div className=\"App\">\n      <p>点击次数:{count}</p>\n      <br />\n      <button onClick={() => onClick()}>点击</button>\n    </div>\n  );\n};\n````\n\n<!-- more -->\n\n在使用`useState`初始化数据时，也可以传入对象作为参数。但是当传入的参数是对象时，需要注意以下两点：\n\n- 不可部分更新`state`\n\n````javascript\nconst App = () => {\n  const [fruits, setFruits] = useState({ apple: \"苹果\", banana: \"香蕉\" });\n  const onClick = () => {\n    setFruits({\n      banana: \"桔子\"\n    });\n  };\n  return (\n    <div className=\"App\">\n      <p>{fruits.apple}</p>\n      <p>{fruits.banana}</p>\n      <br />\n      <button onClick={() => onClick()}>点击</button>\n    </div>\n  );\n};\n````\n\n在点击按钮之后将只显示\"桔子\"，这是`setState`不会合并属性，所以在更新`state`是要手动合并属性。上述代码可改写成：\n\n````javascript\nconst App = () => {\n  const [fruits, setFruits] = useState({ apple: \"苹果\", banana: \"香蕉\" });\n  const onClick = () => {\n    setFruits({\n      ...fruits,\n      banana: \"桔子\"\n    });\n  };\n  return (\n    <div className=\"App\">\n      <p>{fruits.apple}</p>\n      <p>{fruits.banana}</p>\n      <br />\n      <button onClick={() => onClick()}>点击</button>\n    </div>\n  );\n};\n````\n\n- 当传入的参数是对象，`setState(obj)`时obj的引用地址没有变化时，UI不会重新渲染。\n\n````javascript\nconst App = () => {\n  const [fruits, setFruits] = useState({ apple: \"苹果\", banana: \"香蕉\" });\n  const onClick = () => {\n    fruits.banana = \"桔子\"\n    setFruits(fruits);//不会重新渲染\n  };\n  return (\n    <div className=\"App\">\n      <p>{fruits.apple}</p>\n      <p>{fruits.banana}</p>\n      <br />\n      <button onClick={() => onClick()}>点击</button>\n    </div>\n  );\n};\n````\n\n## useEffect\n\n`useEffect` 在每次render后都会执行，可以 看做 `componentDidMount`，`componentDidUpdate` 和 `componentWillUnmount` 这三个函数的组合。如果存在多个`useEffect`，会按照出现顺序执行。Ajax请求可以放在`useEffect`中。`useEffect`的用法如下：\n\n````javascript\nconst App = () => {\n  const [count, setCount] = useState(0);\n  const onClick = () => {\n    setCount(count + 1);\n  };\n  useEffect(() => {\n    console.log(\"每次render后执行\");\n  });\n  return (\n    <div className=\"App\">\n      <p>点击次数:{count}</p>\n      <br />\n      <button onClick={() => onClick()}>点击</button>\n    </div>\n  );\n};\n````\n\n上面`useEffect`里的函数在每次render后都会执行一次。\n\n````javascript\nconst App = () => {\n  const [count, setCount] = useState(0);\n  const onClick = () => {\n    setCount(count + 1);\n  };\n  useEffect(() => {\n    console.log(\"每次render后执行\");\n  });\n  useEffect(() => {\n    console.log(\"只在第一次render后执行\");\n  }, []);\n  return (\n    <div className=\"App\">\n      <p>点击次数:{count}</p>\n      <br />\n      <button onClick={() => onClick()}>点击</button>\n    </div>\n  );\n};\n````\n\n在`useEffect`中传入第二个参数`[]`，可使得`useEffect`里的函数只在只在第一次render后执行，相当于 `componentDidMount`，即使`count`变化，这段代码也不会执行。\n\n````javascript\nconst App = () => {\n  const [count, setCount] = useState(0);\n  const onClick = () => {\n    setCount(count + 1);\n  };\n  useEffect(() => {\n    console.log(\"每次render后执行\");\n  });\n  useEffect(() => {\n    console.log(\"只在第一次render后执行\");\n  }, []);\n  useEffect(() => {\n    console.log(\"count变化时执行\");\n  }, [count]);\n  return (\n    <div className=\"App\">\n      <p>点击次数:{count}</p>\n      <br />\n      <button onClick={() => onClick()}>点击</button>\n    </div>\n  );\n};\n````\n\n在`useEffect`中传入第二个参数`[]`中传入所要依赖的变量，可使得`useEffect`里的函数在变量发生变化是执行。上述代码在每次`count`变化后都会执行(包括首次渲染)。\n\n````javascript\nconst App = () => {\n  useEffect(() => {\n    const id = setInterval(() => {\n      console.log(\"setInterval\");\n    }, 3000);\n    return () => {\n      window.clearInterval(id);\n      console.log(\"清除setInterval\");\n    };\n  }, []);\n  const onClick = () => {\n    ReactDOM.unmountComponentAtNode(document.getElementById(\"root\"));\n  };\n  return (\n    <div className=\"App\">\n      <button onClick={() => onClick()}>销毁组件</button>\n    </div>\n  );\n};\n````\n\n需要清除的Effect的时候，在`useEffect`中返回一个函数，这个函数中进行一些清除的操作，组件在销毁的时候会执行其中的代码操作，相当于 `componentWillUnmount` 。\n\n## useContext\n\nuseContext可以实现一个局部的全局变量，在这个范围内所有组件都能够访问。\n\n````javascript\nconst Context = createContext(null);\nconst App = () => {\n  const [count, setCount] = useState(0);\n  return (\n    <Context.Provider value={{ count, setCount }}>\n      <div className=\"App\">\n        <p>App: {count}</p>\n        <Child />\n      </div>\n    </Context.Provider>\n  );\n};\n\nconst Child = () => {\n  const { count, setCount } = useContext(Context);\n  const onClick = () => {\n    setCount(count + 1);\n  };\n  return (\n    <div>\n      Child: {count}\n      <button onClick={() => onClick()}>点击</button>\n    </div>\n  );\n};\n````\n\n首先使用`createContext`创建`Context`，然后使用`Context.Provider`圈定作用域，最后在作用域中使用`useContext(Context)`访问/操作变量。\n\n## useRef\n\n`useRef`返回一个对象，`useRef.current`的值就是传入的初始值。`useRef`有两种常用用法：\n\n1.访问DOM\n\n````javascript\nconst App = () => {\n  const divRef = useRef(null);\n  useEffect(() => {\n    divRef.current.style.border = \"1px solid red\";\n  });\n  return (\n    <div className=\"App\" ref={divRef}>\n      App\n    </div>\n  );\n};\n````\n\n上述代码在`render`之后，改变`div`的`border`样式。\n\n2.保存任意值\n\n````javascript\nconst App = () => {\n  const ref = useRef(0);\n  useEffect(() => {\n    console.log(ref.current);\n  });\n  return <div className=\"App\">App</div>;\n};\n````\n\n*注意：当`ref.current`的值发生改变时，组件不会重新渲染。\n\n````javascript\nconst App = () => {\n  const ref = useRef(0);\n  const onClick = () => {\n    ref.current = ref.current + 1;\n    console.log(ref.current);\n  };\n  return (\n    <div className=\"App\">\n      {ref.current}\n      <br />\n      <button onClick={() => onClick()}>点击</button>\n    </div>\n  );\n};\n````\n\n解决方法：使用`useState`，在需要改变`ref.current`时进行`setState`。\n\n````javascript\nconst App = () => {\n  const ref = useRef(0);\n  const [, setX] = useState(0);\n  const onClick = () => {\n    ref.current = ref.current + 1;\n    console.log(ref.current);\n    setX(Math.random() * 100);\n  };\n  return (\n    <div className=\"App\">\n      {ref.current}\n      <br />\n      <button onClick={() => onClick()}>点击</button>\n    </div>\n  );\n};\n````\n\n## useMemo\n\n在理解`useMemo`之前，需要先了解`React.memo`。设想这样一个场景：`App`组件中有两个`state`，`App`组件自身使用一个`state x`，另外一个`state y`传递给子组件`Child`。我们的理解是，当`x`变化时，不会重新渲染子组件`Child`；只有当`y`改变时，才会重新渲染`Child`。\n\n````javascript\nconst App = () => {\n  console.log(\"运行App\");\n  const [x, setX] = useState(0);\n  const [y, setY] = useState(0);\n  const onClick = () => {\n    setX(x + 1);\n  };\n  return (\n    <div className=\"App\">\n      App:{x} <Child y={y}/>\n      <br />\n      <button onClick={() => onClick()}>change X</button>\n    </div>\n  );\n};\n\nfunction Child(props) {\n  console.log(\"运行Child\");\n  return <span>Child: {props.y}</span>;\n}\n````\n\n然而，实际上并不是如此，每当`x`变化时`Child`都会重新渲染。在这种情况下，可以使用`React.memo` 。`React.memo`会检查 `props `变更，如果`props`没有变化，则`Child`组件不会重新渲染。\n\n````javascript\nconst App = () => {\n  console.log(\"运行App\");\n  const [x, setX] = useState(0);\n  const [y, setY] = useState(0);\n  const onClick = () => {\n    setX(x + 1);\n  };\n  return (\n    <div className=\"App\">\n      App:{x} <Child2 y={y} />//使用Child2\n      <br />\n      <button onClick={() => onClick()}>change X</button>\n    </div>\n  );\n};\n\nfunction Child(props) {\n  console.log(\"运行Child\");\n  return <span>Child: {props.y}</span>;\n}\n\nconst Child2 = React.memo(Child);//新增代码\n````\n\n但是使用`React.memo`仍有不足之处：如果传递一个函数给`Child`组件，那么每当`x`变化时`Child`依然会重新渲染。\n\n````javascript\nconst App = () => {\n  console.log(\"运行App\");\n  const [x, setX] = useState(0);\n  const [y, setY] = useState(0);\n  const onClick = () => {\n    setX(x + 1);\n  };\n  const onChildClick = ()=>{}\n  return (\n    <div className=\"App\">\n      App:{x} <Child2 y={y} fn={onChildClick}/>//传入函数\n      <br />\n      <button onClick={() => onClick()}>change X</button>\n    </div>\n  );\n};\n\nfunction Child(props) {\n  console.log(\"运行Child\");\n  return <span onClick={props.fn}>Child: {props.y}</span>;//接收函数\n}\n\nconst Child2 = React.memo(Child);\n````\n\n这是因为每当`x`变化时，`App`都会重新执行，那么`onChildClick`都会是一个新的引用，所以`React.memo`失效。\n\n````javascript\nconst App = () => {\n  console.log(\"运行App\");\n  const [x, setX] = useState(0);\n  const [y, setY] = useState(0);\n  const onClick = () => {\n    setX(x + 1);\n  };\n  const onChildClick = useMemo(() => {\n    return () => {};\n  }, [y]);//缓存函数\n  return (\n    <div className=\"App\">\n      App:{x} <Child2 y={y} fn={onChildClick} />\n      <br />\n      <button onClick={() => onClick()}>change X</button>\n    </div>\n  );\n};\n\nfunction Child(props) {\n  console.log(\"运行Child\");\n  return <span onClick={props.fn}>Child: {props.y}</span>;\n}\n\nconst Child2 = React.memo(Child);\n````\n\n## useCallback\n\n`useCallback(fn, deps)` 相当于 `useMemo(() => fn, deps)`。那么上述`useMemo`的代码可改写成：\n\n````javascript\nconst App = () => {\n  console.log(\"运行App\");\n  const [x, setX] = useState(0);\n  const [y, setY] = useState(0);\n  const onClick = () => {\n    setX(x + 1);\n  };\n  const onChildClick = useCallback(() => {}, [y]);//使用useCallback改写useMemo\n  return (\n    <div className=\"App\">\n      App:{x} <Child2 y={y} fn={onChildClick} />\n      <br />\n      <button onClick={() => onClick()}>change X</button>\n    </div>\n  );\n};\n\nfunction Child(props) {\n  console.log(\"运行Child\");\n  return <span onClick={props.fn}>Child: {props.y}</span>;\n}\n\nconst Child2 = React.memo(Child);\n````\n\n\n\n","source":"_posts/Hooks.md","raw":"---\n\nlayout: react\ntitle: React Hooks\ndate: 2021-07-30 10:18:30\ntags: [\"React Hooks\"]\ncategories: React\n---\n\n# React Hooks\n\nHook API 是React 自v16.8开始提供的，它使得函数组件也能实现与class组件相同的效果。\n\n## useState\n\n在v16.8之前，要想组件拥有自己的`state`就必须写成class组件：\n\n````javascript\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n  }\n  onClick = () => {\n    this.setState({\n      count: this.state.count + 1\n    });\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <p>点击次数:{this.state.count}</p>\n        <br />\n        <button onClick={() => this.onClick()}>点击</button>\n      </div>\n    );\n  }\n}\n````\n\n而在v16.8开始，React提供了 `useState`使得函数组件也可以拥有自己的`state`：\n\n````javascript\nconst App = () => {\n  const [count, setCount] = useState(0);\n  const onClick = () => {\n    setCount(count + 1);\n  };\n  return (\n    <div className=\"App\">\n      <p>点击次数:{count}</p>\n      <br />\n      <button onClick={() => onClick()}>点击</button>\n    </div>\n  );\n};\n````\n\n<!-- more -->\n\n在使用`useState`初始化数据时，也可以传入对象作为参数。但是当传入的参数是对象时，需要注意以下两点：\n\n- 不可部分更新`state`\n\n````javascript\nconst App = () => {\n  const [fruits, setFruits] = useState({ apple: \"苹果\", banana: \"香蕉\" });\n  const onClick = () => {\n    setFruits({\n      banana: \"桔子\"\n    });\n  };\n  return (\n    <div className=\"App\">\n      <p>{fruits.apple}</p>\n      <p>{fruits.banana}</p>\n      <br />\n      <button onClick={() => onClick()}>点击</button>\n    </div>\n  );\n};\n````\n\n在点击按钮之后将只显示\"桔子\"，这是`setState`不会合并属性，所以在更新`state`是要手动合并属性。上述代码可改写成：\n\n````javascript\nconst App = () => {\n  const [fruits, setFruits] = useState({ apple: \"苹果\", banana: \"香蕉\" });\n  const onClick = () => {\n    setFruits({\n      ...fruits,\n      banana: \"桔子\"\n    });\n  };\n  return (\n    <div className=\"App\">\n      <p>{fruits.apple}</p>\n      <p>{fruits.banana}</p>\n      <br />\n      <button onClick={() => onClick()}>点击</button>\n    </div>\n  );\n};\n````\n\n- 当传入的参数是对象，`setState(obj)`时obj的引用地址没有变化时，UI不会重新渲染。\n\n````javascript\nconst App = () => {\n  const [fruits, setFruits] = useState({ apple: \"苹果\", banana: \"香蕉\" });\n  const onClick = () => {\n    fruits.banana = \"桔子\"\n    setFruits(fruits);//不会重新渲染\n  };\n  return (\n    <div className=\"App\">\n      <p>{fruits.apple}</p>\n      <p>{fruits.banana}</p>\n      <br />\n      <button onClick={() => onClick()}>点击</button>\n    </div>\n  );\n};\n````\n\n## useEffect\n\n`useEffect` 在每次render后都会执行，可以 看做 `componentDidMount`，`componentDidUpdate` 和 `componentWillUnmount` 这三个函数的组合。如果存在多个`useEffect`，会按照出现顺序执行。Ajax请求可以放在`useEffect`中。`useEffect`的用法如下：\n\n````javascript\nconst App = () => {\n  const [count, setCount] = useState(0);\n  const onClick = () => {\n    setCount(count + 1);\n  };\n  useEffect(() => {\n    console.log(\"每次render后执行\");\n  });\n  return (\n    <div className=\"App\">\n      <p>点击次数:{count}</p>\n      <br />\n      <button onClick={() => onClick()}>点击</button>\n    </div>\n  );\n};\n````\n\n上面`useEffect`里的函数在每次render后都会执行一次。\n\n````javascript\nconst App = () => {\n  const [count, setCount] = useState(0);\n  const onClick = () => {\n    setCount(count + 1);\n  };\n  useEffect(() => {\n    console.log(\"每次render后执行\");\n  });\n  useEffect(() => {\n    console.log(\"只在第一次render后执行\");\n  }, []);\n  return (\n    <div className=\"App\">\n      <p>点击次数:{count}</p>\n      <br />\n      <button onClick={() => onClick()}>点击</button>\n    </div>\n  );\n};\n````\n\n在`useEffect`中传入第二个参数`[]`，可使得`useEffect`里的函数只在只在第一次render后执行，相当于 `componentDidMount`，即使`count`变化，这段代码也不会执行。\n\n````javascript\nconst App = () => {\n  const [count, setCount] = useState(0);\n  const onClick = () => {\n    setCount(count + 1);\n  };\n  useEffect(() => {\n    console.log(\"每次render后执行\");\n  });\n  useEffect(() => {\n    console.log(\"只在第一次render后执行\");\n  }, []);\n  useEffect(() => {\n    console.log(\"count变化时执行\");\n  }, [count]);\n  return (\n    <div className=\"App\">\n      <p>点击次数:{count}</p>\n      <br />\n      <button onClick={() => onClick()}>点击</button>\n    </div>\n  );\n};\n````\n\n在`useEffect`中传入第二个参数`[]`中传入所要依赖的变量，可使得`useEffect`里的函数在变量发生变化是执行。上述代码在每次`count`变化后都会执行(包括首次渲染)。\n\n````javascript\nconst App = () => {\n  useEffect(() => {\n    const id = setInterval(() => {\n      console.log(\"setInterval\");\n    }, 3000);\n    return () => {\n      window.clearInterval(id);\n      console.log(\"清除setInterval\");\n    };\n  }, []);\n  const onClick = () => {\n    ReactDOM.unmountComponentAtNode(document.getElementById(\"root\"));\n  };\n  return (\n    <div className=\"App\">\n      <button onClick={() => onClick()}>销毁组件</button>\n    </div>\n  );\n};\n````\n\n需要清除的Effect的时候，在`useEffect`中返回一个函数，这个函数中进行一些清除的操作，组件在销毁的时候会执行其中的代码操作，相当于 `componentWillUnmount` 。\n\n## useContext\n\nuseContext可以实现一个局部的全局变量，在这个范围内所有组件都能够访问。\n\n````javascript\nconst Context = createContext(null);\nconst App = () => {\n  const [count, setCount] = useState(0);\n  return (\n    <Context.Provider value={{ count, setCount }}>\n      <div className=\"App\">\n        <p>App: {count}</p>\n        <Child />\n      </div>\n    </Context.Provider>\n  );\n};\n\nconst Child = () => {\n  const { count, setCount } = useContext(Context);\n  const onClick = () => {\n    setCount(count + 1);\n  };\n  return (\n    <div>\n      Child: {count}\n      <button onClick={() => onClick()}>点击</button>\n    </div>\n  );\n};\n````\n\n首先使用`createContext`创建`Context`，然后使用`Context.Provider`圈定作用域，最后在作用域中使用`useContext(Context)`访问/操作变量。\n\n## useRef\n\n`useRef`返回一个对象，`useRef.current`的值就是传入的初始值。`useRef`有两种常用用法：\n\n1.访问DOM\n\n````javascript\nconst App = () => {\n  const divRef = useRef(null);\n  useEffect(() => {\n    divRef.current.style.border = \"1px solid red\";\n  });\n  return (\n    <div className=\"App\" ref={divRef}>\n      App\n    </div>\n  );\n};\n````\n\n上述代码在`render`之后，改变`div`的`border`样式。\n\n2.保存任意值\n\n````javascript\nconst App = () => {\n  const ref = useRef(0);\n  useEffect(() => {\n    console.log(ref.current);\n  });\n  return <div className=\"App\">App</div>;\n};\n````\n\n*注意：当`ref.current`的值发生改变时，组件不会重新渲染。\n\n````javascript\nconst App = () => {\n  const ref = useRef(0);\n  const onClick = () => {\n    ref.current = ref.current + 1;\n    console.log(ref.current);\n  };\n  return (\n    <div className=\"App\">\n      {ref.current}\n      <br />\n      <button onClick={() => onClick()}>点击</button>\n    </div>\n  );\n};\n````\n\n解决方法：使用`useState`，在需要改变`ref.current`时进行`setState`。\n\n````javascript\nconst App = () => {\n  const ref = useRef(0);\n  const [, setX] = useState(0);\n  const onClick = () => {\n    ref.current = ref.current + 1;\n    console.log(ref.current);\n    setX(Math.random() * 100);\n  };\n  return (\n    <div className=\"App\">\n      {ref.current}\n      <br />\n      <button onClick={() => onClick()}>点击</button>\n    </div>\n  );\n};\n````\n\n## useMemo\n\n在理解`useMemo`之前，需要先了解`React.memo`。设想这样一个场景：`App`组件中有两个`state`，`App`组件自身使用一个`state x`，另外一个`state y`传递给子组件`Child`。我们的理解是，当`x`变化时，不会重新渲染子组件`Child`；只有当`y`改变时，才会重新渲染`Child`。\n\n````javascript\nconst App = () => {\n  console.log(\"运行App\");\n  const [x, setX] = useState(0);\n  const [y, setY] = useState(0);\n  const onClick = () => {\n    setX(x + 1);\n  };\n  return (\n    <div className=\"App\">\n      App:{x} <Child y={y}/>\n      <br />\n      <button onClick={() => onClick()}>change X</button>\n    </div>\n  );\n};\n\nfunction Child(props) {\n  console.log(\"运行Child\");\n  return <span>Child: {props.y}</span>;\n}\n````\n\n然而，实际上并不是如此，每当`x`变化时`Child`都会重新渲染。在这种情况下，可以使用`React.memo` 。`React.memo`会检查 `props `变更，如果`props`没有变化，则`Child`组件不会重新渲染。\n\n````javascript\nconst App = () => {\n  console.log(\"运行App\");\n  const [x, setX] = useState(0);\n  const [y, setY] = useState(0);\n  const onClick = () => {\n    setX(x + 1);\n  };\n  return (\n    <div className=\"App\">\n      App:{x} <Child2 y={y} />//使用Child2\n      <br />\n      <button onClick={() => onClick()}>change X</button>\n    </div>\n  );\n};\n\nfunction Child(props) {\n  console.log(\"运行Child\");\n  return <span>Child: {props.y}</span>;\n}\n\nconst Child2 = React.memo(Child);//新增代码\n````\n\n但是使用`React.memo`仍有不足之处：如果传递一个函数给`Child`组件，那么每当`x`变化时`Child`依然会重新渲染。\n\n````javascript\nconst App = () => {\n  console.log(\"运行App\");\n  const [x, setX] = useState(0);\n  const [y, setY] = useState(0);\n  const onClick = () => {\n    setX(x + 1);\n  };\n  const onChildClick = ()=>{}\n  return (\n    <div className=\"App\">\n      App:{x} <Child2 y={y} fn={onChildClick}/>//传入函数\n      <br />\n      <button onClick={() => onClick()}>change X</button>\n    </div>\n  );\n};\n\nfunction Child(props) {\n  console.log(\"运行Child\");\n  return <span onClick={props.fn}>Child: {props.y}</span>;//接收函数\n}\n\nconst Child2 = React.memo(Child);\n````\n\n这是因为每当`x`变化时，`App`都会重新执行，那么`onChildClick`都会是一个新的引用，所以`React.memo`失效。\n\n````javascript\nconst App = () => {\n  console.log(\"运行App\");\n  const [x, setX] = useState(0);\n  const [y, setY] = useState(0);\n  const onClick = () => {\n    setX(x + 1);\n  };\n  const onChildClick = useMemo(() => {\n    return () => {};\n  }, [y]);//缓存函数\n  return (\n    <div className=\"App\">\n      App:{x} <Child2 y={y} fn={onChildClick} />\n      <br />\n      <button onClick={() => onClick()}>change X</button>\n    </div>\n  );\n};\n\nfunction Child(props) {\n  console.log(\"运行Child\");\n  return <span onClick={props.fn}>Child: {props.y}</span>;\n}\n\nconst Child2 = React.memo(Child);\n````\n\n## useCallback\n\n`useCallback(fn, deps)` 相当于 `useMemo(() => fn, deps)`。那么上述`useMemo`的代码可改写成：\n\n````javascript\nconst App = () => {\n  console.log(\"运行App\");\n  const [x, setX] = useState(0);\n  const [y, setY] = useState(0);\n  const onClick = () => {\n    setX(x + 1);\n  };\n  const onChildClick = useCallback(() => {}, [y]);//使用useCallback改写useMemo\n  return (\n    <div className=\"App\">\n      App:{x} <Child2 y={y} fn={onChildClick} />\n      <br />\n      <button onClick={() => onClick()}>change X</button>\n    </div>\n  );\n};\n\nfunction Child(props) {\n  console.log(\"运行Child\");\n  return <span onClick={props.fn}>Child: {props.y}</span>;\n}\n\nconst Child2 = React.memo(Child);\n````\n\n\n\n","slug":"Hooks","published":1,"updated":"2021-07-30T02:39:32.092Z","_id":"ckroplsyi0000g8u08kjv5als","comments":1,"photos":[],"link":"","content":"<h1 id=\"React-Hooks\"><a href=\"#React-Hooks\" class=\"headerlink\" title=\"React Hooks\"></a>React Hooks</h1><p>Hook API 是React 自v16.8开始提供的，它使得函数组件也能实现与class组件相同的效果。</p>\n<h2 id=\"useState\"><a href=\"#useState\" class=\"headerlink\" title=\"useState\"></a>useState</h2><p>在v16.8之前，要想组件拥有自己的<code>state</code>就必须写成class组件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">props</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(props);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.state = &#123; <span class=\"attr\">count</span>: <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  onClick = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.setState(&#123;</span><br><span class=\"line\">      <span class=\"attr\">count</span>: <span class=\"built_in\">this</span>.state.count + <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>点击次数:&#123;this.state.count&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> this.onClick()&#125;&gt;点击<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而在v16.8开始，React提供了 <code>useState</code>使得函数组件也可以拥有自己的<code>state</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onClick = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    setCount(count + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>点击次数:&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> onClick()&#125;&gt;点击<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p>在使用<code>useState</code>初始化数据时，也可以传入对象作为参数。但是当传入的参数是对象时，需要注意以下两点：</p>\n<ul>\n<li>不可部分更新<code>state</code></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [fruits, setFruits] = useState(&#123; <span class=\"attr\">apple</span>: <span class=\"string\">&quot;苹果&quot;</span>, <span class=\"attr\">banana</span>: <span class=\"string\">&quot;香蕉&quot;</span> &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onClick = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    setFruits(&#123;</span><br><span class=\"line\">      <span class=\"attr\">banana</span>: <span class=\"string\">&quot;桔子&quot;</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;fruits.apple&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;fruits.banana&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> onClick()&#125;&gt;点击<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在点击按钮之后将只显示”桔子”，这是<code>setState</code>不会合并属性，所以在更新<code>state</code>是要手动合并属性。上述代码可改写成：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [fruits, setFruits] = useState(&#123; <span class=\"attr\">apple</span>: <span class=\"string\">&quot;苹果&quot;</span>, <span class=\"attr\">banana</span>: <span class=\"string\">&quot;香蕉&quot;</span> &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onClick = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    setFruits(&#123;</span><br><span class=\"line\">      ...fruits,</span><br><span class=\"line\">      <span class=\"attr\">banana</span>: <span class=\"string\">&quot;桔子&quot;</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;fruits.apple&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;fruits.banana&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> onClick()&#125;&gt;点击<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>当传入的参数是对象，<code>setState(obj)</code>时obj的引用地址没有变化时，UI不会重新渲染。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [fruits, setFruits] = useState(&#123; <span class=\"attr\">apple</span>: <span class=\"string\">&quot;苹果&quot;</span>, <span class=\"attr\">banana</span>: <span class=\"string\">&quot;香蕉&quot;</span> &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onClick = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    fruits.banana = <span class=\"string\">&quot;桔子&quot;</span></span><br><span class=\"line\">    setFruits(fruits);<span class=\"comment\">//不会重新渲染</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;fruits.apple&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;fruits.banana&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> onClick()&#125;&gt;点击<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"useEffect\"><a href=\"#useEffect\" class=\"headerlink\" title=\"useEffect\"></a>useEffect</h2><p><code>useEffect</code> 在每次render后都会执行，可以 看做 <code>componentDidMount</code>，<code>componentDidUpdate</code> 和 <code>componentWillUnmount</code> 这三个函数的组合。如果存在多个<code>useEffect</code>，会按照出现顺序执行。Ajax请求可以放在<code>useEffect</code>中。<code>useEffect</code>的用法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onClick = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    setCount(count + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;每次render后执行&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>点击次数:&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> onClick()&#125;&gt;点击<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>上面<code>useEffect</code>里的函数在每次render后都会执行一次。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onClick = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    setCount(count + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;每次render后执行&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;只在第一次render后执行&quot;</span>);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>点击次数:&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> onClick()&#125;&gt;点击<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>useEffect</code>中传入第二个参数<code>[]</code>，可使得<code>useEffect</code>里的函数只在只在第一次render后执行，相当于 <code>componentDidMount</code>，即使<code>count</code>变化，这段代码也不会执行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onClick = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    setCount(count + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;每次render后执行&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;只在第一次render后执行&quot;</span>);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">  useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;count变化时执行&quot;</span>);</span><br><span class=\"line\">  &#125;, [count]);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>点击次数:&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> onClick()&#125;&gt;点击<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>useEffect</code>中传入第二个参数<code>[]</code>中传入所要依赖的变量，可使得<code>useEffect</code>里的函数在变量发生变化是执行。上述代码在每次<code>count</code>变化后都会执行(包括首次渲染)。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> id = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;setInterval&quot;</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">window</span>.clearInterval(id);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;清除setInterval&quot;</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onClick = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    ReactDOM.unmountComponentAtNode(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;root&quot;</span>));</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> onClick()&#125;&gt;销毁组件<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>需要清除的Effect的时候，在<code>useEffect</code>中返回一个函数，这个函数中进行一些清除的操作，组件在销毁的时候会执行其中的代码操作，相当于 <code>componentWillUnmount</code> 。</p>\n<h2 id=\"useContext\"><a href=\"#useContext\" class=\"headerlink\" title=\"useContext\"></a>useContext</h2><p>useContext可以实现一个局部的全局变量，在这个范围内所有组件都能够访问。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Context = createContext(<span class=\"literal\">null</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Context.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">count</span>, <span class=\"attr\">setCount</span> &#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>App: &#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">Child</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">Context.Provider</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Child = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; count, setCount &#125; = useContext(Context);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onClick = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    setCount(count + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      Child: &#123;count&#125;</span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> onClick()&#125;&gt;点击<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>首先使用<code>createContext</code>创建<code>Context</code>，然后使用<code>Context.Provider</code>圈定作用域，最后在作用域中使用<code>useContext(Context)</code>访问/操作变量。</p>\n<h2 id=\"useRef\"><a href=\"#useRef\" class=\"headerlink\" title=\"useRef\"></a>useRef</h2><p><code>useRef</code>返回一个对象，<code>useRef.current</code>的值就是传入的初始值。<code>useRef</code>有两种常用用法：</p>\n<p>1.访问DOM</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> divRef = useRef(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    divRef.current.style.border = <span class=\"string\">&quot;1px solid red&quot;</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;divRef&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      App</span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>上述代码在<code>render</code>之后，改变<code>div</code>的<code>border</code>样式。</p>\n<p>2.保存任意值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ref = useRef(<span class=\"number\">0</span>);</span><br><span class=\"line\">  useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ref.current);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>*注意：当<code>ref.current</code>的值发生改变时，组件不会重新渲染。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ref = useRef(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onClick = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    ref.current = ref.current + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ref.current);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      &#123;ref.current&#125;</span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> onClick()&#125;&gt;点击<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>解决方法：使用<code>useState</code>，在需要改变<code>ref.current</code>时进行<code>setState</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ref = useRef(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [, setX] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onClick = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    ref.current = ref.current + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ref.current);</span><br><span class=\"line\">    setX(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">100</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      &#123;ref.current&#125;</span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> onClick()&#125;&gt;点击<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"useMemo\"><a href=\"#useMemo\" class=\"headerlink\" title=\"useMemo\"></a>useMemo</h2><p>在理解<code>useMemo</code>之前，需要先了解<code>React.memo</code>。设想这样一个场景：<code>App</code>组件中有两个<code>state</code>，<code>App</code>组件自身使用一个<code>state x</code>，另外一个<code>state y</code>传递给子组件<code>Child</code>。我们的理解是，当<code>x</code>变化时，不会重新渲染子组件<code>Child</code>；只有当<code>y</code>改变时，才会重新渲染<code>Child</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;运行App&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [x, setX] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [y, setY] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onClick = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    setX(x + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      App:&#123;x&#125; <span class=\"tag\">&lt;<span class=\"name\">Child</span> <span class=\"attr\">y</span>=<span class=\"string\">&#123;y&#125;/</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> onClick()&#125;&gt;change X<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;运行Child&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Child: &#123;props.y&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然而，实际上并不是如此，每当<code>x</code>变化时<code>Child</code>都会重新渲染。在这种情况下，可以使用<code>React.memo</code> 。<code>React.memo</code>会检查 <code>props </code>变更，如果<code>props</code>没有变化，则<code>Child</code>组件不会重新渲染。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;运行App&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [x, setX] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [y, setY] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onClick = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    setX(x + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      App:&#123;x&#125; <span class=\"tag\">&lt;<span class=\"name\">Child2</span> <span class=\"attr\">y</span>=<span class=\"string\">&#123;y&#125;</span> /&gt;</span>//使用Child2</span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> onClick()&#125;&gt;change X<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;运行Child&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Child: &#123;props.y&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Child2 = React.memo(Child);<span class=\"comment\">//新增代码</span></span><br></pre></td></tr></table></figure>\n\n<p>但是使用<code>React.memo</code>仍有不足之处：如果传递一个函数给<code>Child</code>组件，那么每当<code>x</code>变化时<code>Child</code>依然会重新渲染。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;运行App&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [x, setX] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [y, setY] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onClick = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    setX(x + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onChildClick = <span class=\"function\">()=&gt;</span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      App:&#123;x&#125; <span class=\"tag\">&lt;<span class=\"name\">Child2</span> <span class=\"attr\">y</span>=<span class=\"string\">&#123;y&#125;</span> <span class=\"attr\">fn</span>=<span class=\"string\">&#123;onChildClick&#125;/</span>&gt;</span>//传入函数</span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> onClick()&#125;&gt;change X<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;运行Child&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;props.fn&#125;</span>&gt;</span>Child: &#123;props.y&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span>;<span class=\"comment\">//接收函数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Child2 = React.memo(Child);</span><br></pre></td></tr></table></figure>\n\n<p>这是因为每当<code>x</code>变化时，<code>App</code>都会重新执行，那么<code>onChildClick</code>都会是一个新的引用，所以<code>React.memo</code>失效。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;运行App&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [x, setX] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [y, setY] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onClick = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    setX(x + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onChildClick = useMemo(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;&#125;;</span><br><span class=\"line\">  &#125;, [y]);<span class=\"comment\">//缓存函数</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      App:&#123;x&#125; <span class=\"tag\">&lt;<span class=\"name\">Child2</span> <span class=\"attr\">y</span>=<span class=\"string\">&#123;y&#125;</span> <span class=\"attr\">fn</span>=<span class=\"string\">&#123;onChildClick&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> onClick()&#125;&gt;change X<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;运行Child&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;props.fn&#125;</span>&gt;</span>Child: &#123;props.y&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Child2 = React.memo(Child);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"useCallback\"><a href=\"#useCallback\" class=\"headerlink\" title=\"useCallback\"></a>useCallback</h2><p><code>useCallback(fn, deps)</code> 相当于 <code>useMemo(() =&gt; fn, deps)</code>。那么上述<code>useMemo</code>的代码可改写成：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;运行App&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [x, setX] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [y, setY] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onClick = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    setX(x + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onChildClick = useCallback(<span class=\"function\">() =&gt;</span> &#123;&#125;, [y]);<span class=\"comment\">//使用useCallback改写useMemo</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      App:&#123;x&#125; <span class=\"tag\">&lt;<span class=\"name\">Child2</span> <span class=\"attr\">y</span>=<span class=\"string\">&#123;y&#125;</span> <span class=\"attr\">fn</span>=<span class=\"string\">&#123;onChildClick&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> onClick()&#125;&gt;change X<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;运行Child&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;props.fn&#125;</span>&gt;</span>Child: &#123;props.y&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Child2 = React.memo(Child);</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"<h1 id=\"React-Hooks\"><a href=\"#React-Hooks\" class=\"headerlink\" title=\"React Hooks\"></a>React Hooks</h1><p>Hook API 是React 自v16.8开始提供的，它使得函数组件也能实现与class组件相同的效果。</p>\n<h2 id=\"useState\"><a href=\"#useState\" class=\"headerlink\" title=\"useState\"></a>useState</h2><p>在v16.8之前，要想组件拥有自己的<code>state</code>就必须写成class组件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">props</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(props);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.state = &#123; <span class=\"attr\">count</span>: <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  onClick = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.setState(&#123;</span><br><span class=\"line\">      <span class=\"attr\">count</span>: <span class=\"built_in\">this</span>.state.count + <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>点击次数:&#123;this.state.count&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> this.onClick()&#125;&gt;点击<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而在v16.8开始，React提供了 <code>useState</code>使得函数组件也可以拥有自己的<code>state</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onClick = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    setCount(count + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>点击次数:&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> onClick()&#125;&gt;点击<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","more":"<p>在使用<code>useState</code>初始化数据时，也可以传入对象作为参数。但是当传入的参数是对象时，需要注意以下两点：</p>\n<ul>\n<li>不可部分更新<code>state</code></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [fruits, setFruits] = useState(&#123; <span class=\"attr\">apple</span>: <span class=\"string\">&quot;苹果&quot;</span>, <span class=\"attr\">banana</span>: <span class=\"string\">&quot;香蕉&quot;</span> &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onClick = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    setFruits(&#123;</span><br><span class=\"line\">      <span class=\"attr\">banana</span>: <span class=\"string\">&quot;桔子&quot;</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;fruits.apple&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;fruits.banana&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> onClick()&#125;&gt;点击<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在点击按钮之后将只显示”桔子”，这是<code>setState</code>不会合并属性，所以在更新<code>state</code>是要手动合并属性。上述代码可改写成：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [fruits, setFruits] = useState(&#123; <span class=\"attr\">apple</span>: <span class=\"string\">&quot;苹果&quot;</span>, <span class=\"attr\">banana</span>: <span class=\"string\">&quot;香蕉&quot;</span> &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onClick = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    setFruits(&#123;</span><br><span class=\"line\">      ...fruits,</span><br><span class=\"line\">      <span class=\"attr\">banana</span>: <span class=\"string\">&quot;桔子&quot;</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;fruits.apple&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;fruits.banana&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> onClick()&#125;&gt;点击<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>当传入的参数是对象，<code>setState(obj)</code>时obj的引用地址没有变化时，UI不会重新渲染。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [fruits, setFruits] = useState(&#123; <span class=\"attr\">apple</span>: <span class=\"string\">&quot;苹果&quot;</span>, <span class=\"attr\">banana</span>: <span class=\"string\">&quot;香蕉&quot;</span> &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onClick = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    fruits.banana = <span class=\"string\">&quot;桔子&quot;</span></span><br><span class=\"line\">    setFruits(fruits);<span class=\"comment\">//不会重新渲染</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;fruits.apple&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;fruits.banana&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> onClick()&#125;&gt;点击<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"useEffect\"><a href=\"#useEffect\" class=\"headerlink\" title=\"useEffect\"></a>useEffect</h2><p><code>useEffect</code> 在每次render后都会执行，可以 看做 <code>componentDidMount</code>，<code>componentDidUpdate</code> 和 <code>componentWillUnmount</code> 这三个函数的组合。如果存在多个<code>useEffect</code>，会按照出现顺序执行。Ajax请求可以放在<code>useEffect</code>中。<code>useEffect</code>的用法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onClick = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    setCount(count + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;每次render后执行&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>点击次数:&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> onClick()&#125;&gt;点击<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>上面<code>useEffect</code>里的函数在每次render后都会执行一次。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onClick = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    setCount(count + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;每次render后执行&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;只在第一次render后执行&quot;</span>);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>点击次数:&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> onClick()&#125;&gt;点击<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>useEffect</code>中传入第二个参数<code>[]</code>，可使得<code>useEffect</code>里的函数只在只在第一次render后执行，相当于 <code>componentDidMount</code>，即使<code>count</code>变化，这段代码也不会执行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onClick = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    setCount(count + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;每次render后执行&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;只在第一次render后执行&quot;</span>);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">  useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;count变化时执行&quot;</span>);</span><br><span class=\"line\">  &#125;, [count]);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>点击次数:&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> onClick()&#125;&gt;点击<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>useEffect</code>中传入第二个参数<code>[]</code>中传入所要依赖的变量，可使得<code>useEffect</code>里的函数在变量发生变化是执行。上述代码在每次<code>count</code>变化后都会执行(包括首次渲染)。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> id = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;setInterval&quot;</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">window</span>.clearInterval(id);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;清除setInterval&quot;</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onClick = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    ReactDOM.unmountComponentAtNode(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;root&quot;</span>));</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> onClick()&#125;&gt;销毁组件<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>需要清除的Effect的时候，在<code>useEffect</code>中返回一个函数，这个函数中进行一些清除的操作，组件在销毁的时候会执行其中的代码操作，相当于 <code>componentWillUnmount</code> 。</p>\n<h2 id=\"useContext\"><a href=\"#useContext\" class=\"headerlink\" title=\"useContext\"></a>useContext</h2><p>useContext可以实现一个局部的全局变量，在这个范围内所有组件都能够访问。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Context = createContext(<span class=\"literal\">null</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Context.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">count</span>, <span class=\"attr\">setCount</span> &#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>App: &#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">Child</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">Context.Provider</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Child = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; count, setCount &#125; = useContext(Context);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onClick = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    setCount(count + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      Child: &#123;count&#125;</span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> onClick()&#125;&gt;点击<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>首先使用<code>createContext</code>创建<code>Context</code>，然后使用<code>Context.Provider</code>圈定作用域，最后在作用域中使用<code>useContext(Context)</code>访问/操作变量。</p>\n<h2 id=\"useRef\"><a href=\"#useRef\" class=\"headerlink\" title=\"useRef\"></a>useRef</h2><p><code>useRef</code>返回一个对象，<code>useRef.current</code>的值就是传入的初始值。<code>useRef</code>有两种常用用法：</p>\n<p>1.访问DOM</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> divRef = useRef(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    divRef.current.style.border = <span class=\"string\">&quot;1px solid red&quot;</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;divRef&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      App</span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>上述代码在<code>render</code>之后，改变<code>div</code>的<code>border</code>样式。</p>\n<p>2.保存任意值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ref = useRef(<span class=\"number\">0</span>);</span><br><span class=\"line\">  useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ref.current);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span>App<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>*注意：当<code>ref.current</code>的值发生改变时，组件不会重新渲染。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ref = useRef(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onClick = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    ref.current = ref.current + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ref.current);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      &#123;ref.current&#125;</span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> onClick()&#125;&gt;点击<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>解决方法：使用<code>useState</code>，在需要改变<code>ref.current</code>时进行<code>setState</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ref = useRef(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [, setX] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onClick = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    ref.current = ref.current + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(ref.current);</span><br><span class=\"line\">    setX(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">100</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      &#123;ref.current&#125;</span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> onClick()&#125;&gt;点击<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"useMemo\"><a href=\"#useMemo\" class=\"headerlink\" title=\"useMemo\"></a>useMemo</h2><p>在理解<code>useMemo</code>之前，需要先了解<code>React.memo</code>。设想这样一个场景：<code>App</code>组件中有两个<code>state</code>，<code>App</code>组件自身使用一个<code>state x</code>，另外一个<code>state y</code>传递给子组件<code>Child</code>。我们的理解是，当<code>x</code>变化时，不会重新渲染子组件<code>Child</code>；只有当<code>y</code>改变时，才会重新渲染<code>Child</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;运行App&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [x, setX] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [y, setY] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onClick = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    setX(x + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      App:&#123;x&#125; <span class=\"tag\">&lt;<span class=\"name\">Child</span> <span class=\"attr\">y</span>=<span class=\"string\">&#123;y&#125;/</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> onClick()&#125;&gt;change X<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;运行Child&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Child: &#123;props.y&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然而，实际上并不是如此，每当<code>x</code>变化时<code>Child</code>都会重新渲染。在这种情况下，可以使用<code>React.memo</code> 。<code>React.memo</code>会检查 <code>props </code>变更，如果<code>props</code>没有变化，则<code>Child</code>组件不会重新渲染。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;运行App&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [x, setX] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [y, setY] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onClick = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    setX(x + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      App:&#123;x&#125; <span class=\"tag\">&lt;<span class=\"name\">Child2</span> <span class=\"attr\">y</span>=<span class=\"string\">&#123;y&#125;</span> /&gt;</span>//使用Child2</span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> onClick()&#125;&gt;change X<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;运行Child&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Child: &#123;props.y&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Child2 = React.memo(Child);<span class=\"comment\">//新增代码</span></span><br></pre></td></tr></table></figure>\n\n<p>但是使用<code>React.memo</code>仍有不足之处：如果传递一个函数给<code>Child</code>组件，那么每当<code>x</code>变化时<code>Child</code>依然会重新渲染。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;运行App&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [x, setX] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [y, setY] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onClick = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    setX(x + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onChildClick = <span class=\"function\">()=&gt;</span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      App:&#123;x&#125; <span class=\"tag\">&lt;<span class=\"name\">Child2</span> <span class=\"attr\">y</span>=<span class=\"string\">&#123;y&#125;</span> <span class=\"attr\">fn</span>=<span class=\"string\">&#123;onChildClick&#125;/</span>&gt;</span>//传入函数</span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> onClick()&#125;&gt;change X<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;运行Child&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;props.fn&#125;</span>&gt;</span>Child: &#123;props.y&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span>;<span class=\"comment\">//接收函数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Child2 = React.memo(Child);</span><br></pre></td></tr></table></figure>\n\n<p>这是因为每当<code>x</code>变化时，<code>App</code>都会重新执行，那么<code>onChildClick</code>都会是一个新的引用，所以<code>React.memo</code>失效。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;运行App&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [x, setX] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [y, setY] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onClick = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    setX(x + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onChildClick = useMemo(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;&#125;;</span><br><span class=\"line\">  &#125;, [y]);<span class=\"comment\">//缓存函数</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      App:&#123;x&#125; <span class=\"tag\">&lt;<span class=\"name\">Child2</span> <span class=\"attr\">y</span>=<span class=\"string\">&#123;y&#125;</span> <span class=\"attr\">fn</span>=<span class=\"string\">&#123;onChildClick&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> onClick()&#125;&gt;change X<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;运行Child&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;props.fn&#125;</span>&gt;</span>Child: &#123;props.y&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Child2 = React.memo(Child);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"useCallback\"><a href=\"#useCallback\" class=\"headerlink\" title=\"useCallback\"></a>useCallback</h2><p><code>useCallback(fn, deps)</code> 相当于 <code>useMemo(() =&gt; fn, deps)</code>。那么上述<code>useMemo</code>的代码可改写成：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;运行App&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [x, setX] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [y, setY] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onClick = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    setX(x + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onChildClick = useCallback(<span class=\"function\">() =&gt;</span> &#123;&#125;, [y]);<span class=\"comment\">//使用useCallback改写useMemo</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;App&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      App:&#123;x&#125; <span class=\"tag\">&lt;<span class=\"name\">Child2</span> <span class=\"attr\">y</span>=<span class=\"string\">&#123;y&#125;</span> <span class=\"attr\">fn</span>=<span class=\"string\">&#123;onChildClick&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> onClick()&#125;&gt;change X<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;运行Child&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;props.fn&#125;</span>&gt;</span>Child: &#123;props.y&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Child2 = React.memo(Child);</span><br></pre></td></tr></table></figure>"}],"PostAsset":[{"_id":"source/_posts/MVC模式/1.jpg","slug":"1.jpg","post":"ckpozdwlr0002xku01igmgukh","modified":0,"renderable":0},{"_id":"source/_posts/REM/rem-1.jpg","slug":"rem-1.jpg","post":"ckpozdwls0003xku05me50r82","modified":0,"renderable":0},{"_id":"source/_posts/REM/rem-2.jpg","slug":"rem-2.jpg","post":"ckpozdwls0003xku05me50r82","modified":0,"renderable":0},{"_id":"source/_posts/REM/rem-3.jpg","slug":"rem-3.jpg","post":"ckpozdwls0003xku05me50r82","modified":0,"renderable":0},{"_id":"source/_posts/flex布局/align-content-center.jpg","slug":"align-content-center.jpg","post":"ckpp42uyj000014u00yhmaert","modified":0,"renderable":0},{"_id":"source/_posts/flex布局/align-content-flex-end.jpg","slug":"align-content-flex-end.jpg","post":"ckpp42uyj000014u00yhmaert","modified":0,"renderable":0},{"_id":"source/_posts/flex布局/align-content-flex-start.jpg","slug":"align-content-flex-start.jpg","post":"ckpp42uyj000014u00yhmaert","modified":0,"renderable":0},{"_id":"source/_posts/flex布局/align-content-space-around.jpg","slug":"align-content-space-around.jpg","post":"ckpp42uyj000014u00yhmaert","modified":0,"renderable":0},{"_id":"source/_posts/flex布局/align-content-space-between.jpg","slug":"align-content-space-between.jpg","post":"ckpp42uyj000014u00yhmaert","modified":0,"renderable":0},{"_id":"source/_posts/flex布局/align-content-stretch.jpg","slug":"align-content-stretch.jpg","post":"ckpp42uyj000014u00yhmaert","modified":0,"renderable":0},{"_id":"source/_posts/flex布局/align-items-baseline.jpg","slug":"align-items-baseline.jpg","post":"ckpp42uyj000014u00yhmaert","modified":0,"renderable":0},{"_id":"source/_posts/flex布局/align-items-center.jpg","slug":"align-items-center.jpg","post":"ckpp42uyj000014u00yhmaert","modified":0,"renderable":0},{"_id":"source/_posts/flex布局/align-items-flex-end.jpg","slug":"align-items-flex-end.jpg","post":"ckpp42uyj000014u00yhmaert","modified":0,"renderable":0},{"_id":"source/_posts/flex布局/align-items-flex-start.jpg","slug":"align-items-flex-start.jpg","post":"ckpp42uyj000014u00yhmaert","modified":0,"renderable":0},{"_id":"source/_posts/flex布局/align-items-stretch.jpg","slug":"align-items-stretch.jpg","post":"ckpp42uyj000014u00yhmaert","modified":0,"renderable":0},{"_id":"source/_posts/flex布局/align-self.jpg","slug":"align-self.jpg","post":"ckpp42uyj000014u00yhmaert","modified":0,"renderable":0},{"_id":"source/_posts/flex布局/center.jpg","slug":"center.jpg","post":"ckpp42uyj000014u00yhmaert","modified":0,"renderable":0},{"_id":"source/_posts/flex布局/column-reverse.jpg","slug":"column-reverse.jpg","post":"ckpp42uyj000014u00yhmaert","modified":0,"renderable":0},{"_id":"source/_posts/flex布局/column.jpg","slug":"column.jpg","post":"ckpp42uyj000014u00yhmaert","modified":0,"renderable":0},{"_id":"source/_posts/flex布局/flex-auto.jpg","slug":"flex-auto.jpg","post":"ckpp42uyj000014u00yhmaert","modified":0,"renderable":0},{"_id":"source/_posts/flex布局/flex-basis.jpg","slug":"flex-basis.jpg","post":"ckpp42uyj000014u00yhmaert","modified":0,"renderable":0},{"_id":"source/_posts/flex布局/flex-end.jpg","slug":"flex-end.jpg","post":"ckpp42uyj000014u00yhmaert","modified":0,"renderable":0},{"_id":"source/_posts/flex布局/flex-flow.jpg","slug":"flex-flow.jpg","post":"ckpp42uyj000014u00yhmaert","modified":0,"renderable":0},{"_id":"source/_posts/flex布局/flex-grow-2.jpg","slug":"flex-grow-2.jpg","post":"ckpp42uyj000014u00yhmaert","modified":0,"renderable":0},{"_id":"source/_posts/flex布局/flex-grow.jpg","slug":"flex-grow.jpg","post":"ckpp42uyj000014u00yhmaert","modified":0,"renderable":0},{"_id":"source/_posts/flex布局/flex-shrink-2.jpg","slug":"flex-shrink-2.jpg","post":"ckpp42uyj000014u00yhmaert","modified":0,"renderable":0},{"_id":"source/_posts/flex布局/flex-shrink.jpg","slug":"flex-shrink.jpg","post":"ckpp42uyj000014u00yhmaert","modified":0,"renderable":0},{"_id":"source/_posts/flex布局/flex-start.jpg","slug":"flex-start.jpg","post":"ckpp42uyj000014u00yhmaert","modified":0,"renderable":0},{"_id":"source/_posts/flex布局/flex.jpg","slug":"flex.jpg","post":"ckpp42uyj000014u00yhmaert","modified":0,"renderable":0},{"_id":"source/_posts/flex布局/nowrap.jpg","slug":"nowrap.jpg","post":"ckpp42uyj000014u00yhmaert","modified":0,"renderable":0},{"_id":"source/_posts/flex布局/order.jpg","slug":"order.jpg","post":"ckpp42uyj000014u00yhmaert","modified":0,"renderable":0},{"_id":"source/_posts/flex布局/row-reverse.jpg","slug":"row-reverse.jpg","post":"ckpp42uyj000014u00yhmaert","modified":0,"renderable":0},{"_id":"source/_posts/flex布局/row.jpg","slug":"row.jpg","post":"ckpp42uyj000014u00yhmaert","modified":0,"renderable":0},{"_id":"source/_posts/flex布局/space-around.jpg","slug":"space-around.jpg","post":"ckpp42uyj000014u00yhmaert","modified":0,"renderable":0},{"_id":"source/_posts/flex布局/space-between.jpg","slug":"space-between.jpg","post":"ckpp42uyj000014u00yhmaert","modified":0,"renderable":0},{"_id":"source/_posts/flex布局/wrap-reverse.jpg","slug":"wrap-reverse.jpg","post":"ckpp42uyj000014u00yhmaert","modified":0,"renderable":0},{"_id":"source/_posts/flex布局/wrap.jpg","slug":"wrap.jpg","post":"ckpp42uyj000014u00yhmaert","modified":0,"renderable":0},{"_id":"source/_posts/事件模型/1.jpg","slug":"1.jpg","post":"ckpozdwlu0006xku05xkd89r5","modified":0,"renderable":0},{"_id":"source/_posts/实现一个基于React的Button组件/type.jpg","slug":"type.jpg","post":"ckq51faol00003ku000qn0kzr","modified":0,"renderable":0},{"_id":"source/_posts/实现一个基于React的Button组件/disabled.jpg","slug":"disabled.jpg","post":"ckq51faol00003ku000qn0kzr","modified":0,"renderable":0},{"_id":"source/_posts/实现一个基于React的Button组件/ghost.jpg","slug":"ghost.jpg","post":"ckq51faol00003ku000qn0kzr","modified":0,"renderable":0},{"_id":"source/_posts/实现一个基于React的Button组件/size.jpg","slug":"size.jpg","post":"ckq51faol00003ku000qn0kzr","modified":0,"renderable":0},{"_id":"source/_posts/实现一个基于React的Button组件/icon.jpg","slug":"icon.jpg","post":"ckq51faol00003ku000qn0kzr","modified":0,"renderable":0},{"_id":"source/_posts/实现一个基于React的Input组件/disabled.jpg","slug":"disabled.jpg","post":"ckqnkbxu1000054u0c1e85q9i","modified":0,"renderable":0},{"_id":"source/_posts/实现一个基于React的Input组件/pre-suf.jpg","slug":"pre-suf.jpg","post":"ckqnkbxu1000054u0c1e85q9i","modified":0,"renderable":0},{"_id":"source/_posts/实现一个基于React的Input组件/error.jpg","slug":"error.jpg","post":"ckqnkbxu1000054u0c1e85q9i","modified":0,"renderable":0},{"_id":"source/_posts/实现一个基于React的Input组件/before-after.jpg","slug":"before-after.jpg","post":"ckqnkbxu1000054u0c1e85q9i","modified":0,"renderable":0},{"_id":"source/_posts/React生命周期/new_lifecycle.jpg","slug":"new_lifecycle.jpg","post":"ckrk75hk000009gu091msc7e8","modified":0,"renderable":0},{"_id":"source/_posts/React生命周期/old_lifecycle.jpg","slug":"old_lifecycle.jpg","post":"ckrk75hk000009gu091msc7e8","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckpozdwlv0008xku0199n8230","category_id":"ckpp26bty00003cu08bsd3lfn","_id":"ckpp26btz00013cu028hx0fqn"},{"post_id":"ckpozdwls0003xku05me50r82","category_id":"ckpp2djvf00043cu024yneziq","_id":"ckpp2djvg00073cu05aij42gw"},{"post_id":"ckpozdwlt0004xku01oxi2mo9","category_id":"ckpp26bty00003cu08bsd3lfn","_id":"ckpp2x38100017ku0f07hg8rs"},{"post_id":"ckpozdwlw0009xku04hl4dzcz","category_id":"ckpp26bty00003cu08bsd3lfn","_id":"ckpp307si000a7ku07yah9mrs"},{"post_id":"ckpozdwlu0006xku05xkd89r5","category_id":"ckpp26bty00003cu08bsd3lfn","_id":"ckpp3155w000c7ku04fjkhxix"},{"post_id":"ckpozdwlv0007xku030xlfflf","category_id":"ckpp32oon000i7ku02hxr2t5y","_id":"ckpp32ooo000j7ku0c6jpeidw"},{"post_id":"ckpozdwlr0002xku01igmgukh","category_id":"ckpp26bty00003cu08bsd3lfn","_id":"ckpp32q76000l7ku0853v1w0k"},{"post_id":"ckpozdwlq0001xku07toc8omo","category_id":"ckpp26bty00003cu08bsd3lfn","_id":"ckpp331tz000o7ku0acyod01r"},{"post_id":"ckpozdwlm0000xku076efc2dc","category_id":"ckpp26bty00003cu08bsd3lfn","_id":"ckpp33uie000q7ku05nqj8fcs"},{"post_id":"ckpozdwm0000dxku05lh19nzu","category_id":"ckpp26bty00003cu08bsd3lfn","_id":"ckpp3543k000x7ku056vj2geu"},{"post_id":"ckpp42uyj000014u00yhmaert","category_id":"ckpp2djvf00043cu024yneziq","_id":"ckpp4l73f0001e0u04noud42j"},{"post_id":"ckpqc3vvc0000dwu001grgdfj","category_id":"ckpp26bty00003cu08bsd3lfn","_id":"ckpqc3vvi0002dwu0dbje172m"},{"post_id":"ckps4qo9o00008wu04twxbrh0","category_id":"ckpp26bty00003cu08bsd3lfn","_id":"ckps4qoa400028wu05ek376ng"},{"post_id":"ckpxlvlk60000zsu0d30ffn46","category_id":"ckpxlvll10001zsu01o6d1xu6","_id":"ckpxlvll60004zsu0a6pz8qt0"},{"post_id":"ckr4ixmaw0000ycu0buu0huul","category_id":"ckpp26bty00003cu08bsd3lfn","_id":"ckr4ixmbt0002ycu09zml33na"},{"post_id":"ckrc1duer00009ku097od0y6s","category_id":"ckpp26bty00003cu08bsd3lfn","_id":"ckrc1fo8t00029ku07duz2jii"},{"post_id":"ckrk75hk000009gu091msc7e8","category_id":"ckrk773jb00019gu0e6rdh0oy","_id":"ckrk773jc00039gu07h387ko3"},{"post_id":"ckq51faol00003ku000qn0kzr","category_id":"ckrk773jb00019gu0e6rdh0oy","_id":"ckrkgbxwx0003zku00oh10nl2"},{"post_id":"ckq51faol00003ku000qn0kzr","category_id":"ckrkgbxvw0000zku0bw5c238f","_id":"ckrkgbxwx0004zku0396ka141"},{"post_id":"ckr0ios520000icu039zral2i","category_id":"ckrk773jb00019gu0e6rdh0oy","_id":"ckrkgbxwx0005zku0a5ohavrq"},{"post_id":"ckr0ios520000icu039zral2i","category_id":"ckrkgbxvw0000zku0bw5c238f","_id":"ckrkgbxwx0006zku02b5u7pmf"},{"post_id":"ckqnkbxu1000054u0c1e85q9i","category_id":"ckrk773jb00019gu0e6rdh0oy","_id":"ckrkgbxwy0007zku0dhfu26g2"},{"post_id":"ckqnkbxu1000054u0c1e85q9i","category_id":"ckrkgbxvw0000zku0bw5c238f","_id":"ckrkgbxwy0008zku05j2w9c1c"},{"post_id":"ckroplsyi0000g8u08kjv5als","category_id":"ckrk773jb00019gu0e6rdh0oy","_id":"ckroplsys0002g8u07iwi9o7k"}],"PostTag":[{"post_id":"ckpozdwlv0008xku0199n8230","tag_id":"ckpp2yl1i00037ku052w78bf6","_id":"ckpp2yl1j00067ku03im8852u"},{"post_id":"ckpozdwlv0008xku0199n8230","tag_id":"ckpp2yl1j00047ku04npx6hod","_id":"ckpp2yl1k00077ku09ast6kwl"},{"post_id":"ckpozdwlv0008xku0199n8230","tag_id":"ckpp2yl1j00057ku05xtq1bi1","_id":"ckpp2yl1k00087ku078xs89r0"},{"post_id":"ckpozdwlu0006xku05xkd89r5","tag_id":"ckpp3155w000b7ku047u059tt","_id":"ckpp3155w000d7ku0f4sybpqg"},{"post_id":"ckpozdwlv0007xku030xlfflf","tag_id":"ckpp31ye1000f7ku0c57f068v","_id":"ckpp31ye2000g7ku08nsac7ox"},{"post_id":"ckpozdwlr0002xku01igmgukh","tag_id":"ckpp32q75000k7ku0d0uwa3l2","_id":"ckpp32q76000m7ku0dl5v16io"},{"post_id":"ckpozdwlm0000xku076efc2dc","tag_id":"ckpp33uie000p7ku0ex7p1dgr","_id":"ckpp33uif000t7ku0g41n3ety"},{"post_id":"ckpozdwlm0000xku076efc2dc","tag_id":"ckpp33uif000r7ku06sri75n4","_id":"ckpp33uif000u7ku00mdvhqu4"},{"post_id":"ckpozdwlm0000xku076efc2dc","tag_id":"ckpp33uif000s7ku02rr3bb2p","_id":"ckpp33uif000v7ku09x27h4t0"},{"post_id":"ckpozdwm0000dxku05lh19nzu","tag_id":"ckpp357e800107ku097wy4wvj","_id":"ckpp357e900117ku0495bhpxb"},{"post_id":"ckpozdwm0000dxku05lh19nzu","tag_id":"ckpp35io100127ku05gcm8ztl","_id":"ckpp35io100137ku03pqxelo5"},{"post_id":"ckpozdwlq0001xku07toc8omo","tag_id":"ckpp35io100127ku05gcm8ztl","_id":"ckpp35nvc00147ku0c35r8sx5"},{"post_id":"ckpozdwlw0009xku04hl4dzcz","tag_id":"ckpp35io100127ku05gcm8ztl","_id":"ckpp35xy900157ku00k7m476q"},{"post_id":"ckpozdwlt0004xku01oxi2mo9","tag_id":"ckpp35io100127ku05gcm8ztl","_id":"ckpp360pp00167ku09l4u34pw"},{"post_id":"ckpozdwls0003xku05me50r82","tag_id":"ckpp36ued001a7ku05hnob8lp","_id":"ckpp36ued001b7ku09b9ta7g0"},{"post_id":"ckpp42uyj000014u00yhmaert","tag_id":"ckpp36qzt00177ku0753387ea","_id":"ckpp4l73e0000e0u04z766ipl"},{"post_id":"ckpqc3vvc0000dwu001grgdfj","tag_id":"ckpqc3vve0001dwu06qg55f7e","_id":"ckpqc3vvj0004dwu0ai0gadzs"},{"post_id":"ckpqc3vvc0000dwu001grgdfj","tag_id":"ckpqc3vvi0003dwu0csgybiwq","_id":"ckpqc3vvj0005dwu0au7l3bpa"},{"post_id":"ckps4qo9o00008wu04twxbrh0","tag_id":"ckps4qoa000018wu046oxf8qg","_id":"ckps4qoa400038wu05pi2ed5u"},{"post_id":"ckps4qo9o00008wu04twxbrh0","tag_id":"ckpqc3vvi0003dwu0csgybiwq","_id":"ckps4qoa500048wu0djux7w8d"},{"post_id":"ckpxlvlk60000zsu0d30ffn46","tag_id":"ckpxlvll50002zsu03xnbfz8m","_id":"ckpxlvll70007zsu01ciyb15s"},{"post_id":"ckpxlvlk60000zsu0d30ffn46","tag_id":"ckpxlvll60003zsu092gxh2uc","_id":"ckpxlvll70008zsu0azmy5o0t"},{"post_id":"ckpxlvlk60000zsu0d30ffn46","tag_id":"ckpxlvll60005zsu0dlzueczp","_id":"ckpxlvll70009zsu05h391dn7"},{"post_id":"ckpxlvlk60000zsu0d30ffn46","tag_id":"ckpxlvll70006zsu073zndoy9","_id":"ckpxlvll7000azsu01o5h01vz"},{"post_id":"ckq51faol00003ku000qn0kzr","tag_id":"ckq51faoo00013ku0bz1n5kh5","_id":"ckq51faou00053ku0gal8hl8p"},{"post_id":"ckq51faol00003ku000qn0kzr","tag_id":"ckq51faot00033ku00w3l4pfz","_id":"ckq51faou00073ku02y3rdqrs"},{"post_id":"ckqnkbxu1000054u0c1e85q9i","tag_id":"ckq51faoo00013ku0bz1n5kh5","_id":"ckqnkbxuj000454u0hidh7stp"},{"post_id":"ckqnkbxu1000054u0c1e85q9i","tag_id":"ckqnkbxue000154u07nui13os","_id":"ckqnkbxuj000554u05m4i8m2n"},{"post_id":"ckr0ios520000icu039zral2i","tag_id":"ckq51faoo00013ku0bz1n5kh5","_id":"ckr0ios5i0004icu04dnr8o6t"},{"post_id":"ckr0ios520000icu039zral2i","tag_id":"ckr0ios5d0001icu031e1cr9c","_id":"ckr0ios5i0005icu001371ovn"},{"post_id":"ckr4ixmaw0000ycu0buu0huul","tag_id":"ckr4ixmbo0001ycu07tdo2xh1","_id":"ckr4ixmbu0003ycu0a6foa401"},{"post_id":"ckr4ixmaw0000ycu0buu0huul","tag_id":"ckpqc3vvi0003dwu0csgybiwq","_id":"ckr4ixmbu0004ycu020xwhnwr"},{"post_id":"ckrc1duer00009ku097od0y6s","tag_id":"ckrc1fo8s00019ku0bn07hxjf","_id":"ckrc1fo8t00039ku02x3u0qwf"},{"post_id":"ckrc1duer00009ku097od0y6s","tag_id":"ckpqc3vvi0003dwu0csgybiwq","_id":"ckrc1fo8t00049ku0hss6dtal"},{"post_id":"ckrk75hk000009gu091msc7e8","tag_id":"ckrkaq30o00049gu0cumage78","_id":"ckrkaq30q00059gu0gtf717ya"},{"post_id":"ckroplsyi0000g8u08kjv5als","tag_id":"ckroplsym0001g8u0axrycfdl","_id":"ckroplsys0003g8u0dswkh9ni"}],"Tag":[{"name":"-JavaScript","_id":"ckpp1zmbu0002n0u0b6x8gddi"},{"name":"JavaScript","_id":"ckpp2ckgs00023cu0g3e9aztb"},{"name":"CSS REM","_id":"ckpp2djvf00053cu0coo4cdgt"},{"name":"CSS -REM","_id":"ckpp2e47n00083cu021mjhm5l"},{"name":"CSS, REM","_id":"ckpp2evcu000a3cu09lmadvbk"},{"name":"CSS","_id":"ckpp2g17h000c3cu0d1ave7hw"},{"name":"REM","_id":"ckpp2g17i000d3cu03oie72px"},{"name":"Function","_id":"ckpp2x38100007ku0gdj4h55g"},{"name":"typeof","_id":"ckpp2yl1i00037ku052w78bf6"},{"name":"instanceof","_id":"ckpp2yl1j00047ku04npx6hod"},{"name":"toString","_id":"ckpp2yl1j00057ku05xtq1bi1"},{"name":"Event","_id":"ckpp3155w000b7ku047u059tt"},{"name":"webpack","_id":"ckpp31ye1000f7ku0c57f068v"},{"name":"MVC","_id":"ckpp32q75000k7ku0d0uwa3l2"},{"name":"Cookie","_id":"ckpp33uie000p7ku0ex7p1dgr"},{"name":"Session","_id":"ckpp33uif000r7ku06sri75n4"},{"name":"LocalStorage","_id":"ckpp33uif000s7ku02rr3bb2p"},{"name":"closure","_id":"ckpp3543k000w7ku02j0q1gnr"},{"name":"Closure","_id":"ckpp357e800107ku097wy4wvj"},{"name":"function","_id":"ckpp35io100127ku05gcm8ztl"},{"name":"flex","_id":"ckpp36qzt00177ku0753387ea"},{"name":"rem","_id":"ckpp36ued001a7ku05hnob8lp"},{"name":"deep clone","_id":"ckpqc3vve0001dwu06qg55f7e"},{"name":"手写系列","_id":"ckpqc3vvi0003dwu0csgybiwq"},{"name":"EventHub","_id":"ckps4qoa000018wu046oxf8qg"},{"name":"Hexo","_id":"ckpxlvll50002zsu03xnbfz8m"},{"name":"hexo-theme-next","_id":"ckpxlvll60003zsu092gxh2uc"},{"name":"hexo init","_id":"ckpxlvll60005zsu0dlzueczp"},{"name":"hexo-theme-next 图片无法加载","_id":"ckpxlvll70006zsu073zndoy9"},{"name":"React","_id":"ckq51faoo00013ku0bz1n5kh5"},{"name":"Button","_id":"ckq51faot00033ku00w3l4pfz"},{"name":"Input","_id":"ckqnkbxue000154u07nui13os"},{"name":"Modal","_id":"ckr0ios5d0001icu031e1cr9c"},{"name":"Promise","_id":"ckr4ixmbo0001ycu07tdo2xh1"},{"name":"bind","_id":"ckrc1fo8s00019ku0bn07hxjf"},{"name":"React生命周期","_id":"ckrkaq30o00049gu0cumage78"},{"name":"React Hooks","_id":"ckroplsym0001g8u0axrycfdl"}]}}